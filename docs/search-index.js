var searchIndex = JSON.parse('{\
"mmtk":{"doc":"Memory Management ToolKit (MMTk) is a portable and high …","i":[[0,"util","mmtk","Utilities used by other modules, including allocators, …",null,null],[0,"macros","mmtk::util","",null,null],[0,"conversions","","",null,null],[5,"is_address_aligned","mmtk::util::conversions","",null,[[["address",3]]]],[5,"page_align_down","","",null,[[["address",3]],["address",3]]],[5,"is_page_aligned","","",null,[[["address",3]]]],[5,"chunk_align_up","","",null,[[["address",3]],["address",3]]],[5,"chunk_align_down","","",null,[[["address",3]],["address",3]]],[5,"mmap_chunk_align_up","","",null,[[["address",3]],["address",3]]],[5,"mmap_chunk_align_down","","",null,[[["address",3]],["address",3]]],[5,"bytes_to_chunks_up","","",null,[[]]],[5,"address_to_chunk_index","","",null,[[["address",3]]]],[5,"chunk_index_to_address","","",null,[[],["address",3]]],[5,"raw_align_up","","",null,[[]]],[5,"raw_align_down","","",null,[[]]],[5,"raw_is_aligned","","",null,[[]]],[5,"pages_to_bytes","","",null,[[]]],[5,"bytes_to_pages_up","","",null,[[]]],[5,"bytes_to_pages","","",null,[[]]],[0,"address","mmtk::util","",null,null],[6,"ByteSize","mmtk::util::address","size in bytes",null,null],[6,"ByteOffset","","offset in byte",null,null],[3,"Address","","Address represents an arbitrary address. This is designed …",null,null],[18,"ZERO","","",0,null],[18,"MAX","","",0,null],[11,"from_ptr","","creates Address from a pointer",0,[[],["address",3]]],[11,"from_ref","","",0,[[],["address",3]]],[11,"from_mut_ptr","","creates Address from a mutable pointer",0,[[],["address",3]]],[11,"zero","","creates a null Address (0)",0,[[],["address",3]]],[11,"max","","creates an Address of (usize::MAX)",0,[[],["address",3]]],[11,"from_usize","","creates an arbitrary Address",0,[[],["address",3]]],[11,"shift","","shifts the address by N T-typed objects (returns addr + N …",0,[[]]],[11,"get_extent","","",0,[[["address",3]],["bytesize",6]]],[11,"get_offset","","",0,[[["address",3]],["byteoffset",6]]],[11,"add","","",0,[[],["address",3]]],[11,"load","","loads a value of type T from the address",0,[[],["copy",8]]],[11,"store","","stores a value of type T to the address",0,[[]]],[11,"atomic_load","","atomic operation: load",0,[[["ordering",4]]]],[11,"atomic_store","","atomic operation: store",0,[[["ordering",4]]]],[11,"compare_exchange","","atomic operation: compare and exchange usize",0,[[["ordering",4]],["result",4]]],[11,"is_zero","","is this address zero?",0,[[]]],[11,"align_up","","aligns up the address to the given alignment",0,[[["bytesize",6]],["address",3]]],[11,"align_down","","aligns down the address to the given alignment",0,[[["bytesize",6]],["address",3]]],[11,"is_aligned_to","","is this address aligned to the given alignment",0,[[]]],[11,"to_object_reference","","converts the Address into an ObjectReference",0,[[],["objectreference",3]]],[11,"to_ptr","","converts the Address to a pointer",0,[[]]],[11,"to_mut_ptr","","converts the Address to a mutable pointer",0,[[]]],[11,"as_usize","","converts the Address to a pointer-sized integer",0,[[]]],[11,"chunk_index","","returns the chunk index for this address",0,[[]]],[11,"is_mapped","","return true if the referenced memory is mapped",0,[[]]],[3,"ObjectReference","","ObjectReference represents address for an object. …",null,null],[11,"to_address","","converts the ObjectReference to an Address",1,[[],["address",3]]],[11,"is_null","","is this object reference null reference?",1,[[]]],[11,"value","","returns the ObjectReference",1,[[]]],[11,"is_live","","",1,[[]]],[11,"is_movable","","",1,[[]]],[11,"is_mapped","","",1,[[]]],[0,"alloc","mmtk::util","",null,null],[0,"allocator","mmtk::util::alloc","",null,null],[5,"align_allocation_no_fill","mmtk::util::alloc::allocator","",null,[[["address",3]],["address",3]]],[5,"align_allocation","","",null,[[["address",3]],["address",3]]],[5,"fill_alignment_gap","","",null,[[["address",3]]]],[5,"get_maximum_aligned_size","","",null,[[]]],[8,"Allocator","","",null,null],[10,"get_tls","","",2,[[],["opaquepointer",3]]],[10,"get_space","","",2,[[],[["option",4],["space",8]]]],[10,"get_plan","","",2,[[],["selectedplan",6]]],[10,"alloc","","",2,[[],["address",3]]],[11,"alloc_slow","","",2,[[],["address",3]]],[11,"alloc_slow_inline","","",2,[[],["address",3]]],[10,"alloc_slow_once","","",2,[[],["address",3]]],[11,"is","","Returns true if the trait object wraps an object of type …",2,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the …",2,[[["box",3]],[["box",3],["box",3],["result",4]]]],[11,"downcast_rc","","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …",2,[[["rc",3]],[["rc",3],["rc",3],["result",4]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object …",2,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the …",2,[[],["option",4]]],[0,"allocators","mmtk::util::alloc","",null,null],[3,"Allocators","mmtk::util::alloc::allocators","",null,null],[12,"bump_pointer","","",3,null],[12,"large_object","","",3,null],[11,"get_allocator","","SafetyThe selector needs to be valid, and points to an …",3,[[["allocatorselector",4]],["allocator",8]]],[11,"get_allocator_mut","","SafetyThe selector needs to be valid, and points to an …",3,[[["allocatorselector",4]],["allocator",8]]],[11,"new","","",3,[[["selectedplan",6],["opaquepointer",3]]]],[4,"AllocatorSelector","","",null,null],[13,"BumpPointer","","",4,null],[13,"LargeObject","","",4,null],[0,"dump_linear_scan","mmtk::util::alloc","",null,null],[3,"DumpLinearScan","mmtk::util::alloc::dump_linear_scan","",null,null],[0,"embedded_meta_data","mmtk::util::alloc","",null,null],[17,"LOG_BYTES_IN_REGION","mmtk::util::alloc::embedded_meta_data","",null,null],[17,"BYTES_IN_REGION","","",null,null],[17,"REGION_MASK","","",null,null],[17,"LOG_PAGES_IN_REGION","","",null,null],[17,"PAGES_IN_REGION","","",null,null],[5,"get_metadata_base","","",null,[[["address",3]],["address",3]]],[5,"get_metadata_offset","","",null,[[["address",3]]]],[0,"large_object_allocator","mmtk::util::alloc","",null,null],[3,"LargeObjectAllocator","mmtk::util::alloc::large_object_allocator","",null,null],[12,"tls","","",5,null],[11,"new","","",5,[[["largeobjectspace",3],["selectedplan",6],["option",4],["opaquepointer",3]]]],[0,"linear_scan","mmtk::util::alloc","",null,null],[8,"LinearScan","mmtk::util::alloc::linear_scan","",null,null],[10,"scan","","",6,[[["objectreference",3]]]],[3,"BumpAllocator","mmtk::util::alloc","",null,null],[12,"tls","","",7,null],[0,"constants","mmtk::util","",null,null],[17,"INSTANCE_FIELD","mmtk::util::constants","Modes.",null,null],[17,"ARRAY_ELEMENT","","",null,null],[17,"LOG_BYTES_IN_BYTE","","",null,null],[17,"BYTES_IN_BYTE","","",null,null],[17,"LOG_BITS_IN_BYTE","","",null,null],[17,"BITS_IN_BYTE","","",null,null],[17,"LOG_BYTES_IN_MBYTE","","",null,null],[17,"BYTES_IN_MBYTE","","",null,null],[17,"LOG_BYTES_IN_KBYTE","","",null,null],[17,"BYTES_IN_KBYTE","","",null,null],[17,"SUPPORT_CARD_SCANNING","","",null,null],[17,"LOG_CARD_META_SIZE","","",null,null],[17,"LOG_CARD_UNITS","","",null,null],[17,"LOG_CARD_GRAIN","","",null,null],[17,"LOG_CARD_BYTES","","",null,null],[17,"LOG_CARD_META_BYTES","","",null,null],[17,"LOG_CARD_META_PAGES","","",null,null],[17,"CARD_META_PAGES_PER_REGION","","",null,null],[17,"CARD_MASK","","",null,null],[17,"LAZY_SWEEP","","Lazy sweeping - controlled from here because …",null,null],[17,"LOG_BYTES_IN_CHAR","","",null,null],[17,"BYTES_IN_CHAR","","",null,null],[17,"LOG_BITS_IN_CHAR","","",null,null],[17,"BITS_IN_CHAR","","",null,null],[17,"LOG_BYTES_IN_SHORT","","",null,null],[17,"BYTES_IN_SHORT","","",null,null],[17,"LOG_BITS_IN_SHORT","","",null,null],[17,"BITS_IN_SHORT","","",null,null],[17,"LOG_BYTES_IN_INT","","",null,null],[17,"BYTES_IN_INT","","",null,null],[17,"LOG_BITS_IN_INT","","",null,null],[17,"BITS_IN_INT","","",null,null],[17,"LOG_BYTES_IN_LONG","","",null,null],[17,"BYTES_IN_LONG","","",null,null],[17,"LOG_BITS_IN_LONG","","",null,null],[17,"BITS_IN_LONG","","",null,null],[17,"MAX_INT","","",null,null],[17,"MIN_INT","","",null,null],[17,"LOG_BYTES_IN_ADDRESS","","",null,null],[17,"BYTES_IN_ADDRESS","","",null,null],[17,"LOG_BITS_IN_ADDRESS","","",null,null],[17,"BITS_IN_ADDRESS","","",null,null],[17,"LOG_BYTES_IN_WORD","","",null,null],[17,"BYTES_IN_WORD","","",null,null],[17,"LOG_BITS_IN_WORD","","",null,null],[17,"BITS_IN_WORD","","",null,null],[17,"LOG_BYTES_IN_PAGE","","",null,null],[17,"BYTES_IN_PAGE","","",null,null],[17,"LOG_BITS_IN_PAGE","","",null,null],[17,"BITS_IN_PAGE","","",null,null],[17,"LOG_BYTES_IN_ADDRESS_SPACE","","",null,null],[0,"forwarding_word","mmtk::util","",null,null],[5,"attempt_to_forward","mmtk::util::forwarding_word","",null,[[["objectreference",3]]]],[5,"spin_and_get_forwarded_object","","",null,[[["objectreference",3]],["objectreference",3]]],[5,"forward_object","","",null,[[["allocationsemantics",4],["objectreference",3]],["objectreference",3]]],[5,"set_forwarding_pointer","","",null,[[["objectreference",3]]]],[5,"is_forwarded","","",null,[[["objectreference",3]]]],[5,"is_forwarded_or_being_forwarded","","",null,[[["objectreference",3]]]],[5,"state_is_forwarded_or_being_forwarded","","",null,[[]]],[5,"state_is_being_forwarded","","",null,[[]]],[5,"clear_forwarding_bits","","",null,[[["objectreference",3]]]],[5,"read_forwarding_word","","",null,[[["objectreference",3]]]],[5,"write_forwarding_word","","",null,[[["objectreference",3]]]],[5,"compare_exchange_forwarding_word","","",null,[[["objectreference",3]]]],[0,"gc_byte","mmtk::util","",null,null],[3,"GCByte","mmtk::util::gc_byte","This struct encapsulates operations on the per-object GC …",null,null],[5,"read_gc_byte","","Atomically reads the current value of an object\'s GC byte.",null,[[["objectreference",3]]]],[5,"write_gc_byte","","Atomically writes a new value to the GC byte of an object",null,[[["objectreference",3]]]],[5,"compare_exchange_gc_byte","","Atomically performs the compare-and-exchange operation on …",null,[[["objectreference",3]]]],[0,"generic_freelist","mmtk::util","",null,null],[17,"FAILURE","mmtk::util::generic_freelist","",null,null],[17,"MAX_HEADS","","",null,null],[17,"MAX_UNITS","","",null,null],[8,"GenericFreeList","","",null,null],[10,"head","","",8,[[]]],[10,"heads","","",8,[[]]],[10,"get_entry","","",8,[[]]],[10,"set_entry","","",8,[[]]],[11,"alloc","","",8,[[]]],[11,"alloc_from_unit","","",8,[[]]],[11,"free","","Free a previously allocated contiguous lump of units",8,[[]]],[11,"size","","",8,[[]]],[11,"initialize_heap","","",8,[[]]],[11,"add_to_free","","",8,[[]]],[11,"get_right","","",8,[[]]],[11,"set_sentinel","","",8,[[]]],[11,"get_size","","",8,[[]]],[11,"set_size","","",8,[[]]],[11,"get_free","","",8,[[]]],[11,"set_free","","",8,[[]]],[11,"get_next","","",8,[[]]],[11,"set_next","","",8,[[]]],[11,"get_prev","","",8,[[]]],[11,"set_prev","","",8,[[]]],[11,"get_left","","",8,[[]]],[11,"is_coalescable","","",8,[[]]],[11,"clear_uncoalescable","","",8,[[]]],[11,"set_uncoalescable","","",8,[[]]],[11,"is_multi","","",8,[[]]],[11,"is_free","","",8,[[]]],[11,"get_lo_entry","","",8,[[]]],[11,"get_hi_entry","","",8,[[]]],[11,"set_lo_entry","","",8,[[]]],[11,"set_hi_entry","","",8,[[]]],[11,"__alloc","","",8,[[]]],[11,"__split","","",8,[[]]],[11,"__coalesce","","",8,[[]]],[11,"__remove_from_free","","",8,[[]]],[0,"header_byte","mmtk::util","",null,null],[17,"TOTAL_BITS","mmtk::util::header_byte","",null,null],[17,"NEEDS_UNLOGGED_BIT","","",null,null],[17,"UNLOGGED_BIT_NUMBER","","",null,null],[17,"UNLOGGED_BIT","","",null,null],[17,"USED_GLOBAL_BITS","","",null,null],[5,"mark_as_unlogged","","",null,[[["objectreference",3]]]],[5,"mark_as_logged","","",null,[[["objectreference",3]]]],[5,"is_unlogged","","",null,[[["objectreference",3]]]],[0,"heap","mmtk::util","",null,null],[0,"layout","mmtk::util::heap","",null,null],[0,"heap_parameters","mmtk::util::heap::layout","",null,null],[17,"LOG_MAX_SPACES","mmtk::util::heap::layout::heap_parameters","log_2 of the maximum number of spaces a Plan can support.",null,null],[17,"MAX_SPACES","","Maximum number of spaces a Plan can support.",null,null],[17,"LOG_SPACE_SIZE_64","","In a 64-bit addressing model, each space is the same …",null,null],[0,"vm_layout_constants","mmtk::util::heap::layout","",null,null],[17,"LOG_ADDRESS_SPACE","mmtk::util::heap::layout::vm_layout_constants","log_2 of the addressable virtual space ",null,null],[17,"LOG_BYTES_IN_CHUNK","","log_2 of the coarsest unit of address space allocation.",null,null],[17,"BYTES_IN_CHUNK","","Coarsest unit of address space allocation. ",null,null],[17,"PAGES_IN_CHUNK","","Coarsest unit of address space allocation, in pages ",null,null],[17,"LOG_MAX_CHUNKS","","log_2 of the maximum number of chunks we need to track.  …",null,null],[17,"MAX_CHUNKS","","Maximum number of chunks we need to track.  Only used in …",null,null],[17,"LOG_SPACE_EXTENT","","An upper bound on the extent of any space in the current …",null,null],[17,"MAX_SPACE_EXTENT","","An upper bound on the extent of any space in the current …",null,null],[17,"HEAP_START","","",null,null],[17,"HEAP_END","","",null,null],[17,"VM_SPACE_SIZE","","",null,null],[17,"AVAILABLE_START","","Lowest virtual address available for MMTk to manage.  The …",null,null],[17,"AVAILABLE_END","","Highest virtual address available for MMTk to manage.  …",null,null],[17,"AVAILABLE_BYTES","","Size of the address space available to the MMTk heap. ",null,null],[17,"LOG_MMAP_CHUNK_BYTES","","Granularity at which we map and unmap virtual address …",null,null],[17,"MMAP_CHUNK_BYTES","","",null,null],[17,"LOG_PAGES_IN_SPACE64","","log_2 of the number of pages in a 64-bit space ",null,null],[17,"PAGES_IN_SPACE64","","The number of pages in a 64-bit space ",null,null],[17,"SPACE_SHIFT_64","","",null,null],[17,"SPACE_MASK_64","","",null,null],[17,"SPACE_SIZE_64","","",null,null],[0,"mmapper","mmtk::util::heap::layout","",null,null],[8,"Mmapper","mmtk::util::heap::layout::mmapper","",null,null],[10,"eagerly_mmap_all_spaces","","Given an address array describing the regions of virtual …",9,[[]]],[10,"mark_as_mapped","","Mark a number of pages as mapped, without making any …",9,[[["address",3]]]],[10,"ensure_mapped","","Ensure that a range of pages is mmapped (or equivalent).  …",9,[[["address",3]]]],[10,"is_mapped_address","","Is the page pointed to by this address mapped ? @param …",9,[[["address",3]]]],[10,"protect","","Mark a number of pages as inaccessible. @param start …",9,[[["address",3]]]],[0,"heap_layout","mmtk::util::heap::layout","",null,null],[6,"VMMap","mmtk::util::heap::layout::heap_layout","",null,null],[6,"Mmapper","","",null,null],[0,"map","mmtk::util::heap::layout","",null,null],[8,"Map","mmtk::util::heap::layout::map","",null,null],[16,"FreeList","","",10,null],[10,"new","","",10,[[]]],[10,"insert","","",10,[[["spacedescriptor",3],["address",3]]]],[10,"create_freelist","","",10,[[["commonfreelistpageresource",3]],["box",3]]],[10,"create_parent_freelist","","",10,[[["commonfreelistpageresource",3]],["box",3]]],[10,"allocate_contiguous_chunks","","",10,[[["address",3],["spacedescriptor",3]],["address",3]]],[10,"get_next_contiguous_region","","",10,[[["address",3]],["address",3]]],[10,"get_contiguous_region_chunks","","",10,[[["address",3]]]],[10,"get_contiguous_region_size","","",10,[[["address",3]]]],[10,"free_all_chunks","","",10,[[["address",3]]]],[10,"free_contiguous_chunks","","",10,[[["address",3]]]],[11,"boot","","",10,[[]]],[10,"finalize_static_space_map","","",10,[[["address",3]]]],[10,"is_finalized","","",10,[[]]],[10,"get_discontig_freelist_pr_ordinal","","",10,[[["commonfreelistpageresource",3]]]],[10,"get_descriptor_for_address","","",10,[[["address",3]],["spacedescriptor",3]]],[11,"get_chunk_index","","",10,[[["address",3]]]],[11,"address_for_chunk_index","","",10,[[],["address",3]]],[10,"add_to_cumulative_committed_pages","","",10,[[]]],[10,"get_cumulative_committed_pages","","",10,[[]]],[0,"map64","mmtk::util::heap::layout","",null,null],[3,"Map64","mmtk::util::heap::layout::map64","",null,null],[3,"FragmentedMapper","mmtk::util::heap::layout","",null,null],[0,"freelistpageresource","mmtk::util::heap","",null,null],[3,"CommonFreeListPageResource","mmtk::util::heap::freelistpageresource","",null,null],[11,"get_start","","",11,[[],["address",3]]],[11,"resize_freelist","","",11,[[["address",3]]]],[3,"FreeListPageResource","","",null,null],[11,"new_contiguous","","",12,[[["vmmap",6],["address",3]]]],[11,"new_discontiguous","","",12,[[["vmmap",6]]]],[11,"release_pages","","",12,[[["address",3]]]],[0,"monotonepageresource","mmtk::util::heap","",null,null],[3,"MonotonePageResource","mmtk::util::heap::monotonepageresource","",null,null],[4,"MonotonePageResourceConditional","","",null,null],[13,"Contiguous","","",13,null],[12,"start","mmtk::util::heap::monotonepageresource::MonotonePageResourceConditional","",14,null],[12,"zeroing_cursor","","Current frontier of zeroing, in a separate zeroing thread ",14,null],[12,"zeroing_sentinel","","Current limit of zeroing.  If zeroingCursor < …",14,null],[13,"Discontiguous","mmtk::util::heap::monotonepageresource","",13,null],[11,"new_contiguous","","",15,[[["vmmap",6],["address",3]]]],[11,"new_discontiguous","","",15,[[["vmmap",6]]]],[11,"reset","","SafetyTODO: I am not sure why this is unsafe.",15,[[]]],[0,"pageresource","mmtk::util::heap","",null,null],[8,"PageResource","mmtk::util::heap::pageresource","",null,null],[11,"get_new_pages","","Allocate pages from this resource. Simply bump the …",16,[[["opaquepointer",3]],["address",3]]],[11,"reserve_pages","","",16,[[]]],[11,"clear_request","","",16,[[]]],[11,"update_zeroing_approach","","",16,[[]]],[11,"skip_concurrent_zeroing","","",16,[[]]],[11,"trigger_concurrent_zeroing","","",16,[[]]],[11,"concurrent_zeroing","","",16,[[]]],[10,"alloc_pages","","",16,[[["opaquepointer",3]],["address",3]]],[10,"adjust_for_metadata","","",16,[[]]],[11,"commit_pages","","Commit pages to the page budget.  This is called after …",16,[[["opaquepointer",3]]]],[11,"reserved_pages","","",16,[[]]],[11,"committed_pages","","",16,[[]]],[11,"bind_space","","",16,[[["space",8]]]],[10,"common","","",16,[[],["commonpageresource",3]]],[10,"common_mut","","",16,[[],["commonpageresource",3]]],[11,"vm_map","","",16,[[],["vmmap",6]]],[3,"CommonPageResource","","",null,null],[12,"contiguous","","",17,null],[12,"growable","","",17,null],[12,"space","","",17,null],[11,"new","","",17,[[],["commonpageresource",3]]],[11,"reserve","","",17,[[]]],[11,"release_reserved","","",17,[[]]],[11,"get_reserved","","",17,[[]]],[11,"reset_reserved","","",17,[[]]],[11,"commit","","",17,[[]]],[11,"release_committed","","",17,[[]]],[11,"get_committed","","",17,[[]]],[11,"reset_committed","","",17,[[]]],[0,"space_descriptor","mmtk::util::heap","",null,null],[3,"SpaceDescriptor","mmtk::util::heap::space_descriptor","",null,null],[18,"UNINITIALIZED","","",18,null],[11,"create_descriptor_from_heap_range","","",18,[[["address",3]],["spacedescriptor",3]]],[11,"create_descriptor","","",18,[[],["spacedescriptor",3]]],[11,"is_empty","","",18,[[]]],[11,"is_contiguous","","",18,[[]]],[11,"is_contiguous_hi","","",18,[[]]],[11,"get_start","","",18,[[],["address",3]]],[11,"get_extent","","",18,[[]]],[11,"get_index","","",18,[[]]],[3,"HeapMeta","mmtk::util::heap","",null,null],[12,"heap_cursor","","",19,null],[12,"heap_limit","","",19,null],[12,"total_pages","","",19,null],[4,"VMRequest","","",null,null],[13,"RequestDiscontiguous","","",20,null],[13,"RequestFixed","","",20,null],[12,"start","mmtk::util::heap::VMRequest","",21,null],[12,"extent","","",21,null],[12,"top","","",21,null],[13,"RequestExtent","mmtk::util::heap","",20,null],[12,"extent","mmtk::util::heap::VMRequest","",22,null],[12,"top","","",22,null],[13,"RequestFraction","mmtk::util::heap","",20,null],[12,"frac","mmtk::util::heap::VMRequest","",23,null],[12,"top","","",23,null],[0,"int_array_freelist","mmtk::util","",null,null],[3,"IntArrayFreeList","mmtk::util::int_array_freelist","",null,null],[12,"head","","",24,null],[12,"heads","","",24,null],[12,"table","","",24,null],[11,"new","","",24,[[]]],[11,"from_parent","","",24,[[["intarrayfreelist",3]]]],[11,"resize_freelist","","",24,[[]]],[0,"logger","mmtk::util","",null,null],[5,"try_init","mmtk::util::logger","Attempt to init a env_logger for MMTk.",null,[[],[["result",4],["setloggererror",3]]]],[0,"memory","mmtk::util","",null,null],[5,"zero","mmtk::util::memory","",null,[[["address",3]]]],[5,"dzmmap","","Demand-zero mmap: This function guarantees to zero all …",null,[[["address",3]],[["address",3],["result",6]]]],[5,"munprotect","","",null,[[["address",3]],["result",6]]],[5,"mprotect","","",null,[[["address",3]],["result",6]]],[0,"opaque_pointer","mmtk::util","",null,null],[3,"OpaquePointer","mmtk::util::opaque_pointer","",null,null],[18,"UNINITIALIZED","","",25,null],[11,"from_address","","",25,[[["address",3]]]],[11,"is_null","","",25,[[]]],[0,"options","mmtk::util","",null,null],[4,"NurseryZeroingOptions","mmtk::util::options","",null,null],[13,"Temporal","","",26,null],[13,"Nontemporal","","",26,null],[13,"Concurrent","","",26,null],[13,"Adaptive","","",26,null],[3,"UnsafeOptionsWrapper","","",null,null],[11,"new","","",27,[[["options",3]],["unsafeoptionswrapper",3]]],[11,"process","","SafetyThis method is not thread safe, as internally it …",27,[[]]],[3,"Options","","",null,null],[12,"threads","","",28,null],[12,"use_short_stack_scans","","",28,null],[12,"use_return_barrier","","",28,null],[12,"eager_complete_sweep","","",28,null],[12,"ignore_system_g_c","","",28,null],[12,"variable_size_heap","","",28,null],[12,"no_finalizer","","",28,null],[12,"no_reference_types","","",28,null],[12,"nursery_zeroing","","",28,null],[12,"verbose","","",28,null],[12,"stress_factor","","",28,null],[12,"vm_space","","",28,null],[12,"vm_space_size","","",28,null],[11,"set_from_str","","",28,[[]]],[0,"raw_memory_freelist","mmtk::util","",null,null],[3,"RawMemoryFreeList","mmtk::util::raw_memory_freelist","",null,null],[12,"head","","",29,null],[12,"heads","","",29,null],[11,"default_block_size","","",29,[[]]],[11,"size_in_pages","","",29,[[]]],[11,"new","","",29,[[["address",3]]]],[11,"grow_freelist","","",29,[[]]],[11,"get_limit","","",29,[[],["address",3]]],[0,"reference_processor","mmtk::util","",null,null],[3,"ReferenceProcessors","mmtk::util::reference_processor","",null,null],[11,"new","","",30,[[]]],[11,"get","","",30,[[["semantics",4]],["referenceprocessor",3]]],[11,"clear","","",30,[[]]],[11,"add_soft_candidate","","",30,[[["objectreference",3]]]],[11,"add_weak_candidate","","",30,[[["objectreference",3]]]],[11,"add_phantom_candidate","","",30,[[["objectreference",3]]]],[11,"forward_refs","","",30,[[]]],[11,"scan_weak_refs","","",30,[[["opaquepointer",3]]]],[11,"scan_soft_refs","","",30,[[["opaquepointer",3]]]],[11,"scan_phantom_refs","","",30,[[["opaquepointer",3]]]],[17,"TRACE","","",null,null],[17,"TRACE_UNREACHABLE","","",null,null],[17,"TRACE_DETAIL","","",null,null],[17,"TRACE_FORWARD","","",null,null],[3,"ReferenceProcessor","","",null,null],[4,"Semantics","","",null,null],[13,"SOFT","","",31,null],[13,"WEAK","","",31,null],[13,"PHANTOM","","",31,null],[11,"new","","",32,[[["semantics",4]]]],[11,"clear","","",32,[[]]],[11,"add_candidate","","",32,[[["objectreference",3]]]],[11,"forward","","",32,[[]]],[0,"statistics","mmtk::util","",null,null],[0,"counter","mmtk::util::statistics","",null,null],[8,"Counter","mmtk::util::statistics::counter","",null,null],[10,"start","","",33,[[]]],[10,"stop","","",33,[[]]],[10,"phase_change","","",33,[[]]],[10,"print_count","","",33,[[]]],[10,"print_total","","",33,[[["option",4]]]],[10,"print_min","","",33,[[]]],[10,"print_max","","",33,[[]]],[10,"print_last","","",33,[[]]],[10,"merge_phases","","",33,[[]]],[10,"implicitly_start","","",33,[[]]],[10,"name","","",33,[[],["string",3]]],[8,"Diffable","","",null,null],[16,"Val","","",34,null],[10,"current_value","","",34,[[]]],[10,"diff","","",34,[[]]],[10,"print_diff","","",34,[[]]],[3,"MonotoneNanoTime","","",null,null],[3,"LongCounter","","",null,null],[12,"implicitly_start","","",35,null],[11,"new","","",35,[[["arc",3],["sharedstats",3],["string",3]]]],[6,"Timer","","",null,null],[0,"stats","mmtk::util::statistics","",null,null],[17,"MAX_PHASES","mmtk::util::statistics::stats","",null,null],[17,"MAX_COUNTERS","","",null,null],[3,"SharedStats","","",null,null],[11,"get_phase","","",36,[[]]],[11,"get_gathering_stats","","",36,[[]]],[3,"Stats","","",null,null],[12,"shared","","",37,null],[11,"new","","",37,[[]]],[11,"new_timer","","",37,[[],[["mutex",3],["arc",3]]]],[11,"start_gc","","",37,[[]]],[11,"end_gc","","",37,[[]]],[11,"print_stats","","",37,[[["mmtk",3]]]],[11,"print_column_names","","",37,[[["hashmap",3]]]],[11,"start_all","","",37,[[]]],[11,"stop_all","","",37,[[["mmtk",3]]]],[11,"get_gathering_stats","","",37,[[]]],[0,"treadmill","mmtk::util","",null,null],[3,"TreadMill","mmtk::util::treadmill","",null,null],[11,"new","","",38,[[]]],[11,"add_to_treadmill","","",38,[[["address",3]]]],[11,"collect_nursery","","",38,[[],[["vec",3],["address",3]]]],[11,"collect","","",38,[[],[["vec",3],["address",3]]]],[11,"copy","","",38,[[["address",3]]]],[11,"to_space_empty","","",38,[[]]],[11,"from_space_empty","","",38,[[]]],[11,"nursery_empty","","",38,[[]]],[11,"flip","","",38,[[]]],[3,"SynchronizedCounter","mmtk::util","",null,null],[0,"policy","mmtk","Memory policies that can be used for spaces.",null,null],[0,"space","mmtk::policy","This class defines and manages spaces.  Each policy is an …",null,null],[8,"SFT","mmtk::policy::space","Space Function Table (SFT).",null,null],[10,"name","","",39,[[]]],[10,"is_live","","",39,[[["objectreference",3]]]],[10,"is_movable","","",39,[[]]],[10,"initialize_header","","",39,[[["objectreference",3]]]],[3,"SFTMap","","",null,null],[11,"new","","",40,[[]]],[11,"get","","",40,[[["address",3]],["sft",8]]],[11,"update","","Update SFT map for the given address range. It should be …",40,[[["address",3]]]],[11,"clear","","",40,[[]]],[8,"Space","","",null,null],[10,"as_space","","",41,[[],["space",8]]],[10,"as_sft","","",41,[[],["sft",8]]],[10,"get_page_resource","","",41,[[],["pageresource",8]]],[10,"init","","",41,[[["vmmap",6]]]],[11,"acquire","","",41,[[["opaquepointer",3]],["address",3]]],[11,"address_in_space","","",41,[[["address",3]]]],[11,"in_space","","",41,[[["objectreference",3]]]],[11,"grow_discontiguous_space","","Safetypotential data race as this mutates \'common\' FIXME: …",41,[[],["address",3]]],[11,"grow_space","","This hook is called by page resources each time a space …",41,[[["address",3]]]],[11,"ensure_mapped","","Ensure this space is marked as mapped -- used when the …",41,[[]]],[11,"reserved_pages","","",41,[[]]],[11,"get_name","","",41,[[]]],[10,"common","","",41,[[],["commonspace",3]]],[11,"common_mut","","",41,[[],["commonspace",3]]],[10,"unsafe_common_mut","","SafetyThis get\'s a mutable reference from self. (i.e. …",41,[[],["commonspace",3]]],[11,"release_discontiguous_chunks","","",41,[[["address",3]]]],[10,"release_multiple_pages","","",41,[[["address",3]]]],[11,"release_all_chunks","","SafetyTODO: I am not sure why this is unsafe.",41,[[]]],[11,"print_vm_map","","",41,[[]]],[11,"is","","Returns true if the trait object wraps an object of type …",41,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the …",41,[[["box",3]],[["box",3],["box",3],["result",4]]]],[11,"downcast_rc","","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …",41,[[["rc",3]],[["rc",3],["rc",3],["result",4]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object …",41,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the …",41,[[],["option",4]]],[3,"CommonSpace","","",null,null],[12,"name","","",42,null],[12,"descriptor","","",42,null],[12,"vmrequest","","",42,null],[12,"contiguous","","",42,null],[12,"zeroed","","",42,null],[12,"start","","",42,null],[12,"extent","","",42,null],[12,"head_discontiguous_region","","",42,null],[12,"vm_map","","",42,null],[12,"mmapper","","",42,null],[3,"SpaceOptions","","",null,null],[12,"name","","",43,null],[12,"movable","","",43,null],[12,"immortal","","",43,null],[12,"zeroed","","",43,null],[12,"vmrequest","","",43,null],[11,"new","","",42,[[["heapmeta",3],["spaceoptions",3],["vmmap",6],["mmapper",6]]]],[11,"init","","",42,[[]]],[11,"vm_map","","",42,[[],["vmmap",6]]],[5,"required_chunks","","",null,[[]]],[0,"immortalspace","mmtk::policy","",null,null],[3,"ImmortalSpace","mmtk::policy::immortalspace","",null,null],[11,"new","","",44,[[["vmrequest",4],["vmmap",6],["mmapper",6],["heapmeta",3]]]],[11,"prepare","","",44,[[]]],[11,"release","","",44,[[]]],[11,"trace_object","","",44,[[["objectreference",3]],["objectreference",3]]],[0,"copyspace","mmtk::policy","",null,null],[3,"CopySpace","mmtk::policy::copyspace","",null,null],[11,"new","","",45,[[["vmrequest",4],["vmmap",6],["mmapper",6],["heapmeta",3]]]],[11,"prepare","","",45,[[]]],[11,"release","","",45,[[]]],[11,"trace_object","","",45,[[["allocationsemantics",4],["objectreference",3]],["objectreference",3]]],[11,"protect","","",45,[[]]],[11,"unprotect","","",45,[[]]],[0,"largeobjectspace","mmtk::policy","",null,null],[3,"LargeObjectSpace","mmtk::policy::largeobjectspace","",null,null],[11,"new","","",46,[[["vmrequest",4],["vmmap",6],["mmapper",6],["heapmeta",3]]]],[11,"prepare","","",46,[[]]],[11,"release","","",46,[[]]],[11,"trace_object","","",46,[[["objectreference",3]],["objectreference",3]]],[11,"allocate_pages","","",46,[[["opaquepointer",3]],["address",3]]],[0,"scheduler","mmtk","A general scheduler implementation. MMTk uses it to …",null,null],[0,"stat","mmtk::scheduler","",null,null],[3,"SchedulerStat","mmtk::scheduler::stat","",null,null],[11,"harness_stat","","",47,[[],[["hashmap",3],["string",3]]]],[11,"merge","","",47,[[["workerlocalstat",3]]]],[3,"WorkStat","","",null,null],[11,"end_of_work","","",48,[[["workerlocalstat",3]]]],[3,"WorkerLocalStat","","",null,null],[11,"is_enabled","","",49,[[]]],[11,"enable","","",49,[[]]],[11,"measure_work","","",49,[[["typeid",3]],["workstat",3]]],[0,"gc_works","mmtk::scheduler","",null,null],[3,"ScheduleCollection","mmtk::scheduler::gc_works","",null,null],[3,"Prepare","","GC Preparation Work (include updating global states)",null,null],[12,"plan","","",50,null],[11,"new","","",50,[[]]],[3,"PrepareMutator","","GC Preparation Work (include updating global states)",null,null],[12,"mutator","","",51,null],[11,"new","","",51,[[["mutator",3]]]],[3,"PrepareCollector","","",null,null],[3,"Release","","",null,null],[12,"plan","","",52,null],[11,"new","","",52,[[]]],[3,"ReleaseMutator","","",null,null],[12,"mutator","","",53,null],[11,"new","","",53,[[["mutator",3]]]],[3,"ReleaseCollector","","",null,null],[3,"StopMutators","","Stop all mutators",null,null],[11,"new","","",54,[[]]],[3,"EndOfGC","","",null,null],[3,"ScanStackRoots","","",null,null],[11,"new","","",55,[[]]],[3,"ScanStackRoot","","",null,null],[12,"0","","",56,null],[3,"ScanVMSpecificRoots","","",null,null],[11,"new","","",57,[[]]],[3,"ProcessEdgesBase","","",null,null],[12,"edges","","",58,null],[12,"nodes","","",58,null],[12,"mmtk","","",58,null],[11,"new","","",58,[[["vec",3],["address",3]]]],[11,"set_worker","","",58,[[["gcworker",6]]]],[11,"worker","","",58,[[],["gcworker",6]]],[11,"mmtk","","",58,[[],["mmtk",3]]],[11,"plan","","",58,[[],["selectedplan",6]]],[8,"ProcessEdgesWork","","Scan & update a list of object slots",null,null],[16,"VM","","",59,null],[18,"CAPACITY","","",59,null],[18,"OVERWRITE_REFERENCE","","",59,null],[18,"SCAN_OBJECTS_IMMEDIATELY","","",59,null],[10,"new","","",59,[[["vec",3],["address",3]]]],[10,"trace_object","","",59,[[["objectreference",3]],["objectreference",3]]],[11,"process_node","","",59,[[["objectreference",3]]]],[11,"flush","","",59,[[]]],[11,"process_edge","","",59,[[["address",3]]]],[11,"process_edges","","",59,[[]]],[3,"ScanObjects","","Scan & update a list of object slots",null,null],[11,"new","","",60,[[["vec",3],["objectreference",3]]]],[3,"ProcessModBuf","","",null,null],[11,"new","","",61,[[["vec",3],["address",3],["vec",3],["objectreference",3]]]],[8,"Context","mmtk::scheduler","The global context for the whole scheduling system. This …",null,null],[16,"WorkerLocal","","",62,null],[11,"spawn_worker","","",62,[[["worker",3],["opaquepointer",3]]]],[8,"WorkerLocal","","Thread-local data for each worker thread.",null,null],[10,"new","","",63,[[]]],[11,"init","","",63,[[["opaquepointer",3]]]],[4,"CoordinatorMessage","","",null,null],[13,"Work","","",64,null],[13,"AllWorkerParked","","",64,null],[13,"BucketDrained","","",64,null],[3,"Scheduler","","",null,null],[12,"unconstrained_works","","Works that are scheduable at any time",65,null],[12,"prepare_stage","","Works that are scheduable within Stop-the-world",65,null],[12,"closure_stage","","",65,null],[12,"release_stage","","",65,null],[12,"final_stage","","",65,null],[12,"coordinator_works","","Works for the coordinator thread",65,null],[12,"worker_monitor","","Condition Variable for worker synchronization",65,null],[12,"channel","","A message channel to send new coordinator works and other …",65,null],[6,"MMTkScheduler","","",null,null],[8,"Work","","",null,null],[10,"do_work","","",66,[[["worker",3]]]],[11,"do_work_with_stat","","",66,[[["worker",3]]]],[8,"CoordinatorWork","","A special kind of work that will execute on the …",null,null],[8,"GCWork","","",null,null],[10,"do_work","","",67,[[["gcworker",6],["mmtk",3]]]],[3,"Worker","","",null,null],[12,"tls","","",68,null],[12,"ordinal","","",68,null],[12,"parked","","",68,null],[12,"local_works","","",68,null],[12,"sender","","",68,null],[12,"stat","","",68,null],[6,"GCWorker","","",null,null],[3,"WorkerGroup","","",null,null],[12,"workers","","",69,null],[0,"vm","mmtk","MMTk-to-VM interface: the VMBinding trait.",null,null],[8,"ActivePlan","mmtk::vm","VM-specific methods for the current plan.",null,null],[10,"global","","Return a reference to the current plan.",70,[[],["selectedplan",6]]],[10,"worker","","Return a <code>GCWorker</code> reference for the thread.",70,[[["opaquepointer",3]],["gcworker",6]]],[10,"is_mutator","","Return whether there is a mutator created and associated …",70,[[["opaquepointer",3]]]],[10,"mutator","","Return a <code>Mutator</code> reference for the thread.",70,[[["opaquepointer",3]]]],[10,"reset_mutator_iterator","","Reset the mutator iterator so that <code>get_next_mutator()</code> …",70,[[]]],[10,"get_next_mutator","","Return the next mutator if there is any. This method …",70,[[],["option",4]]],[11,"mutators","","A utility method to provide a thread-safe mutator …",70,[[],["synchronizedmutatoriterator",3]]],[10,"number_of_mutators","","Return the total count of mutators.",70,[[]]],[8,"Collection","","VM-specific methods for garbage collection.",null,null],[10,"stop_all_mutators","","Stop all the mutator threads. MMTk calls this method when …",71,[[["opaquepointer",3]]]],[10,"resume_mutators","","Resume all the mutator threads, the opposite of the …",71,[[["opaquepointer",3]]]],[10,"block_for_gc","","Block the current thread for GC. This is called when an …",71,[[["opaquepointer",3]]]],[10,"spawn_worker_thread","","Ask the VM to spawn a GC thread for MMTk. A GC thread may …",71,[[["gcworker",6],["option",4],["opaquepointer",3]]]],[10,"prepare_mutator","","Allow VM-specific behaviors for a mutator after all the …",71,[[["opaquepointer",3]]]],[11,"out_of_memory","","Inform the VM for an out-of-memory error. The VM can …",71,[[["opaquepointer",3]]]],[8,"ObjectModel","","VM-specific methods for object model.",null,null],[18,"HAS_GC_BYTE","","Whether an exclusive GC byte in each object\'s header word …",72,null],[18,"GC_BYTE_OFFSET","","The offset of the GC byte from the object reference, in …",72,null],[10,"copy","","Copy an object and return the address of the new object. …",72,[[["allocationsemantics",4],["objectreference",3]],["objectreference",3]]],[10,"copy_to","","Copy an object. This is required for delayed-copy …",72,[[["address",3],["objectreference",3]],["address",3]]],[10,"get_reference_when_copied_to","","Return the reference that an object will be referred to …",72,[[["address",3],["objectreference",3]],["objectreference",3]]],[10,"get_current_size","","Return the size used by an object.",72,[[["objectreference",3]]]],[10,"get_type_descriptor","","Get the type descriptor for an object.",72,[[["objectreference",3]]]],[10,"object_start_ref","","Return the lowest address of the storage associated with …",72,[[["objectreference",3]],["address",3]]],[10,"ref_to_address","","Return an address guaranteed to be inside the storage …",72,[[["objectreference",3]],["address",3]]],[10,"dump_object","","Dump debugging information for an object.",72,[[["objectreference",3]]]],[8,"ReferenceGlue","","VM-specific methods for reference processing.",null,null],[11,"clear_referent","","Weak and soft references always clear the referent before …",73,[[["objectreference",3]]]],[10,"get_referent","","Get the referent from a reference.",73,[[["objectreference",3]],["objectreference",3]]],[10,"set_referent","","Set the referent in a reference.",73,[[["objectreference",3]]]],[10,"process_reference","","Process a reference with the current semantics and return …",73,[[["opaquepointer",3],["objectreference",3]],["objectreference",3]]],[8,"Scanning","","VM-specific methods for scanning roots/objects.",null,null],[18,"SCAN_MUTATORS_IN_SAFEPOINT","","Scan stack roots after all mutators are paused.",74,null],[18,"SINGLE_THREAD_MUTATOR_SCANNING","","Scan all the mutators within a single work packet.",74,null],[10,"scan_object","","Delegated scanning of a object, processing each pointer …",74,[[["opaquepointer",3],["objectreference",3]]]],[10,"notify_initial_thread_scan_complete","","MMTk calls this method at the first time during a …",74,[[["opaquepointer",3]]]],[10,"scan_objects","","Bulk scanning of objects, processing each pointer field …",74,[[]]],[10,"scan_thread_roots","","Scan all the mutators for roots.",74,[[]]],[10,"scan_thread_root","","Scan one mutator for roots.",74,[[["mutator",3],["opaquepointer",3]]]],[10,"scan_vm_specific_roots","","Scan VM-specific roots. The creation of all root scan …",74,[[]]],[10,"supports_return_barrier","","Return whether the VM supports return barriers. This is …",74,[[]]],[8,"VMBinding","","The <code>VMBinding</code> trait associates with each trait, and …",null,null],[16,"VMObjectModel","","",75,null],[16,"VMScanning","","",75,null],[16,"VMCollection","","",75,null],[16,"VMActivePlan","","",75,null],[16,"VMReferenceGlue","","",75,null],[18,"ALIGNMENT_VALUE","","A value to fill in alignment gaps. This value can be used …",75,null],[18,"LOG_MIN_ALIGNMENT","","Allowed minimal alignment.",75,null],[18,"MIN_ALIGNMENT","","Allowed minimal alignment in bytes.",75,null],[18,"MAX_ALIGNMENT_SHIFT","","Allowed maximum alignment as shift by min alignment.    ",75,null],[18,"MAX_ALIGNMENT","","Allowed maximum alignment in bytes.",75,null],[18,"ALLOC_END_ALIGNMENT","","This value is used to assert if the cursor is reasonable …",75,null],[0,"memory_manager","mmtk","VM-to-MMTk interface: safe Rust APIs.",null,null],[5,"start_control_collector","mmtk::memory_manager","Run the main loop for the GC controller thread. This …",null,[[["opaquepointer",3],["mmtk",3]]]],[5,"gc_init","","Initialize an MMTk instance. A VM should call this method …",null,[[["mmtk",3]]]],[5,"bind_mutator","","Request MMTk to create a mutator for the given thread. …",null,[[["mmtk",3],["opaquepointer",3]],[["box",3],["mutator",3]]]],[5,"destroy_mutator","","Reclaim a mutator that is no longer needed.",null,[[["box",3],["mutator",3]]]],[5,"flush_mutator","","Flush the mutator\'s local states.",null,[[["mutator",3]]]],[5,"alloc","","Allocate memory for an object. For performance reasons, a …",null,[[["allocationsemantics",4],["mutator",3]],["address",3]]],[5,"post_alloc","","Perform post-allocation actions, usually initializing …",null,[[["objectreference",3],["allocationsemantics",4],["mutator",3]]]],[5,"get_allocator_mapping","","Return an AllocatorSelector for the given allocation …",null,[[["allocationsemantics",4],["mmtk",3]],["allocatorselector",4]]],[5,"start_worker","","Run the main loop of a GC worker. This method does not …",null,[[["gcworker",6],["mmtk",3],["opaquepointer",3]]]],[5,"enable_collection","","Allow MMTk to trigger garbage collection. A VM should …",null,[[["mmtk",3],["opaquepointer",3]]]],[5,"process","","Process MMTk run-time options.",null,[[["mmtk",3]]]],[5,"used_bytes","","Return used memory in bytes.",null,[[["mmtk",3]]]],[5,"free_bytes","","Return free memory in bytes.",null,[[["mmtk",3]]]],[5,"starting_heap_address","","Return the starting address of the heap. <em>Note that …",null,[[],["address",3]]],[5,"last_heap_address","","Return the ending address of the heap. <em>Note that …",null,[[],["address",3]]],[5,"total_bytes","","Return the total memory in bytes.",null,[[["mmtk",3]]]],[5,"handle_user_collection_request","","Trigger a garbage collection as requested by the user.",null,[[["opaquepointer",3],["mmtk",3]]]],[5,"is_live_object","","Is the object alive?",null,[[["objectreference",3]]]],[5,"is_mapped_object","","Is the object in the mapped memory?",null,[[["objectreference",3]]]],[5,"is_mapped_address","","Is the address in the mapped memory?",null,[[["address",3]]]],[5,"modify_check","","Check that if a garbage collection is in progress and if …",null,[[["objectreference",3],["mmtk",3]]]],[5,"add_weak_candidate","","Add a reference to the list of weak references.",null,[[["objectreference",3],["mmtk",3]]]],[5,"add_soft_candidate","","Add a reference to the list of soft references.",null,[[["objectreference",3],["mmtk",3]]]],[5,"add_phantom_candidate","","Add a reference to the list of phantom references.",null,[[["objectreference",3],["mmtk",3]]]],[5,"harness_begin","","Generic hook to allow benchmarks to be harnessed. We do a …",null,[[["opaquepointer",3],["mmtk",3]]]],[5,"harness_end","","Generic hook to allow benchmarks to be harnessed. We stop …",null,[[["mmtk",3]]]],[3,"MMTK","mmtk","An MMTk instance. MMTk allows mutiple instances to run …",null,null],[12,"plan","","",76,null],[12,"vm_map","","",76,null],[12,"mmapper","","",76,null],[12,"sftmap","","",76,null],[12,"reference_processors","","",76,null],[12,"options","","",76,null],[12,"scheduler","","",76,null],[4,"AllocationSemantics","","Allocation semantics that MMTk provides. Each allocation …",null,null],[13,"Default","","",77,null],[13,"Immortal","","",77,null],[13,"Los","","",77,null],[13,"Code","","",77,null],[13,"ReadOnly","","",77,null],[8,"CopyContext","","A GC worker\'s context for copying GCs. Each GC plan …",null,null],[16,"VM","","",78,null],[18,"MAX_NON_LOS_COPY_BYTES","","",78,null],[10,"new","","",78,[[["mmtk",3]]]],[10,"init","","",78,[[["opaquepointer",3]]]],[10,"prepare","","",78,[[]]],[10,"release","","",78,[[]]],[10,"alloc_copy","","",78,[[["allocationsemantics",4],["objectreference",3]],["address",3]]],[11,"post_copy","","",78,[[["address",3],["allocationsemantics",4],["objectreference",3]]]],[11,"copy_check_allocator","","",78,[[["allocationsemantics",4],["objectreference",3]],["allocationsemantics",4]]],[3,"Mutator","","A mutator is a per-thread data structure that manages …",null,null],[12,"allocators","","",79,null],[12,"barrier","","",79,null],[12,"mutator_tls","","",79,null],[12,"plan","","",79,null],[12,"config","","",79,null],[8,"MutatorContext","","Each GC plan should provide their implementation of a …",null,null],[10,"prepare","","",80,[[["opaquepointer",3]]]],[10,"release","","",80,[[["opaquepointer",3]]]],[10,"alloc","","",80,[[["allocationtype",4]],["address",3]]],[10,"post_alloc","","",80,[[["allocationtype",4],["objectreference",3]]]],[11,"flush_remembered_sets","","",80,[[]]],[11,"flush","","",80,[[]]],[10,"get_tls","","",80,[[],["opaquepointer",3]]],[10,"barrier","","",80,[[],["barrier",8]]],[11,"record_modified_node","","",80,[[["objectreference",3]]]],[11,"record_modified_edge","","",80,[[["address",3]]]],[8,"Plan","","A plan describes the global core functionality for all …",null,null],[16,"VM","","",81,null],[16,"Mutator","","",81,null],[16,"CopyContext","","",81,null],[10,"new","","",81,[[["arc",3],["mmtkscheduler",6],["unsafeoptionswrapper",3],["vmmap",6],["mmapper",6]]]],[10,"base","","",81,[[],["baseplan",3]]],[10,"schedule_collection","","",81,[[["mmtkscheduler",6]]]],[11,"common","","",81,[[],["commonplan",3]]],[11,"mmapper","","",81,[[],["mmapper",6]]],[11,"options","","",81,[[],["options",3]]],[10,"gc_init","","",81,[[["arc",3],["vmmap",6]]]],[10,"bind_mutator","","",81,[[["mmtk",3],["opaquepointer",3]],["box",3]]],[10,"get_allocator_mapping","","",81,[[],["enummap",3]]],[11,"in_nursery","","",81,[[]]],[11,"is_initialized","","",81,[[]]],[10,"prepare","","",81,[[["opaquepointer",3]]]],[10,"release","","",81,[[["opaquepointer",3]]]],[11,"poll","","",81,[[["space",8]]]],[11,"log_poll","","",81,[[["space",8]]]],[11,"collection_required","","This method controls the triggering of a GC. It is called …",81,[[["space",8]]]],[11,"get_pages_reserved","","",81,[[]]],[11,"get_total_pages","","",81,[[]]],[11,"get_pages_avail","","",81,[[]]],[11,"get_collection_reserve","","",81,[[]]],[10,"get_pages_used","","",81,[[]]],[11,"is_emergency_collection","","",81,[[]]],[11,"get_free_pages","","",81,[[]]],[11,"stress_test_gc_required","","",81,[[]]],[11,"handle_user_collection_request","","",81,[[["opaquepointer",3]]]],[11,"reset_collection_trigger","","",81,[[]]],[11,"modify_check","","",81,[[["objectreference",3]]]],[8,"TraceLocal","","This trait and its global counterpart implement the core …",null,null],[10,"process_roots","","",82,[[]]],[10,"process_root_edge","","",82,[[["address",3]]]],[10,"trace_object","","",82,[[["objectreference",3]],["objectreference",3]]],[10,"complete_trace","","",82,[[]]],[10,"release","","",82,[[]]],[10,"process_interior_edge","","",82,[[["address",3],["objectreference",3]]]],[11,"overwrite_reference_during_trace","","",82,[[]]],[10,"report_delayed_root_edge","","",82,[[["address",3]]]],[10,"will_not_move_in_current_collection","","",82,[[["objectreference",3]]]],[11,"get_forwarded_reference","","",82,[[["objectreference",3]],["objectreference",3]]],[11,"get_forwarded_referent","","",82,[[["objectreference",3]],["objectreference",3]]],[11,"retain_referent","","",82,[[["objectreference",3]],["objectreference",3]]],[8,"TransitiveClosure","","This trait is the fundamental mechanism for performing a …",null,null],[10,"process_edge","","",83,[[["address",3]]]],[10,"process_node","","",83,[[["objectreference",3]]]],[11,"from","mmtk::util::address","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"into_any","","",0,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",0,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",0,[[],["any",8]]],[11,"as_any_mut","","",0,[[],["any",8]]],[11,"into_any_arc","","",0,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"into_any","","",1,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",1,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",1,[[],["any",8]]],[11,"as_any_mut","","",1,[[],["any",8]]],[11,"into_any_arc","","",1,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::alloc::allocators","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"into_any","","",3,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",3,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",3,[[],["any",8]]],[11,"as_any_mut","","",3,[[],["any",8]]],[11,"into_any_arc","","",3,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"into_any","","",4,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",4,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",4,[[],["any",8]]],[11,"as_any_mut","","",4,[[],["any",8]]],[11,"into_any_arc","","",4,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::alloc","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"into_any","","",7,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",7,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",7,[[],["any",8]]],[11,"as_any_mut","","",7,[[],["any",8]]],[11,"into_any_arc","","",7,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::alloc::dump_linear_scan","",84,[[]]],[11,"into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"into_any","","",84,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",84,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",84,[[],["any",8]]],[11,"as_any_mut","","",84,[[],["any",8]]],[11,"into_any_arc","","",84,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::alloc::large_object_allocator","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"into_any","","",5,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",5,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",5,[[],["any",8]]],[11,"as_any_mut","","",5,[[],["any",8]]],[11,"into_any_arc","","",5,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::gc_byte","",85,[[]]],[11,"into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"into_any","","",85,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",85,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",85,[[],["any",8]]],[11,"as_any_mut","","",85,[[],["any",8]]],[11,"into_any_arc","","",85,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::heap::layout","",86,[[]]],[11,"into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"into_any","","",86,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",86,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",86,[[],["any",8]]],[11,"as_any_mut","","",86,[[],["any",8]]],[11,"into_any_arc","","",86,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::heap::layout::map64","",87,[[]]],[11,"into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"into_any","","",87,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",87,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",87,[[],["any",8]]],[11,"as_any_mut","","",87,[[],["any",8]]],[11,"into_any_arc","","",87,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::heap::freelistpageresource","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"into_any","","",11,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",11,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",11,[[],["any",8]]],[11,"as_any_mut","","",11,[[],["any",8]]],[11,"into_any_arc","","",11,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"into_any","","",12,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",12,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",12,[[],["any",8]]],[11,"as_any_mut","","",12,[[],["any",8]]],[11,"into_any_arc","","",12,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::heap","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"into_any","","",19,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",19,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",19,[[],["any",8]]],[11,"as_any_mut","","",19,[[],["any",8]]],[11,"into_any_arc","","",19,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::heap::monotonepageresource","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"into_any","","",15,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",15,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",15,[[],["any",8]]],[11,"as_any_mut","","",15,[[],["any",8]]],[11,"into_any_arc","","",15,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"into_any","","",13,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",13,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",13,[[],["any",8]]],[11,"as_any_mut","","",13,[[],["any",8]]],[11,"into_any_arc","","",13,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::heap::pageresource","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"into_any","","",17,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",17,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",17,[[],["any",8]]],[11,"as_any_mut","","",17,[[],["any",8]]],[11,"into_any_arc","","",17,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::heap::space_descriptor","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"into_any","","",18,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",18,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",18,[[],["any",8]]],[11,"as_any_mut","","",18,[[],["any",8]]],[11,"into_any_arc","","",18,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::heap","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"into_any","","",20,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",20,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",20,[[],["any",8]]],[11,"as_any_mut","","",20,[[],["any",8]]],[11,"into_any_arc","","",20,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::int_array_freelist","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"into_any","","",24,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",24,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",24,[[],["any",8]]],[11,"as_any_mut","","",24,[[],["any",8]]],[11,"into_any_arc","","",24,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::opaque_pointer","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"into_any","","",25,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",25,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",25,[[],["any",8]]],[11,"as_any_mut","","",25,[[],["any",8]]],[11,"into_any_arc","","",25,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::options","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"into_any","","",26,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",26,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",26,[[],["any",8]]],[11,"as_any_mut","","",26,[[],["any",8]]],[11,"into_any_arc","","",26,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"into_any","","",27,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",27,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",27,[[],["any",8]]],[11,"as_any_mut","","",27,[[],["any",8]]],[11,"into_any_arc","","",27,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"into_any","","",28,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",28,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",28,[[],["any",8]]],[11,"as_any_mut","","",28,[[],["any",8]]],[11,"into_any_arc","","",28,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::raw_memory_freelist","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"into_any","","",29,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",29,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",29,[[],["any",8]]],[11,"as_any_mut","","",29,[[],["any",8]]],[11,"into_any_arc","","",29,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::reference_processor","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"into_any","","",30,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",30,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",30,[[],["any",8]]],[11,"as_any_mut","","",30,[[],["any",8]]],[11,"into_any_arc","","",30,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"into_any","","",32,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",32,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",32,[[],["any",8]]],[11,"as_any_mut","","",32,[[],["any",8]]],[11,"into_any_arc","","",32,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"into_any","","",31,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",31,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",31,[[],["any",8]]],[11,"as_any_mut","","",31,[[],["any",8]]],[11,"into_any_arc","","",31,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::statistics::counter","",88,[[]]],[11,"into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"into_any","","",88,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",88,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",88,[[],["any",8]]],[11,"as_any_mut","","",88,[[],["any",8]]],[11,"into_any_arc","","",88,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"into_any","","",35,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",35,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",35,[[],["any",8]]],[11,"as_any_mut","","",35,[[],["any",8]]],[11,"into_any_arc","","",35,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::statistics::stats","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"into_any","","",36,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",36,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",36,[[],["any",8]]],[11,"as_any_mut","","",36,[[],["any",8]]],[11,"into_any_arc","","",36,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"into_any","","",37,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",37,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",37,[[],["any",8]]],[11,"as_any_mut","","",37,[[],["any",8]]],[11,"into_any_arc","","",37,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util","",89,[[]]],[11,"into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"into_any","","",89,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",89,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",89,[[],["any",8]]],[11,"as_any_mut","","",89,[[],["any",8]]],[11,"into_any_arc","","",89,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::util::treadmill","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"into_any","","",38,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",38,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",38,[[],["any",8]]],[11,"as_any_mut","","",38,[[],["any",8]]],[11,"into_any_arc","","",38,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk","",76,[[]]],[11,"into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"into_any","","",76,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",76,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",76,[[],["any",8]]],[11,"as_any_mut","","",76,[[],["any",8]]],[11,"into_any_arc","","",76,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"into_any","","",77,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",77,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",77,[[],["any",8]]],[11,"as_any_mut","","",77,[[],["any",8]]],[11,"into_any_arc","","",77,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"into_any","","",79,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",79,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",79,[[],["any",8]]],[11,"as_any_mut","","",79,[[],["any",8]]],[11,"into_any_arc","","",79,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::policy::space","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"into_any","","",40,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",40,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",40,[[],["any",8]]],[11,"as_any_mut","","",40,[[],["any",8]]],[11,"into_any_arc","","",40,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"into_any","","",42,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",42,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",42,[[],["any",8]]],[11,"as_any_mut","","",42,[[],["any",8]]],[11,"into_any_arc","","",42,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"into_any","","",43,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",43,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",43,[[],["any",8]]],[11,"as_any_mut","","",43,[[],["any",8]]],[11,"into_any_arc","","",43,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::policy::immortalspace","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"into_any","","",44,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",44,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",44,[[],["any",8]]],[11,"as_any_mut","","",44,[[],["any",8]]],[11,"into_any_arc","","",44,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::policy::copyspace","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"into_any","","",45,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",45,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",45,[[],["any",8]]],[11,"as_any_mut","","",45,[[],["any",8]]],[11,"into_any_arc","","",45,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::policy::largeobjectspace","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"into_any","","",46,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",46,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",46,[[],["any",8]]],[11,"as_any_mut","","",46,[[],["any",8]]],[11,"into_any_arc","","",46,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::scheduler","",64,[[]]],[11,"into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"into_any","","",64,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",64,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",64,[[],["any",8]]],[11,"as_any_mut","","",64,[[],["any",8]]],[11,"into_any_arc","","",64,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"into_any","","",65,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",65,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",65,[[],["any",8]]],[11,"as_any_mut","","",65,[[],["any",8]]],[11,"into_any_arc","","",65,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::scheduler::stat","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"into_any","","",47,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",47,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",47,[[],["any",8]]],[11,"as_any_mut","","",47,[[],["any",8]]],[11,"into_any_arc","","",47,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"into_any","","",48,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",48,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",48,[[],["any",8]]],[11,"as_any_mut","","",48,[[],["any",8]]],[11,"into_any_arc","","",48,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"into_any","","",49,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",49,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",49,[[],["any",8]]],[11,"as_any_mut","","",49,[[],["any",8]]],[11,"into_any_arc","","",49,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::scheduler","",68,[[]]],[11,"into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"into_any","","",68,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",68,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",68,[[],["any",8]]],[11,"as_any_mut","","",68,[[],["any",8]]],[11,"into_any_arc","","",68,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"into_any","","",69,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",69,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",69,[[],["any",8]]],[11,"as_any_mut","","",69,[[],["any",8]]],[11,"into_any_arc","","",69,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","mmtk::scheduler::gc_works","",90,[[]]],[11,"into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"into_any","","",90,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",90,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",90,[[],["any",8]]],[11,"as_any_mut","","",90,[[],["any",8]]],[11,"into_any_arc","","",90,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"into_any","","",50,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",50,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",50,[[],["any",8]]],[11,"as_any_mut","","",50,[[],["any",8]]],[11,"into_any_arc","","",50,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"into_any","","",51,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",51,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",51,[[],["any",8]]],[11,"as_any_mut","","",51,[[],["any",8]]],[11,"into_any_arc","","",51,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"into_any","","",91,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",91,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",91,[[],["any",8]]],[11,"as_any_mut","","",91,[[],["any",8]]],[11,"into_any_arc","","",91,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"into_any","","",52,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",52,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",52,[[],["any",8]]],[11,"as_any_mut","","",52,[[],["any",8]]],[11,"into_any_arc","","",52,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"into_any","","",53,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",53,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",53,[[],["any",8]]],[11,"as_any_mut","","",53,[[],["any",8]]],[11,"into_any_arc","","",53,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"into_any","","",92,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",92,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",92,[[],["any",8]]],[11,"as_any_mut","","",92,[[],["any",8]]],[11,"into_any_arc","","",92,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"into_any","","",54,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",54,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",54,[[],["any",8]]],[11,"as_any_mut","","",54,[[],["any",8]]],[11,"into_any_arc","","",54,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"into_any","","",93,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",93,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",93,[[],["any",8]]],[11,"as_any_mut","","",93,[[],["any",8]]],[11,"into_any_arc","","",93,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"into_any","","",55,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",55,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",55,[[],["any",8]]],[11,"as_any_mut","","",55,[[],["any",8]]],[11,"into_any_arc","","",55,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"into_any","","",56,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",56,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",56,[[],["any",8]]],[11,"as_any_mut","","",56,[[],["any",8]]],[11,"into_any_arc","","",56,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"into_any","","",57,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",57,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",57,[[],["any",8]]],[11,"as_any_mut","","",57,[[],["any",8]]],[11,"into_any_arc","","",57,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"into_any","","",58,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",58,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",58,[[],["any",8]]],[11,"as_any_mut","","",58,[[],["any",8]]],[11,"into_any_arc","","",58,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"into_any","","",60,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",60,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",60,[[],["any",8]]],[11,"as_any_mut","","",60,[[],["any",8]]],[11,"into_any_arc","","",60,[[["arc",3]],[["any",8],["arc",3]]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"into_any","","",61,[[["global",3],["box",3]],[["box",3],["any",8],["global",3]]]],[11,"into_any_rc","","",61,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",61,[[],["any",8]]],[11,"as_any_mut","","",61,[[],["any",8]]],[11,"into_any_arc","","",61,[[["arc",3]],[["any",8],["arc",3]]]],[11,"get_space","mmtk::util::alloc","",7,[[],[["option",4],["space",8]]]],[11,"get_plan","","",7,[[],["selectedplan",6]]],[11,"alloc","","",7,[[],["address",3]]],[11,"alloc_slow_once","","",7,[[],["address",3]]],[11,"get_tls","","",7,[[],["opaquepointer",3]]],[11,"get_tls","mmtk::util::alloc::large_object_allocator","",5,[[],["opaquepointer",3]]],[11,"get_plan","","",5,[[],["selectedplan",6]]],[11,"get_space","","",5,[[],[["option",4],["space",8]]]],[11,"alloc","","",5,[[],["address",3]]],[11,"alloc_slow","","",5,[[],["address",3]]],[11,"alloc_slow_once","","",5,[[],["address",3]]],[11,"scan","mmtk::util::alloc::dump_linear_scan","",84,[[["objectreference",3]]]],[11,"head","mmtk::util::int_array_freelist","",24,[[]]],[11,"heads","","",24,[[]]],[11,"get_entry","","",24,[[]]],[11,"set_entry","","",24,[[]]],[11,"head","mmtk::util::raw_memory_freelist","",29,[[]]],[11,"heads","","",29,[[]]],[11,"get_entry","","",29,[[]]],[11,"set_entry","","",29,[[]]],[11,"alloc","","",29,[[]]],[11,"eagerly_mmap_all_spaces","mmtk::util::heap::layout","",86,[[]]],[11,"mark_as_mapped","","",86,[[["address",3]]]],[11,"ensure_mapped","","",86,[[["address",3]]]],[11,"is_mapped_address","","Return {@code true} if the given address has been mmapped",86,[[["address",3]]]],[11,"protect","","",86,[[["address",3]]]],[11,"new","mmtk::util::heap::layout::map64","",87,[[]]],[11,"insert","","",87,[[["spacedescriptor",3],["address",3]]]],[11,"create_freelist","","",87,[[["commonfreelistpageresource",3]],["box",3]]],[11,"create_parent_freelist","","",87,[[["commonfreelistpageresource",3]],["box",3]]],[11,"allocate_contiguous_chunks","","",87,[[["address",3],["spacedescriptor",3]],["address",3]]],[11,"get_next_contiguous_region","","",87,[[["address",3]],["address",3]]],[11,"get_contiguous_region_chunks","","",87,[[["address",3]]]],[11,"get_contiguous_region_size","","",87,[[["address",3]]]],[11,"free_all_chunks","","",87,[[["address",3]]]],[11,"free_contiguous_chunks","","",87,[[["address",3]]]],[11,"boot","","",87,[[]]],[11,"finalize_static_space_map","","",87,[[["address",3]]]],[11,"is_finalized","","",87,[[]]],[11,"get_discontig_freelist_pr_ordinal","","",87,[[["commonfreelistpageresource",3]]]],[11,"get_descriptor_for_address","","",87,[[["address",3]],["spacedescriptor",3]]],[11,"add_to_cumulative_committed_pages","","",87,[[]]],[11,"get_cumulative_committed_pages","","",87,[[]]],[11,"common","mmtk::util::heap::freelistpageresource","",12,[[],["commonpageresource",3]]],[11,"common_mut","","",12,[[],["commonpageresource",3]]],[11,"alloc_pages","","",12,[[["opaquepointer",3]],["address",3]]],[11,"adjust_for_metadata","","",12,[[]]],[11,"common","mmtk::util::heap::monotonepageresource","",15,[[],["commonpageresource",3]]],[11,"common_mut","","",15,[[],["commonpageresource",3]]],[11,"reserve_pages","","",15,[[]]],[11,"alloc_pages","","",15,[[["opaquepointer",3]],["address",3]]],[11,"adjust_for_metadata","","",15,[[]]],[11,"start","mmtk::util::statistics::counter","",35,[[]]],[11,"stop","","",35,[[]]],[11,"phase_change","","",35,[[]]],[11,"print_count","","",35,[[]]],[11,"print_total","","",35,[[["option",4]]]],[11,"print_min","","",35,[[]]],[11,"print_max","","",35,[[]]],[11,"print_last","","",35,[[]]],[11,"merge_phases","","",35,[[]]],[11,"implicitly_start","","",35,[[]]],[11,"name","","",35,[[],["string",3]]],[11,"current_value","","",88,[[],["instant",3]]],[11,"diff","","",88,[[["instant",3]]]],[11,"print_diff","","",88,[[]]],[11,"prepare","mmtk","",79,[[["opaquepointer",3]]]],[11,"release","","",79,[[["opaquepointer",3]]]],[11,"alloc","","",79,[[["allocationtype",4]],["address",3]]],[11,"post_alloc","","",79,[[["allocationtype",4],["objectreference",3]]]],[11,"get_tls","","",79,[[],["opaquepointer",3]]],[11,"barrier","","",79,[[],["barrier",8]]],[11,"name","mmtk::policy::immortalspace","",44,[[]]],[11,"is_live","","",44,[[["objectreference",3]]]],[11,"is_movable","","",44,[[]]],[11,"initialize_header","","",44,[[["objectreference",3]]]],[11,"name","mmtk::policy::copyspace","",45,[[]]],[11,"is_live","","",45,[[["objectreference",3]]]],[11,"is_movable","","",45,[[]]],[11,"initialize_header","","",45,[[["objectreference",3]]]],[11,"name","mmtk::policy::largeobjectspace","",46,[[]]],[11,"is_live","","",46,[[["objectreference",3]]]],[11,"is_movable","","",46,[[]]],[11,"initialize_header","","",46,[[["objectreference",3]]]],[11,"as_space","mmtk::policy::immortalspace","",44,[[],["space",8]]],[11,"as_sft","","",44,[[],["sft",8]]],[11,"get_page_resource","","",44,[[],["pageresource",8]]],[11,"common","","",44,[[],["commonspace",3]]],[11,"unsafe_common_mut","","",44,[[],["commonspace",3]]],[11,"init","","",44,[[["vmmap",6]]]],[11,"release_multiple_pages","","",44,[[["address",3]]]],[11,"as_space","mmtk::policy::copyspace","",45,[[],["space",8]]],[11,"as_sft","","",45,[[],["sft",8]]],[11,"get_page_resource","","",45,[[],["pageresource",8]]],[11,"common","","",45,[[],["commonspace",3]]],[11,"unsafe_common_mut","","",45,[[],["commonspace",3]]],[11,"init","","",45,[[["vmmap",6]]]],[11,"release_multiple_pages","","",45,[[["address",3]]]],[11,"as_space","mmtk::policy::largeobjectspace","",46,[[],["space",8]]],[11,"as_sft","","",46,[[],["sft",8]]],[11,"get_page_resource","","",46,[[],["pageresource",8]]],[11,"init","","",46,[[["vmmap",6]]]],[11,"common","","",46,[[],["commonspace",3]]],[11,"unsafe_common_mut","","",46,[[],["commonspace",3]]],[11,"release_multiple_pages","","",46,[[["address",3]]]],[11,"spawn_worker","mmtk","",76,[[["gcworker",6],["opaquepointer",3]]]],[11,"do_work","mmtk::scheduler::gc_works","",90,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",50,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",51,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",91,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",52,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",53,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",92,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",54,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",93,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",55,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",56,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",57,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",60,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",61,[[["gcworker",6],["mmtk",3]]]],[11,"clone","mmtk::util::address","",0,[[],["address",3]]],[11,"clone","","",1,[[],["objectreference",3]]],[11,"clone","mmtk::util::alloc::allocators","",4,[[],["allocatorselector",4]]],[11,"clone","mmtk::util::heap::space_descriptor","",18,[[],["spacedescriptor",3]]],[11,"clone","mmtk::util::heap","",20,[[],["vmrequest",4]]],[11,"clone","mmtk::util::opaque_pointer","",25,[[],["opaquepointer",3]]],[11,"clone","mmtk::util::options","",26,[[],["nurseryzeroingoptions",4]]],[11,"clone","mmtk","",77,[[],["allocationsemantics",4]]],[11,"default","mmtk::util::heap::layout","",86,[[]]],[11,"default","mmtk::util::heap::layout::map64","",87,[[]]],[11,"default","mmtk::util::opaque_pointer","",25,[[]]],[11,"default","mmtk::util::options","",28,[[]]],[11,"default","mmtk::util::reference_processor","",30,[[]]],[11,"default","mmtk::util::statistics::stats","",37,[[]]],[11,"default","mmtk::util::treadmill","",38,[[]]],[11,"default","mmtk","",76,[[]]],[11,"default","mmtk::policy::space","",40,[[],["sftmap",3]]],[11,"default","mmtk::scheduler::stat","",47,[[],["schedulerstat",3]]],[11,"default","","",49,[[],["workerlocalstat",3]]],[11,"default","mmtk::scheduler::gc_works","",91,[[],["preparecollector",3]]],[11,"default","","",92,[[],["releasecollector",3]]],[11,"default","","",54,[[],["stopmutators",3]]],[11,"default","","",93,[[],["endofgc",3]]],[11,"default","","",55,[[],["scanstackroots",3]]],[11,"default","","",57,[[],["scanvmspecificroots",3]]],[11,"default","","",58,[[]]],[11,"default","","",61,[[],["processmodbuf",3]]],[11,"eq","mmtk::util::address","",0,[[["address",3]]]],[11,"ne","","",0,[[["address",3]]]],[11,"eq","","",1,[[["objectreference",3]]]],[11,"ne","","",1,[[["objectreference",3]]]],[11,"eq","mmtk::util::heap::space_descriptor","",18,[[["spacedescriptor",3]]]],[11,"ne","","",18,[[["spacedescriptor",3]]]],[11,"eq","mmtk::util::opaque_pointer","",25,[[["opaquepointer",3]]]],[11,"ne","","",25,[[["opaquepointer",3]]]],[11,"eq","mmtk::util::reference_processor","",31,[[["semantics",4]]]],[11,"partial_cmp","mmtk::util::address","",0,[[["address",3]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["address",3]]]],[11,"le","","",0,[[["address",3]]]],[11,"gt","","",0,[[["address",3]]]],[11,"ge","","",0,[[["address",3]]]],[11,"partial_cmp","","",1,[[["objectreference",3]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["objectreference",3]]]],[11,"le","","",1,[[["objectreference",3]]]],[11,"gt","","",1,[[["objectreference",3]]]],[11,"ge","","",1,[[["objectreference",3]]]],[11,"deref","mmtk::util::heap::freelistpageresource","",12,[[],["commonfreelistpageresource",3]]],[11,"deref","mmtk::util::options","",27,[[],["options",3]]],[11,"deref_mut","mmtk::util::heap::freelistpageresource","",12,[[],["commonfreelistpageresource",3]]],[11,"fmt","mmtk::util::address","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap::layout","",86,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap::space_descriptor","",18,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap","",20,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::int_array_freelist","",24,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::opaque_pointer","",25,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::raw_memory_freelist","",29,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::reference_processor","",31,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::statistics::counter","",35,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::treadmill","",38,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk","",77,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::address","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"sub","","",0,[[["bytesize",6]],["address",3]]],[11,"sub","","",0,[[["address",3]],["bytesize",6]]],[11,"add","","",0,[[["bytesize",6]],["address",3]]],[11,"add","","",0,[[["byteoffset",6]],["address",3]]],[11,"add_assign","","",0,[[["bytesize",6]]]],[11,"add_assign","","",0,[[["byteoffset",6]]]],[11,"sub_assign","","",0,[[["bytesize",6]]]],[11,"bitand","","",0,[[]]],[11,"bitand","","",0,[[]]],[11,"bitor","","",0,[[]]],[11,"bitor","","",0,[[]]],[11,"shr","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"from_str","mmtk::util::options","",26,[[],["result",4]]],[11,"fmt","mmtk::util::address","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"slice","mmtk","",77,[[]]],[11,"slice_mut","","",77,[[]]],[11,"from_usize","","",77,[[]]],[11,"to_usize","","",77,[[]]],[11,"from_function","","",77,[[["fnmut",8]]]],[11,"set_limit","mmtk::util::alloc","",7,[[["address",3]]]],[11,"reset","","",7,[[]]],[11,"rebind","","",7,[[["option",4],["space",8]]]],[11,"new","","",7,[[["option",4],["selectedplan",6],["space",8],["opaquepointer",3]]]],[11,"new","mmtk::util::heap::layout","",86,[[]]],[11,"new","mmtk::util::heap","",19,[[["address",3]]]],[11,"reserve","","",19,[[],["address",3]]],[11,"get_discontig_start","","",19,[[],["address",3]]],[11,"get_discontig_end","","",19,[[],["address",3]]],[11,"get_total_pages","","",19,[[]]],[11,"is_discontiguous","","",20,[[]]],[11,"common64bit","","",20,[[]]],[11,"discontiguous","","",20,[[]]],[11,"fixed_size","","",20,[[]]],[11,"fraction","","",20,[[]]],[11,"high_fixed_size","","",20,[[]]],[11,"fixed_extent","","",20,[[]]],[11,"new","mmtk::util","",89,[[]]],[11,"reset","","",89,[[]]],[11,"increment","","",89,[[]]],[11,"peek","","",89,[[]]],[11,"new","mmtk","",76,[[]]],[11,"harness_begin","","",76,[[["opaquepointer",3]]]],[11,"harness_end","","",76,[[]]],[18,"MAX_NON_LOS_COPY_BYTES","","",78,null],[11,"post_copy","","",78,[[["address",3],["allocationsemantics",4],["objectreference",3]]]],[11,"copy_check_allocator","","",78,[[["allocationsemantics",4],["objectreference",3]],["allocationsemantics",4]]],[11,"common","","",81,[[],["commonplan",3]]],[11,"mmapper","","",81,[[],["mmapper",6]]],[11,"options","","",81,[[],["options",3]]],[11,"in_nursery","","",81,[[]]],[11,"is_initialized","","",81,[[]]],[11,"poll","","",81,[[["space",8]]]],[11,"log_poll","","",81,[[["space",8]]]],[11,"collection_required","","This method controls the triggering of a GC. It is called …",81,[[["space",8]]]],[11,"get_pages_reserved","","",81,[[]]],[11,"get_total_pages","","",81,[[]]],[11,"get_pages_avail","","",81,[[]]],[11,"get_collection_reserve","","",81,[[]]],[11,"is_emergency_collection","","",81,[[]]],[11,"get_free_pages","","",81,[[]]],[11,"stress_test_gc_required","","",81,[[]]],[11,"handle_user_collection_request","","",81,[[["opaquepointer",3]]]],[11,"reset_collection_trigger","","",81,[[]]],[11,"modify_check","","",81,[[["objectreference",3]]]],[11,"flush_remembered_sets","","",80,[[]]],[11,"flush","","",80,[[]]],[11,"record_modified_node","","",80,[[["objectreference",3]]]],[11,"record_modified_edge","","",80,[[["address",3]]]],[11,"overwrite_reference_during_trace","","",82,[[]]],[11,"get_forwarded_reference","","",82,[[["objectreference",3]],["objectreference",3]]],[11,"get_forwarded_referent","","",82,[[["objectreference",3]],["objectreference",3]]],[11,"retain_referent","","",82,[[["objectreference",3]],["objectreference",3]]],[11,"spawn_worker","mmtk::scheduler","",62,[[["worker",3],["opaquepointer",3]]]],[11,"init","","",63,[[["opaquepointer",3]]]],[11,"new","","",65,[[],["arc",3]]],[11,"num_workers","","",65,[[]]],[11,"initialize","","",65,[[["arc",3],["opaquepointer",3]]]],[11,"initialize_worker","","",65,[[["opaquepointer",3],["arc",3]]]],[11,"set_initializer","","",65,[[["coordinatorwork",8],["option",4]]]],[11,"set_finalizer","","",65,[[["coordinatorwork",8],["option",4]]]],[11,"worker_group","","",65,[[],[["workergroup",3],["arc",3]]]],[11,"wait_for_completion","","Drain the message queue and execute coordinator works",65,[[]]],[11,"deactivate_all","","",65,[[]]],[11,"reset_state","","",65,[[]]],[11,"add_coordinator_work","","",65,[[["worker",3]]]],[11,"poll","","Get a scheduable work. Called by workers",65,[[["worker",3]],[["box",3],["work",8]]]],[11,"enable_stat","","",65,[[]]],[11,"statistics","","",65,[[],[["hashmap",3],["string",3]]]],[11,"notify_mutators_paused","","",65,[[["mmtk",3]]]],[11,"notify_mutators_paused","","",94,[[["mmtk",3]]]],[11,"do_work_with_stat","","",66,[[["worker",3]]]],[11,"new","","",68,[[["scheduler",3],["weak",3]]]],[11,"is_parked","","",68,[[]]],[11,"is_coordinator","","",68,[[]]],[11,"scheduler","","",68,[[],["scheduler",3]]],[11,"local","","",68,[[]]],[11,"init","","",68,[[["opaquepointer",3]]]],[11,"do_work","","",68,[[]]],[11,"run","","",68,[[]]],[11,"new","","",69,[[["scheduler",3],["weak",3]],["arc",3]]],[11,"worker_count","","",69,[[]]],[11,"parked_workers","","",69,[[]]],[11,"all_parked","","",69,[[]]],[11,"spawn_workers","","",69,[[["opaquepointer",3]]]],[11,"mutators","mmtk::vm","A utility method to provide a thread-safe mutator …",70,[[],["synchronizedmutatoriterator",3]]],[11,"out_of_memory","","Inform the VM for an out-of-memory error. The VM can …",71,[[["opaquepointer",3]]]],[18,"HAS_GC_BYTE","","Whether an exclusive GC byte in each object\'s header word …",72,null],[18,"GC_BYTE_OFFSET","","The offset of the GC byte from the object reference, in …",72,null],[11,"clear_referent","","Weak and soft references always clear the referent before …",73,[[["objectreference",3]]]],[18,"SCAN_MUTATORS_IN_SAFEPOINT","","Scan stack roots after all mutators are paused.",74,null],[18,"SINGLE_THREAD_MUTATOR_SCANNING","","Scan all the mutators within a single work packet.",74,null]],"p":[[3,"Address"],[3,"ObjectReference"],[8,"Allocator"],[3,"Allocators"],[4,"AllocatorSelector"],[3,"LargeObjectAllocator"],[8,"LinearScan"],[3,"BumpAllocator"],[8,"GenericFreeList"],[8,"Mmapper"],[8,"Map"],[3,"CommonFreeListPageResource"],[3,"FreeListPageResource"],[4,"MonotonePageResourceConditional"],[13,"Contiguous"],[3,"MonotonePageResource"],[8,"PageResource"],[3,"CommonPageResource"],[3,"SpaceDescriptor"],[3,"HeapMeta"],[4,"VMRequest"],[13,"RequestFixed"],[13,"RequestExtent"],[13,"RequestFraction"],[3,"IntArrayFreeList"],[3,"OpaquePointer"],[4,"NurseryZeroingOptions"],[3,"UnsafeOptionsWrapper"],[3,"Options"],[3,"RawMemoryFreeList"],[3,"ReferenceProcessors"],[4,"Semantics"],[3,"ReferenceProcessor"],[8,"Counter"],[8,"Diffable"],[3,"LongCounter"],[3,"SharedStats"],[3,"Stats"],[3,"TreadMill"],[8,"SFT"],[3,"SFTMap"],[8,"Space"],[3,"CommonSpace"],[3,"SpaceOptions"],[3,"ImmortalSpace"],[3,"CopySpace"],[3,"LargeObjectSpace"],[3,"SchedulerStat"],[3,"WorkStat"],[3,"WorkerLocalStat"],[3,"Prepare"],[3,"PrepareMutator"],[3,"Release"],[3,"ReleaseMutator"],[3,"StopMutators"],[3,"ScanStackRoots"],[3,"ScanStackRoot"],[3,"ScanVMSpecificRoots"],[3,"ProcessEdgesBase"],[8,"ProcessEdgesWork"],[3,"ScanObjects"],[3,"ProcessModBuf"],[8,"Context"],[8,"WorkerLocal"],[4,"CoordinatorMessage"],[3,"Scheduler"],[8,"Work"],[8,"GCWork"],[3,"Worker"],[3,"WorkerGroup"],[8,"ActivePlan"],[8,"Collection"],[8,"ObjectModel"],[8,"ReferenceGlue"],[8,"Scanning"],[8,"VMBinding"],[3,"MMTK"],[4,"AllocationSemantics"],[8,"CopyContext"],[3,"Mutator"],[8,"MutatorContext"],[8,"Plan"],[8,"TraceLocal"],[8,"TransitiveClosure"],[3,"DumpLinearScan"],[3,"GCByte"],[3,"FragmentedMapper"],[3,"Map64"],[3,"MonotoneNanoTime"],[3,"SynchronizedCounter"],[3,"ScheduleCollection"],[3,"PrepareCollector"],[3,"ReleaseCollector"],[3,"EndOfGC"],[6,"MMTkScheduler"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);