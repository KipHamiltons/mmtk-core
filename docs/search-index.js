var searchIndex = JSON.parse('{\
"mmtk":{"doc":"Memory Management ToolKit (MMTk) is a portable and high…","i":[[3,"MMTK","mmtk","An MMTk instance. MMTk allows mutiple instances to run…",null,null],[12,"plan","","",0,null],[12,"vm_map","","",0,null],[12,"mmapper","","",0,null],[12,"sftmap","","",0,null],[12,"reference_processors","","",0,null],[12,"options","","",0,null],[12,"scheduler","","",0,null],[3,"Mutator","","A mutator is a per-thread data structure that manages…",null,null],[12,"allocators","","",1,null],[12,"barrier","","",1,null],[12,"mutator_tls","","",1,null],[12,"plan","","",1,null],[12,"config","","",1,null],[4,"AllocationSemantics","","Allocation semantics that MMTk provides. Each allocation…",null,null],[13,"Default","","",2,null],[13,"Immortal","","",2,null],[13,"Los","","",2,null],[13,"Code","","",2,null],[13,"ReadOnly","","",2,null],[0,"util","","Utilities used by other modules, including allocators,…",null,null],[3,"SynchronizedCounter","mmtk::util","",null,null],[0,"macros","","",null,null],[0,"conversions","","",null,null],[5,"is_address_aligned","mmtk::util::conversions","",null,[[["address",3]]]],[5,"page_align_down","","",null,[[["address",3]],["address",3]]],[5,"is_page_aligned","","",null,[[["address",3]]]],[5,"chunk_align_up","","",null,[[["address",3]],["address",3]]],[5,"chunk_align_down","","",null,[[["address",3]],["address",3]]],[5,"mmap_chunk_align_up","","",null,[[["address",3]],["address",3]]],[5,"mmap_chunk_align_down","","",null,[[["address",3]],["address",3]]],[5,"bytes_to_chunks_up","","",null,[[]]],[5,"address_to_chunk_index","","",null,[[["address",3]]]],[5,"chunk_index_to_address","","",null,[[],["address",3]]],[5,"raw_align_up","","",null,[[]]],[5,"raw_align_down","","",null,[[]]],[5,"raw_is_aligned","","",null,[[]]],[5,"pages_to_bytes","","",null,[[]]],[5,"bytes_to_pages_up","","",null,[[]]],[5,"bytes_to_pages","","",null,[[]]],[0,"address","mmtk::util","",null,null],[3,"Address","mmtk::util::address","Address represents an arbitrary address. This is designed…",null,null],[3,"ObjectReference","","ObjectReference represents address for an object. Compared…",null,null],[6,"ByteSize","","size in bytes",null,null],[6,"ByteOffset","","offset in byte",null,null],[18,"ZERO","","",3,null],[18,"MAX","","",3,null],[11,"from_ptr","","creates Address from a pointer",3,[[],["address",3]]],[11,"from_ref","","",3,[[],["address",3]]],[11,"from_mut_ptr","","creates Address from a mutable pointer",3,[[],["address",3]]],[11,"zero","","creates a null Address (0) # Safety It is unsafe and the…",3,[[],["address",3]]],[11,"max","","creates an Address of (usize::MAX) # Safety It is unsafe…",3,[[],["address",3]]],[11,"from_usize","","creates an arbitrary Address # Safety It is unsafe and the…",3,[[],["address",3]]],[11,"shift","","shifts the address by N T-typed objects (returns addr + N…",3,[[]]],[11,"get_extent","","",3,[[["address",3]],["bytesize",6]]],[11,"get_offset","","",3,[[["address",3]],["byteoffset",6]]],[11,"add","","",3,[[],["address",3]]],[11,"load","","loads a value of type T from the address # Safety This…",3,[[],["copy",8]]],[11,"store","","stores a value of type T to the address # Safety This…",3,[[]]],[11,"atomic_load","","atomic operation: load # Safety This could throw a segment…",3,[[["ordering",4]]]],[11,"atomic_store","","atomic operation: store # Safety This could throw a…",3,[[["ordering",4]]]],[11,"compare_exchange","","atomic operation: compare and exchange usize # Safety This…",3,[[["ordering",4]],["result",4]]],[11,"is_zero","","is this address zero?",3,[[]]],[11,"align_up","","aligns up the address to the given alignment",3,[[["bytesize",6]],["address",3]]],[11,"align_down","","aligns down the address to the given alignment",3,[[["bytesize",6]],["address",3]]],[11,"is_aligned_to","","is this address aligned to the given alignment",3,[[]]],[11,"to_object_reference","","converts the Address into an ObjectReference # Safety We…",3,[[],["objectreference",3]]],[11,"to_ptr","","converts the Address to a pointer",3,[[]]],[11,"to_mut_ptr","","converts the Address to a mutable pointer",3,[[]]],[11,"as_usize","","converts the Address to a pointer-sized integer",3,[[]]],[11,"chunk_index","","returns the chunk index for this address",3,[[]]],[11,"is_mapped","","return true if the referenced memory is mapped",3,[[]]],[11,"to_address","","converts the ObjectReference to an Address",4,[[],["address",3]]],[11,"is_null","","is this object reference null reference?",4,[[]]],[11,"value","","returns the ObjectReference",4,[[]]],[11,"is_live","","",4,[[]]],[11,"is_movable","","",4,[[]]],[11,"is_mapped","","",4,[[]]],[0,"alloc","mmtk::util","",null,null],[3,"BumpAllocator","mmtk::util::alloc","",null,null],[12,"tls","","",5,null],[0,"allocator","","",null,null],[5,"align_allocation_no_fill","mmtk::util::alloc::allocator","",null,[[["address",3]],["address",3]]],[5,"align_allocation","","",null,[[["address",3]],["address",3]]],[5,"fill_alignment_gap","","",null,[[["address",3]]]],[5,"get_maximum_aligned_size","","",null,[[]]],[8,"Allocator","","",null,null],[10,"get_tls","","",6,[[],["opaquepointer",3]]],[10,"get_space","","",6,[[],[["option",4],["space",8]]]],[10,"get_plan","","",6,[[],["selectedplan",6]]],[10,"alloc","","",6,[[],["address",3]]],[11,"alloc_slow","","",6,[[],["address",3]]],[11,"alloc_slow_inline","","",6,[[],["address",3]]],[10,"alloc_slow_once","","",6,[[],["address",3]]],[11,"is","","Returns true if the trait object wraps an object of type…",6,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the…",6,[[["box",3]],[["box",3],["box",3],["result",4]]]],[11,"downcast_rc","","Returns an `Rc`-ed object from an `Rc`-ed trait object if…",6,[[["rc",3]],[["result",4],["rc",3],["rc",3]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object…",6,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the trait…",6,[[],["option",4]]],[0,"allocators","mmtk::util::alloc","",null,null],[3,"Allocators","mmtk::util::alloc::allocators","",null,null],[12,"bump_pointer","","",7,null],[12,"large_object","","",7,null],[4,"AllocatorSelector","","",null,null],[13,"BumpPointer","","",8,null],[13,"LargeObject","","",8,null],[11,"get_allocator","","Safety The selector needs to be valid, and points to an…",7,[[["allocatorselector",4]],["allocator",8]]],[11,"get_allocator_mut","","Safety The selector needs to be valid, and points to an…",7,[[["allocatorselector",4]],["allocator",8]]],[11,"new","","",7,[[["selectedplan",6],["opaquepointer",3]]]],[11,"set_limit","mmtk::util::alloc","",5,[[["address",3]]]],[11,"rebind","","",5,[[["option",4],["space",8]]]],[11,"new","","",5,[[["space",8],["selectedplan",6],["option",4],["opaquepointer",3]]]],[0,"dump_linear_scan","","",null,null],[3,"DumpLinearScan","mmtk::util::alloc::dump_linear_scan","",null,null],[0,"embedded_meta_data","mmtk::util::alloc","",null,null],[5,"get_metadata_base","mmtk::util::alloc::embedded_meta_data","",null,[[["address",3]],["address",3]]],[5,"get_metadata_offset","","",null,[[["address",3]]]],[17,"LOG_BYTES_IN_REGION","","",null,null],[17,"BYTES_IN_REGION","","",null,null],[17,"REGION_MASK","","",null,null],[17,"LOG_PAGES_IN_REGION","","",null,null],[17,"PAGES_IN_REGION","","",null,null],[0,"large_object_allocator","mmtk::util::alloc","",null,null],[3,"LargeObjectAllocator","mmtk::util::alloc::large_object_allocator","",null,null],[12,"tls","","",9,null],[11,"new","","",9,[[["selectedplan",6],["largeobjectspace",3],["opaquepointer",3],["option",4]]]],[0,"linear_scan","mmtk::util::alloc","",null,null],[8,"LinearScan","mmtk::util::alloc::linear_scan","",null,null],[10,"scan","","",10,[[["objectreference",3]]]],[0,"constants","mmtk::util","",null,null],[17,"INSTANCE_FIELD","mmtk::util::constants","Modes.",null,null],[17,"ARRAY_ELEMENT","","",null,null],[17,"LOG_BYTES_IN_BYTE","","",null,null],[17,"BYTES_IN_BYTE","","",null,null],[17,"LOG_BITS_IN_BYTE","","",null,null],[17,"BITS_IN_BYTE","","",null,null],[17,"LOG_BYTES_IN_MBYTE","","",null,null],[17,"BYTES_IN_MBYTE","","",null,null],[17,"LOG_BYTES_IN_KBYTE","","",null,null],[17,"BYTES_IN_KBYTE","","",null,null],[17,"SUPPORT_CARD_SCANNING","","",null,null],[17,"LOG_CARD_META_SIZE","","",null,null],[17,"LOG_CARD_UNITS","","",null,null],[17,"LOG_CARD_GRAIN","","",null,null],[17,"LOG_CARD_BYTES","","",null,null],[17,"LOG_CARD_META_BYTES","","",null,null],[17,"LOG_CARD_META_PAGES","","",null,null],[17,"CARD_META_PAGES_PER_REGION","","",null,null],[17,"CARD_MASK","","",null,null],[17,"LAZY_SWEEP","","Lazy sweeping - controlled from here because…",null,null],[17,"LOG_BYTES_IN_CHAR","","",null,null],[17,"BYTES_IN_CHAR","","",null,null],[17,"LOG_BITS_IN_CHAR","","",null,null],[17,"BITS_IN_CHAR","","",null,null],[17,"LOG_BYTES_IN_SHORT","","",null,null],[17,"BYTES_IN_SHORT","","",null,null],[17,"LOG_BITS_IN_SHORT","","",null,null],[17,"BITS_IN_SHORT","","",null,null],[17,"LOG_BYTES_IN_INT","","",null,null],[17,"BYTES_IN_INT","","",null,null],[17,"LOG_BITS_IN_INT","","",null,null],[17,"BITS_IN_INT","","",null,null],[17,"LOG_BYTES_IN_LONG","","",null,null],[17,"BYTES_IN_LONG","","",null,null],[17,"LOG_BITS_IN_LONG","","",null,null],[17,"BITS_IN_LONG","","",null,null],[17,"MAX_INT","","",null,null],[17,"MIN_INT","","",null,null],[17,"LOG_BYTES_IN_ADDRESS","","",null,null],[17,"BYTES_IN_ADDRESS","","",null,null],[17,"LOG_BITS_IN_ADDRESS","","",null,null],[17,"BITS_IN_ADDRESS","","",null,null],[17,"LOG_BYTES_IN_WORD","","",null,null],[17,"BYTES_IN_WORD","","",null,null],[17,"LOG_BITS_IN_WORD","","",null,null],[17,"BITS_IN_WORD","","",null,null],[17,"LOG_BYTES_IN_PAGE","","",null,null],[17,"BYTES_IN_PAGE","","",null,null],[17,"LOG_BITS_IN_PAGE","","",null,null],[17,"BITS_IN_PAGE","","",null,null],[17,"LOG_BYTES_IN_ADDRESS_SPACE","","",null,null],[0,"forwarding_word","mmtk::util","",null,null],[5,"attempt_to_forward","mmtk::util::forwarding_word","",null,[[["objectreference",3]]]],[5,"spin_and_get_forwarded_object","","",null,[[["objectreference",3]],["objectreference",3]]],[5,"forward_object","","",null,[[["allocationsemantics",4],["objectreference",3]],["objectreference",3]]],[5,"set_forwarding_pointer","","",null,[[["objectreference",3]]]],[5,"is_forwarded","","",null,[[["objectreference",3]]]],[5,"is_forwarded_or_being_forwarded","","",null,[[["objectreference",3]]]],[5,"state_is_forwarded_or_being_forwarded","","",null,[[]]],[5,"state_is_being_forwarded","","",null,[[]]],[5,"clear_forwarding_bits","","",null,[[["objectreference",3]]]],[5,"read_forwarding_word","","",null,[[["objectreference",3]]]],[5,"write_forwarding_word","","",null,[[["objectreference",3]]]],[5,"compare_exchange_forwarding_word","","",null,[[["objectreference",3]]]],[0,"gc_byte","mmtk::util","",null,null],[3,"GCByte","mmtk::util::gc_byte","This struct encapsulates operations on the per-object GC…",null,null],[5,"read_gc_byte","","Atomically reads the current value of an object\'s GC byte.",null,[[["objectreference",3]]]],[5,"write_gc_byte","","Atomically writes a new value to the GC byte of an object",null,[[["objectreference",3]]]],[5,"compare_exchange_gc_byte","","Atomically performs the compare-and-exchange operation on…",null,[[["objectreference",3]]]],[0,"generic_freelist","mmtk::util","",null,null],[17,"FAILURE","mmtk::util::generic_freelist","",null,null],[17,"MAX_HEADS","","",null,null],[17,"MAX_UNITS","","",null,null],[8,"GenericFreeList","","",null,null],[10,"head","","",11,[[]]],[10,"heads","","",11,[[]]],[10,"get_entry","","",11,[[]]],[10,"set_entry","","",11,[[]]],[11,"alloc","","",11,[[]]],[11,"alloc_from_unit","","",11,[[]]],[11,"free","","Free a previously allocated contiguous lump of units",11,[[]]],[11,"size","","",11,[[]]],[11,"initialize_heap","","",11,[[]]],[11,"add_to_free","","",11,[[]]],[11,"get_right","","",11,[[]]],[11,"set_sentinel","","",11,[[]]],[11,"get_size","","",11,[[]]],[11,"set_size","","",11,[[]]],[11,"get_free","","",11,[[]]],[11,"set_free","","",11,[[]]],[11,"get_next","","",11,[[]]],[11,"set_next","","",11,[[]]],[11,"get_prev","","",11,[[]]],[11,"set_prev","","",11,[[]]],[11,"get_left","","",11,[[]]],[11,"is_coalescable","","",11,[[]]],[11,"clear_uncoalescable","","",11,[[]]],[11,"set_uncoalescable","","",11,[[]]],[11,"is_multi","","",11,[[]]],[11,"is_free","","",11,[[]]],[11,"get_lo_entry","","",11,[[]]],[11,"get_hi_entry","","",11,[[]]],[11,"set_lo_entry","","",11,[[]]],[11,"set_hi_entry","","",11,[[]]],[11,"__alloc","","",11,[[]]],[11,"__split","","",11,[[]]],[11,"__coalesce","","",11,[[]]],[11,"__remove_from_free","","",11,[[]]],[0,"header_byte","mmtk::util","",null,null],[5,"mark_as_unlogged","mmtk::util::header_byte","",null,[[["objectreference",3]]]],[5,"mark_as_logged","","",null,[[["objectreference",3]]]],[5,"is_unlogged","","",null,[[["objectreference",3]]]],[17,"TOTAL_BITS","","",null,null],[17,"NEEDS_UNLOGGED_BIT","","",null,null],[17,"UNLOGGED_BIT_NUMBER","","",null,null],[17,"UNLOGGED_BIT","","",null,null],[17,"USED_GLOBAL_BITS","","",null,null],[0,"heap","mmtk::util","",null,null],[3,"HeapMeta","mmtk::util::heap","",null,null],[12,"heap_cursor","","",12,null],[12,"heap_limit","","",12,null],[12,"total_pages","","",12,null],[4,"VMRequest","","",null,null],[13,"RequestDiscontiguous","","",13,null],[13,"RequestFixed","","",13,null],[12,"start","mmtk::util::heap::VMRequest","",14,null],[12,"extent","","",14,null],[12,"top","","",14,null],[13,"RequestExtent","mmtk::util::heap","",13,null],[12,"extent","mmtk::util::heap::VMRequest","",15,null],[12,"top","","",15,null],[13,"RequestFraction","mmtk::util::heap","",13,null],[12,"frac","mmtk::util::heap::VMRequest","",16,null],[12,"top","","",16,null],[0,"layout","mmtk::util::heap","",null,null],[3,"FragmentedMapper","mmtk::util::heap::layout","",null,null],[0,"heap_parameters","","",null,null],[17,"LOG_MAX_SPACES","mmtk::util::heap::layout::heap_parameters","log_2 of the maximum number of spaces a Plan can support.",null,null],[17,"MAX_SPACES","","Maximum number of spaces a Plan can support.",null,null],[17,"LOG_SPACE_SIZE_64","","In a 64-bit addressing model, each space is the same size,…",null,null],[0,"vm_layout_constants","mmtk::util::heap::layout","",null,null],[17,"LOG_ADDRESS_SPACE","mmtk::util::heap::layout::vm_layout_constants","log_2 of the addressable virtual space ",null,null],[17,"LOG_BYTES_IN_CHUNK","","log_2 of the coarsest unit of address space allocation. In…",null,null],[17,"BYTES_IN_CHUNK","","Coarsest unit of address space allocation. ",null,null],[17,"PAGES_IN_CHUNK","","Coarsest unit of address space allocation, in pages ",null,null],[17,"LOG_MAX_CHUNKS","","log_2 of the maximum number of chunks we need to track.…",null,null],[17,"MAX_CHUNKS","","Maximum number of chunks we need to track. Only used in…",null,null],[17,"LOG_SPACE_EXTENT","","An upper bound on the extent of any space in the current…",null,null],[17,"MAX_SPACE_EXTENT","","An upper bound on the extent of any space in the current…",null,null],[17,"HEAP_START","","",null,null],[17,"HEAP_END","","",null,null],[17,"VM_SPACE_SIZE","","",null,null],[17,"AVAILABLE_START","","Lowest virtual address available for MMTk to manage. The…",null,null],[17,"AVAILABLE_END","","Highest virtual address available for MMTk to manage. The…",null,null],[17,"AVAILABLE_BYTES","","Size of the address space available to the MMTk heap. ",null,null],[17,"LOG_MMAP_CHUNK_BYTES","","Granularity at which we map and unmap virtual address…",null,null],[17,"MMAP_CHUNK_BYTES","","",null,null],[17,"LOG_PAGES_IN_SPACE64","","log_2 of the number of pages in a 64-bit space ",null,null],[17,"PAGES_IN_SPACE64","","The number of pages in a 64-bit space ",null,null],[17,"SPACE_SHIFT_64","","Number of bits to shift a space index into/out of a…",null,null],[17,"SPACE_MASK_64","","Bitwise mask to isolate a space index in a virtual address.",null,null],[17,"SPACE_SIZE_64","","",null,null],[0,"mmapper","mmtk::util::heap::layout","",null,null],[8,"Mmapper","mmtk::util::heap::layout::mmapper","",null,null],[10,"eagerly_mmap_all_spaces","","Given an address array describing the regions of virtual…",17,[[]]],[10,"mark_as_mapped","","Mark a number of pages as mapped, without making any…",17,[[["address",3]]]],[10,"ensure_mapped","","Ensure that a range of pages is mmapped (or equivalent).…",17,[[["address",3]]]],[10,"is_mapped_address","","Is the page pointed to by this address mapped ? @param…",17,[[["address",3]]]],[10,"protect","","Mark a number of pages as inaccessible. @param start…",17,[[["address",3]]]],[11,"new","mmtk::util::heap::layout","",18,[[]]],[0,"heap_layout","","",null,null],[6,"VMMap","mmtk::util::heap::layout::heap_layout","",null,null],[6,"Mmapper","","",null,null],[0,"map","mmtk::util::heap::layout","",null,null],[8,"Map","mmtk::util::heap::layout::map","",null,null],[16,"FreeList","","",19,null],[10,"new","","",19,[[]]],[10,"insert","","",19,[[["address",3],["spacedescriptor",3]]]],[10,"create_freelist","","",19,[[["commonfreelistpageresource",3]],["box",3]]],[10,"create_parent_freelist","","",19,[[["commonfreelistpageresource",3]],["box",3]]],[10,"allocate_contiguous_chunks","","",19,[[["address",3],["spacedescriptor",3]],["address",3]]],[10,"get_next_contiguous_region","","",19,[[["address",3]],["address",3]]],[10,"get_contiguous_region_chunks","","",19,[[["address",3]]]],[10,"get_contiguous_region_size","","",19,[[["address",3]]]],[10,"free_all_chunks","","",19,[[["address",3]]]],[10,"free_contiguous_chunks","","",19,[[["address",3]]]],[11,"boot","","",19,[[]]],[10,"finalize_static_space_map","","",19,[[["address",3]]]],[10,"is_finalized","","",19,[[]]],[10,"get_discontig_freelist_pr_ordinal","","",19,[[["commonfreelistpageresource",3]]]],[10,"get_descriptor_for_address","","",19,[[["address",3]],["spacedescriptor",3]]],[11,"get_chunk_index","","",19,[[["address",3]]]],[11,"address_for_chunk_index","","",19,[[],["address",3]]],[10,"add_to_cumulative_committed_pages","","",19,[[]]],[10,"get_cumulative_committed_pages","","",19,[[]]],[0,"map64","mmtk::util::heap::layout","",null,null],[3,"Map64","mmtk::util::heap::layout::map64","",null,null],[0,"freelistpageresource","mmtk::util::heap","",null,null],[3,"CommonFreeListPageResource","mmtk::util::heap::freelistpageresource","",null,null],[3,"FreeListPageResource","","",null,null],[11,"get_start","","",20,[[],["address",3]]],[11,"resize_freelist","","",20,[[["address",3]]]],[11,"new_contiguous","","",21,[[["address",3],["vmmap",6]]]],[11,"new_discontiguous","","",21,[[["vmmap",6]]]],[11,"release_pages","","",21,[[["address",3]]]],[11,"new","mmtk::util::heap","",12,[[["address",3]]]],[11,"reserve","","",12,[[],["address",3]]],[11,"get_discontig_start","","",12,[[],["address",3]]],[11,"get_discontig_end","","",12,[[],["address",3]]],[11,"get_total_pages","","",12,[[]]],[0,"monotonepageresource","","",null,null],[3,"MonotonePageResource","mmtk::util::heap::monotonepageresource","",null,null],[4,"MonotonePageResourceConditional","","",null,null],[13,"Contiguous","","",22,null],[12,"start","mmtk::util::heap::monotonepageresource::MonotonePageResourceConditional","",23,null],[12,"zeroing_cursor","","Current frontier of zeroing, in a separate zeroing thread ",23,null],[12,"zeroing_sentinel","","Current limit of zeroing. If zeroingCursor <…",23,null],[13,"Discontiguous","mmtk::util::heap::monotonepageresource","",22,null],[11,"new_contiguous","","",24,[[["address",3],["vmmap",6]]]],[11,"new_discontiguous","","",24,[[["vmmap",6]]]],[11,"reset","","Safety TODO: I am not sure why this is unsafe.",24,[[]]],[0,"pageresource","mmtk::util::heap","",null,null],[3,"CommonPageResource","mmtk::util::heap::pageresource","",null,null],[12,"contiguous","","",25,null],[12,"growable","","",25,null],[12,"space","","",25,null],[8,"PageResource","","",null,null],[11,"get_new_pages","","Allocate pages from this resource. Simply bump the cursor,…",26,[[["opaquepointer",3]],["address",3]]],[11,"reserve_pages","","",26,[[]]],[11,"clear_request","","",26,[[]]],[11,"update_zeroing_approach","","",26,[[]]],[11,"skip_concurrent_zeroing","","",26,[[]]],[11,"trigger_concurrent_zeroing","","",26,[[]]],[11,"concurrent_zeroing","","",26,[[]]],[10,"alloc_pages","","",26,[[["opaquepointer",3]],["address",3]]],[10,"adjust_for_metadata","","",26,[[]]],[11,"commit_pages","","Commit pages to the page budget. This is called after…",26,[[["opaquepointer",3]]]],[11,"reserved_pages","","",26,[[]]],[11,"committed_pages","","",26,[[]]],[11,"bind_space","","",26,[[["space",8]]]],[10,"common","","",26,[[],["commonpageresource",3]]],[10,"common_mut","","",26,[[],["commonpageresource",3]]],[11,"vm_map","","",26,[[],["vmmap",6]]],[11,"new","","",25,[[],["commonpageresource",3]]],[11,"reserve","","",25,[[]]],[11,"release_reserved","","",25,[[]]],[11,"get_reserved","","",25,[[]]],[11,"reset_reserved","","",25,[[]]],[11,"commit","","",25,[[]]],[11,"release_committed","","",25,[[]]],[11,"get_committed","","",25,[[]]],[11,"reset_committed","","",25,[[]]],[0,"space_descriptor","mmtk::util::heap","",null,null],[3,"SpaceDescriptor","mmtk::util::heap::space_descriptor","",null,null],[18,"UNINITIALIZED","","",27,null],[11,"create_descriptor_from_heap_range","","",27,[[["address",3]],["spacedescriptor",3]]],[11,"create_descriptor","","",27,[[],["spacedescriptor",3]]],[11,"is_empty","","",27,[[]]],[11,"is_contiguous","","",27,[[]]],[11,"is_contiguous_hi","","",27,[[]]],[11,"get_start","","",27,[[],["address",3]]],[11,"get_extent","","",27,[[]]],[11,"get_index","","",27,[[]]],[11,"is_discontiguous","mmtk::util::heap","",13,[[]]],[11,"common64bit","","",13,[[]]],[11,"discontiguous","","",13,[[]]],[11,"fixed_size","","",13,[[]]],[11,"fraction","","",13,[[]]],[11,"high_fixed_size","","",13,[[]]],[11,"fixed_extent","","",13,[[]]],[0,"int_array_freelist","mmtk::util","",null,null],[3,"IntArrayFreeList","mmtk::util::int_array_freelist","",null,null],[12,"head","","",28,null],[12,"heads","","",28,null],[12,"table","","",28,null],[11,"new","","",28,[[]]],[11,"from_parent","","",28,[[["intarrayfreelist",3]]]],[11,"resize_freelist","","",28,[[]]],[0,"logger","mmtk::util","",null,null],[5,"try_init","mmtk::util::logger","Attempt to init a env_logger for MMTk.",null,[[],[["setloggererror",3],["result",4]]]],[0,"memory","mmtk::util","",null,null],[5,"zero","mmtk::util::memory","",null,[[["address",3]]]],[5,"dzmmap","","Demand-zero mmap: This function guarantees to zero all…",null,[[["address",3]],[["address",3],["result",6]]]],[5,"munprotect","","",null,[[["address",3]],["result",6]]],[5,"mprotect","","",null,[[["address",3]],["result",6]]],[0,"opaque_pointer","mmtk::util","",null,null],[3,"OpaquePointer","mmtk::util::opaque_pointer","",null,null],[18,"UNINITIALIZED","","",29,null],[11,"from_address","","",29,[[["address",3]]]],[11,"is_null","","",29,[[]]],[0,"options","mmtk::util","",null,null],[3,"UnsafeOptionsWrapper","mmtk::util::options","",null,null],[3,"Options","","",null,null],[12,"threads","","",30,null],[12,"use_short_stack_scans","","",30,null],[12,"use_return_barrier","","",30,null],[12,"eager_complete_sweep","","",30,null],[12,"ignore_system_g_c","","",30,null],[12,"variable_size_heap","","",30,null],[12,"no_finalizer","","",30,null],[12,"no_reference_types","","",30,null],[12,"nursery_zeroing","","",30,null],[12,"verbose","","",30,null],[12,"stress_factor","","",30,null],[12,"vm_space","","",30,null],[12,"vm_space_size","","",30,null],[4,"NurseryZeroingOptions","","",null,null],[13,"Temporal","","",31,null],[13,"Nontemporal","","",31,null],[13,"Concurrent","","",31,null],[13,"Adaptive","","",31,null],[11,"new","","",32,[[["options",3]],["unsafeoptionswrapper",3]]],[11,"process","","Safety This method is not thread safe, as internally it…",32,[[]]],[11,"set_from_str","","",30,[[]]],[0,"queue","mmtk::util","",null,null],[3,"LocalQueue","mmtk::util::queue","",null,null],[3,"SharedQueue","","",null,null],[11,"new","","",33,[[["sharedqueue",3]]]],[11,"enqueue","","",33,[[]]],[11,"dequeue","","",33,[[],["option",4]]],[11,"is_empty","","",33,[[]]],[11,"reset","","",33,[[]]],[11,"new","","",34,[[]]],[11,"spin","","",34,[[],[["vec",3],["option",4]]]],[11,"push","","",34,[[["vec",3]]]],[11,"spawn_local","","",34,[[],["localqueue",3]]],[11,"is_empty","","",34,[[]]],[0,"raw_memory_freelist","mmtk::util","",null,null],[3,"RawMemoryFreeList","mmtk::util::raw_memory_freelist","",null,null],[12,"head","","",35,null],[12,"heads","","",35,null],[11,"default_block_size","","",35,[[]]],[11,"size_in_pages","","",35,[[]]],[11,"new","","",35,[[["address",3]]]],[11,"grow_freelist","","",35,[[]]],[11,"get_limit","","",35,[[],["address",3]]],[0,"reference_processor","mmtk::util","",null,null],[3,"ReferenceProcessors","mmtk::util::reference_processor","",null,null],[3,"ReferenceProcessor","","",null,null],[4,"Semantics","","",null,null],[13,"SOFT","","",36,null],[13,"WEAK","","",36,null],[13,"PHANTOM","","",36,null],[17,"TRACE","","",null,null],[17,"TRACE_UNREACHABLE","","",null,null],[17,"TRACE_DETAIL","","",null,null],[17,"TRACE_FORWARD","","",null,null],[11,"new","","",37,[[]]],[11,"get","","",37,[[["semantics",4]],["referenceprocessor",3]]],[11,"clear","","",37,[[]]],[11,"add_soft_candidate","","",37,[[["objectreference",3]]]],[11,"add_weak_candidate","","",37,[[["objectreference",3]]]],[11,"add_phantom_candidate","","",37,[[["objectreference",3]]]],[11,"forward_refs","","",37,[[]]],[11,"scan_weak_refs","","",37,[[["opaquepointer",3]]]],[11,"scan_soft_refs","","",37,[[["opaquepointer",3]]]],[11,"scan_phantom_refs","","",37,[[["opaquepointer",3]]]],[11,"new","","",38,[[["semantics",4]]]],[11,"clear","","",38,[[]]],[11,"add_candidate","","",38,[[["objectreference",3]]]],[11,"forward","","",38,[[]]],[0,"statistics","mmtk::util","",null,null],[0,"counter","mmtk::util::statistics","",null,null],[3,"MonotoneNanoTime","mmtk::util::statistics::counter","",null,null],[3,"LongCounter","","",null,null],[12,"implicitly_start","","",39,null],[6,"Timer","","",null,null],[8,"Counter","","",null,null],[10,"start","","",40,[[]]],[10,"stop","","",40,[[]]],[10,"phase_change","","",40,[[]]],[10,"print_count","","",40,[[]]],[10,"print_total","","",40,[[["option",4]]]],[10,"print_min","","",40,[[]]],[10,"print_max","","",40,[[]]],[10,"print_last","","",40,[[]]],[10,"merge_phases","","",40,[[]]],[10,"implicitly_start","","",40,[[]]],[10,"name","","",40,[[],["string",3]]],[8,"Diffable","","",null,null],[16,"Val","","",41,null],[10,"current_value","","",41,[[]]],[10,"diff","","",41,[[]]],[10,"print_diff","","",41,[[]]],[11,"new","","",39,[[["string",3],["sharedstats",3],["arc",3]]]],[0,"stats","mmtk::util::statistics","",null,null],[3,"SharedStats","mmtk::util::statistics::stats","",null,null],[3,"Stats","","",null,null],[12,"shared","","",42,null],[17,"MAX_PHASES","","",null,null],[17,"MAX_COUNTERS","","",null,null],[11,"get_phase","","",43,[[]]],[11,"get_gathering_stats","","",43,[[]]],[11,"new","","",42,[[]]],[11,"new_timer","","",42,[[],[["mutex",3],["arc",3]]]],[11,"start_gc","","",42,[[]]],[11,"end_gc","","",42,[[]]],[11,"print_stats","","",42,[[["mmtk",3]]]],[11,"print_column_names","","",42,[[["hashmap",3]]]],[11,"start_all","","",42,[[]]],[11,"stop_all","","",42,[[["mmtk",3]]]],[11,"get_gathering_stats","","",42,[[]]],[11,"new","mmtk::util","",44,[[]]],[11,"reset","","",44,[[]]],[11,"increment","","",44,[[]]],[11,"peek","","",44,[[]]],[0,"treadmill","","",null,null],[3,"TreadMill","mmtk::util::treadmill","",null,null],[11,"new","","",45,[[]]],[11,"add_to_treadmill","","",45,[[["address",3]]]],[11,"collect_nursery","","",45,[[],[["vec",3],["address",3]]]],[11,"collect","","",45,[[],[["vec",3],["address",3]]]],[11,"copy","","",45,[[["address",3]]]],[11,"to_space_empty","","",45,[[]]],[11,"from_space_empty","","",45,[[]]],[11,"nursery_empty","","",45,[[]]],[11,"flip","","",45,[[]]],[11,"new","mmtk","",0,[[]]],[11,"harness_begin","","",0,[[["opaquepointer",3]]]],[11,"harness_end","","",0,[[]]],[0,"policy","","Memory policies that can be used for spaces.",null,null],[0,"space","mmtk::policy","This class defines and manages spaces. Each policy is an…",null,null],[3,"SFTMap","mmtk::policy::space","",null,null],[3,"CommonSpace","","",null,null],[12,"name","","",46,null],[12,"descriptor","","",46,null],[12,"vmrequest","","",46,null],[12,"contiguous","","",46,null],[12,"zeroed","","",46,null],[12,"start","","",46,null],[12,"extent","","",46,null],[12,"head_discontiguous_region","","",46,null],[12,"vm_map","","",46,null],[12,"mmapper","","",46,null],[3,"SpaceOptions","","",null,null],[12,"name","","",47,null],[12,"movable","","",47,null],[12,"immortal","","",47,null],[12,"zeroed","","",47,null],[12,"vmrequest","","",47,null],[5,"required_chunks","","",null,[[]]],[8,"SFT","","Space Function Table (SFT).",null,null],[10,"name","","",48,[[]]],[10,"is_live","","",48,[[["objectreference",3]]]],[10,"is_movable","","",48,[[]]],[10,"initialize_header","","",48,[[["objectreference",3]]]],[8,"Space","","",null,null],[10,"as_space","","",49,[[],["space",8]]],[10,"as_sft","","",49,[[],["sft",8]]],[10,"get_page_resource","","",49,[[],["pageresource",8]]],[10,"init","","",49,[[["vmmap",6]]]],[11,"acquire","","",49,[[["opaquepointer",3]],["address",3]]],[11,"address_in_space","","",49,[[["address",3]]]],[11,"in_space","","",49,[[["objectreference",3]]]],[11,"grow_discontiguous_space","","Safety potential data race as this mutates \'common\' FIXME:…",49,[[],["address",3]]],[11,"grow_space","","This hook is called by page resources each time a space…",49,[[["address",3]]]],[11,"ensure_mapped","","Ensure this space is marked as mapped -- used when the…",49,[[]]],[11,"reserved_pages","","",49,[[]]],[11,"get_name","","",49,[[]]],[10,"common","","",49,[[],["commonspace",3]]],[11,"common_mut","","",49,[[],["commonspace",3]]],[10,"unsafe_common_mut","","Safety This get\'s a mutable reference from self. (i.e.…",49,[[],["commonspace",3]]],[11,"release_discontiguous_chunks","","",49,[[["address",3]]]],[10,"release_multiple_pages","","",49,[[["address",3]]]],[11,"release_all_chunks","","Safety TODO: I am not sure why this is unsafe.",49,[[]]],[11,"print_vm_map","","",49,[[]]],[11,"new","","",50,[[]]],[11,"get","","",50,[[["address",3]],["sft",8]]],[11,"update","","Update SFT map for the given address range. It should be…",50,[[["address",3]]]],[11,"clear","","",50,[[]]],[11,"is","","Returns true if the trait object wraps an object of type…",49,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the…",49,[[["box",3]],[["box",3],["box",3],["result",4]]]],[11,"downcast_rc","","Returns an `Rc`-ed object from an `Rc`-ed trait object if…",49,[[["rc",3]],[["result",4],["rc",3],["rc",3]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object…",49,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the trait…",49,[[],["option",4]]],[11,"new","","",46,[[["vmmap",6],["spaceoptions",3],["mmapper",6],["heapmeta",3]]]],[11,"init","","",46,[[]]],[11,"vm_map","","",46,[[],["vmmap",6]]],[0,"immortalspace","mmtk::policy","",null,null],[3,"ImmortalSpace","mmtk::policy::immortalspace","",null,null],[11,"new","","",51,[[["vmmap",6],["vmrequest",4],["mmapper",6],["heapmeta",3]]]],[11,"prepare","","",51,[[]]],[11,"release","","",51,[[]]],[11,"trace_object","","",51,[[["objectreference",3]],["objectreference",3]]],[0,"copyspace","mmtk::policy","",null,null],[3,"CopySpace","mmtk::policy::copyspace","",null,null],[11,"new","","",52,[[["vmmap",6],["vmrequest",4],["mmapper",6],["heapmeta",3]]]],[11,"prepare","","",52,[[]]],[11,"release","","",52,[[]]],[11,"trace_object","","",52,[[["allocationsemantics",4],["objectreference",3]],["objectreference",3]]],[11,"protect","","",52,[[]]],[11,"unprotect","","",52,[[]]],[0,"largeobjectspace","mmtk::policy","",null,null],[3,"LargeObjectSpace","mmtk::policy::largeobjectspace","",null,null],[11,"new","","",53,[[["vmmap",6],["vmrequest",4],["mmapper",6],["heapmeta",3]]]],[11,"prepare","","",53,[[]]],[11,"release","","",53,[[]]],[11,"trace_object","","",53,[[["objectreference",3]],["objectreference",3]]],[11,"allocate_pages","","",53,[[["opaquepointer",3]],["address",3]]],[0,"scheduler","mmtk","A general scheduler implementation. MMTk uses it to…",null,null],[3,"Scheduler","mmtk::scheduler","",null,null],[12,"unconstrained_works","","Works that are scheduable at any time",54,null],[12,"prepare_stage","","Works that are scheduable within Stop-the-world",54,null],[12,"closure_stage","","",54,null],[12,"release_stage","","",54,null],[12,"final_stage","","",54,null],[12,"coordinator_works","","Works for the coordinator thread",54,null],[12,"worker_monitor","","Condition Variable for worker synchronization",54,null],[12,"channel","","A message channel to send new coordinator works and other…",54,null],[3,"Worker","","",null,null],[12,"tls","","",55,null],[12,"ordinal","","",55,null],[12,"parked","","",55,null],[12,"local_works","","",55,null],[12,"sender","","",55,null],[12,"stat","","",55,null],[3,"WorkerGroup","","",null,null],[12,"workers","","",56,null],[4,"CoordinatorMessage","","",null,null],[13,"Work","","",57,null],[13,"AllWorkerParked","","",57,null],[13,"BucketDrained","","",57,null],[11,"new","","",54,[[],["arc",3]]],[11,"num_workers","","",54,[[]]],[11,"initialize","","",54,[[["opaquepointer",3],["arc",3]]]],[11,"initialize_worker","","",54,[[["arc",3],["opaquepointer",3]]]],[11,"set_initializer","","",54,[[["option",4],["coordinatorwork",8]]]],[11,"set_finalizer","","",54,[[["option",4],["coordinatorwork",8]]]],[11,"worker_group","","",54,[[],[["arc",3],["workergroup",3]]]],[11,"wait_for_completion","","Drain the message queue and execute coordinator works",54,[[]]],[11,"deactivate_all","","",54,[[]]],[11,"reset_state","","",54,[[]]],[11,"add_coordinator_work","","",54,[[["worker",3]]]],[11,"poll","","Get a scheduable work. Called by workers",54,[[["worker",3]],[["work",8],["box",3]]]],[11,"enable_stat","","",54,[[]]],[11,"statistics","","",54,[[],[["string",3],["hashmap",3]]]],[11,"notify_mutators_paused","","",54,[[["mmtk",3]]]],[0,"stat","","",null,null],[3,"SchedulerStat","mmtk::scheduler::stat","",null,null],[3,"WorkStat","","",null,null],[3,"WorkerLocalStat","","",null,null],[11,"harness_stat","","",58,[[],[["string",3],["hashmap",3]]]],[11,"merge","","",58,[[["workerlocalstat",3]]]],[11,"end_of_work","","",59,[[["workerlocalstat",3]]]],[11,"is_enabled","","",60,[[]]],[11,"enable","","",60,[[]]],[11,"measure_work","","",60,[[["typeid",3]],["workstat",3]]],[11,"new","mmtk::scheduler","",55,[[["weak",3],["scheduler",3]]]],[11,"is_parked","","",55,[[]]],[11,"is_coordinator","","",55,[[]]],[11,"scheduler","","",55,[[],["scheduler",3]]],[11,"local","","",55,[[]]],[11,"init","","",55,[[["opaquepointer",3]]]],[11,"do_work","","",55,[[]]],[11,"run","","",55,[[]]],[11,"new","","",56,[[["weak",3],["scheduler",3]],["arc",3]]],[11,"worker_count","","",56,[[]]],[11,"parked_workers","","",56,[[]]],[11,"all_parked","","",56,[[]]],[11,"spawn_workers","","",56,[[["opaquepointer",3]]]],[0,"gc_works","","",null,null],[3,"ScheduleCollection","mmtk::scheduler::gc_works","",null,null],[3,"Prepare","","GC Preparation Work (include updating global states)",null,null],[12,"plan","","",61,null],[3,"PrepareMutator","","GC Preparation Work (include updating global states)",null,null],[12,"mutator","","",62,null],[3,"PrepareCollector","","",null,null],[3,"Release","","",null,null],[12,"plan","","",63,null],[3,"ReleaseMutator","","",null,null],[12,"mutator","","",64,null],[3,"ReleaseCollector","","",null,null],[3,"StopMutators","","Stop all mutators",null,null],[3,"EndOfGC","","",null,null],[3,"ScanStackRoots","","",null,null],[3,"ScanStackRoot","","",null,null],[12,"0","","",65,null],[3,"ScanVMSpecificRoots","","",null,null],[3,"ProcessEdgesBase","","",null,null],[12,"edges","","",66,null],[12,"nodes","","",66,null],[12,"mmtk","","",66,null],[3,"ScanObjects","","Scan & update a list of object slots",null,null],[3,"ProcessModBuf","","",null,null],[8,"ProcessEdgesWork","","Scan & update a list of object slots",null,null],[16,"VM","","",67,null],[18,"CAPACITY","","",67,null],[18,"OVERWRITE_REFERENCE","","",67,null],[18,"SCAN_OBJECTS_IMMEDIATELY","","",67,null],[10,"new","","",67,[[["vec",3],["address",3]]]],[10,"trace_object","","",67,[[["objectreference",3]],["objectreference",3]]],[11,"process_node","","",67,[[["objectreference",3]]]],[11,"flush","","",67,[[]]],[11,"process_edge","","",67,[[["address",3]]]],[11,"process_edges","","",67,[[]]],[11,"new","","",61,[[]]],[11,"new","","",62,[[["mutator",3]]]],[11,"new","","",63,[[]]],[11,"new","","",64,[[["mutator",3]]]],[11,"new","","",68,[[]]],[11,"new","","",69,[[]]],[11,"new","","",70,[[]]],[11,"new","","",66,[[["vec",3],["address",3]]]],[11,"set_worker","","",66,[[["gcworker",6]]]],[11,"worker","","",66,[[],["gcworker",6]]],[11,"mmtk","","",66,[[],["mmtk",3]]],[11,"plan","","",66,[[],["selectedplan",6]]],[11,"new","","",71,[[["vec",3],["objectreference",3]]]],[11,"new","","",72,[[["vec",3],["vec",3],["objectreference",3],["address",3]]]],[6,"MMTkScheduler","mmtk::scheduler","",null,null],[6,"GCWorker","","",null,null],[8,"Context","","The global context for the whole scheduling system. This…",null,null],[16,"WorkerLocal","","",73,null],[11,"spawn_worker","","",73,[[["worker",3],["opaquepointer",3]]]],[8,"WorkerLocal","","Thread-local data for each worker thread.",null,null],[10,"new","","",74,[[]]],[11,"init","","",74,[[["opaquepointer",3]]]],[8,"Work","","",null,null],[10,"do_work","","",75,[[["worker",3]]]],[11,"do_work_with_stat","","",75,[[["worker",3]]]],[8,"CoordinatorWork","","A special kind of work that will execute on the…",null,null],[8,"GCWork","","",null,null],[10,"do_work","","",76,[[["mmtk",3],["gcworker",6]]]],[0,"vm","mmtk","MMTk-to-VM interface: the VMBinding trait.",null,null],[8,"ActivePlan","mmtk::vm","VM-specific methods for the current plan.",null,null],[10,"global","","Return a reference to the current plan.",77,[[],["selectedplan",6]]],[10,"worker","","Return a `GCWorker` reference for the thread.",77,[[["opaquepointer",3]],["gcworker",6]]],[10,"is_mutator","","Return whether there is a mutator created and associated…",77,[[["opaquepointer",3]]]],[10,"mutator","","Return a `Mutator` reference for the thread.",77,[[["opaquepointer",3]]]],[10,"collector_count","","Return the number of GC collectors. This is unused by MMTk…",77,[[]]],[10,"reset_mutator_iterator","","Reset the mutator iterator so that `get_next_mutator()`…",77,[[]]],[10,"get_next_mutator","","Return the next mutator if there is any. This method…",77,[[],["option",4]]],[11,"mutators","","A utility method to provide a thread-safe mutator iterator…",77,[[],["synchronizedmutatoriterator",3]]],[10,"number_of_mutators","","Return the total count of mutators.",77,[[]]],[8,"Collection","","VM-specific methods for garbage collection.",null,null],[10,"stop_all_mutators","","Stop all the mutator threads. MMTk calls this method when…",78,[[["opaquepointer",3]]]],[10,"resume_mutators","","Resume all the mutator threads, the opposite of the above.…",78,[[["opaquepointer",3]]]],[10,"block_for_gc","","Block the current thread for GC. This is called when an…",78,[[["opaquepointer",3]]]],[10,"spawn_worker_thread","","Ask the VM to spawn a GC thread for MMTk. A GC thread may…",78,[[["worker",3],["opaquepointer",3],["option",4]]]],[10,"prepare_mutator","","Allow VM-specific behaviors for a mutator after all the…",78,[[["opaquepointer",3]]]],[11,"out_of_memory","","Inform the VM for an out-of-memory error. The VM can…",78,[[["opaquepointer",3]]]],[8,"ObjectModel","","VM-specific methods for object model.",null,null],[18,"HAS_GC_BYTE","","Whether an exclusive GC byte in each object\'s header word…",79,null],[18,"GC_BYTE_OFFSET","","The offset of the GC byte from the object reference, in…",79,null],[10,"copy","","Copy an object and return the address of the new object.…",79,[[["allocationsemantics",4],["objectreference",3]],["objectreference",3]]],[10,"copy_to","","Copy an object. This is required for delayed-copy…",79,[[["address",3],["objectreference",3]],["address",3]]],[10,"get_reference_when_copied_to","","Return the reference that an object will be referred to…",79,[[["address",3],["objectreference",3]],["objectreference",3]]],[10,"get_current_size","","Return the size used by an object.",79,[[["objectreference",3]]]],[10,"get_type_descriptor","","Get the type descriptor for an object.",79,[[["objectreference",3]]]],[10,"object_start_ref","","Return the lowest address of the storage associated with…",79,[[["objectreference",3]],["address",3]]],[10,"ref_to_address","","Return an address guaranteed to be inside the storage…",79,[[["objectreference",3]],["address",3]]],[10,"dump_object","","Dump debugging information for an object.",79,[[["objectreference",3]]]],[8,"ReferenceGlue","","VM-specific methods for reference processing.",null,null],[11,"clear_referent","","Weak and soft references always clear the referent before…",80,[[["objectreference",3]]]],[10,"get_referent","","Get the referent from a reference.",80,[[["objectreference",3]],["objectreference",3]]],[10,"set_referent","","Set the referent in a reference.",80,[[["objectreference",3]]]],[10,"process_reference","","Process a reference with the current semantics and return…",80,[[["objectreference",3],["opaquepointer",3]],["objectreference",3]]],[8,"Scanning","","VM-specific methods for scanning roots/objects.",null,null],[18,"SCAN_MUTATORS_IN_SAFEPOINT","","Scan stack roots after all mutators are paused.",81,null],[18,"SINGLE_THREAD_MUTATOR_SCANNING","","Scan all the mutators within a single work packet.",81,null],[10,"scan_object","","Delegated scanning of a object, processing each pointer…",81,[[["objectreference",3],["opaquepointer",3]]]],[10,"reset_thread_counter","","",81,[[]]],[10,"notify_initial_thread_scan_complete","","MMTk calls this method at the first time during a…",81,[[["opaquepointer",3]]]],[10,"scan_objects","","Bulk scanning of objects, processing each pointer field…",81,[[]]],[10,"scan_thread_roots","","Scan all the mutators for roots.",81,[[]]],[10,"scan_thread_root","","Scan one mutator for roots.",81,[[["mutator",3],["opaquepointer",3]]]],[10,"scan_vm_specific_roots","","Scan VM-specific roots. The creation of all root scan…",81,[[]]],[10,"supports_return_barrier","","Return whether the VM supports return barriers. This is…",81,[[]]],[8,"VMBinding","","The `VMBinding` trait associates with each trait, and…",null,null],[16,"VMObjectModel","","",82,null],[16,"VMScanning","","",82,null],[16,"VMCollection","","",82,null],[16,"VMActivePlan","","",82,null],[16,"VMReferenceGlue","","",82,null],[18,"ALIGNMENT_VALUE","","A value to fill in alignment gaps. This value can be used…",82,null],[18,"LOG_MIN_ALIGNMENT","","Allowed minimal alignment.",82,null],[18,"MIN_ALIGNMENT","","Allowed minimal alignment in bytes.",82,null],[18,"MAX_ALIGNMENT_SHIFT","","Allowed maximum alignment as shift by min alignment.    ",82,null],[18,"MAX_ALIGNMENT","","Allowed maximum alignment in bytes.",82,null],[18,"ALLOC_END_ALIGNMENT","","This value is used to assert if the cursor is reasonable…",82,null],[0,"memory_manager","mmtk","VM-to-MMTk interface: safe Rust APIs.",null,null],[5,"start_control_collector","mmtk::memory_manager","Run the main loop for the GC controller thread. This…",null,[[["mmtk",3],["opaquepointer",3]]]],[5,"gc_init","","Initialize an MMTk instance. A VM should call this method…",null,[[["mmtk",3]]]],[5,"bind_mutator","","Request MMTk to create a mutator for the given thread. For…",null,[[["mmtk",3],["opaquepointer",3]],[["box",3],["mutator",3]]]],[5,"destroy_mutator","","Reclaim a mutator that is no longer needed.",null,[[["box",3],["mutator",3]]]],[5,"flush_mutator","","Flush the mutator\'s local states.",null,[[["mutator",3]]]],[5,"alloc","","Allocate memory for an object. For performance reasons, a…",null,[[["allocationsemantics",4],["mutator",3]],["address",3]]],[5,"post_alloc","","Perform post-allocation actions, usually initializing…",null,[[["allocationsemantics",4],["objectreference",3],["mutator",3]]]],[5,"get_allocator_mapping","","Return an AllocatorSelector for the given allocation…",null,[[["allocationsemantics",4],["mmtk",3]],["allocatorselector",4]]],[5,"start_worker","","Run the main loop of a GC worker. This method does not…",null,[[["mmtk",3],["opaquepointer",3],["gcworker",6]]]],[5,"enable_collection","","Allow MMTk to trigger garbage collection. A VM should only…",null,[[["mmtk",3],["opaquepointer",3]]]],[5,"process","","Process MMTk run-time options.",null,[[["mmtk",3]]]],[5,"used_bytes","","Return used memory in bytes.",null,[[["mmtk",3]]]],[5,"free_bytes","","Return free memory in bytes.",null,[[["mmtk",3]]]],[5,"starting_heap_address","","Return the starting address of the heap. Note that…",null,[[],["address",3]]],[5,"last_heap_address","","Return the ending address of the heap. Note that currently…",null,[[],["address",3]]],[5,"total_bytes","","Return the total memory in bytes.",null,[[["mmtk",3]]]],[5,"handle_user_collection_request","","Trigger a garbage collection as requested by the user.",null,[[["mmtk",3],["opaquepointer",3]]]],[5,"is_live_object","","Is the object alive?",null,[[["objectreference",3]]]],[5,"is_mapped_object","","Is the object in the mapped memory?",null,[[["objectreference",3]]]],[5,"is_mapped_address","","Is the address in the mapped memory?",null,[[["address",3]]]],[5,"modify_check","","Check that if a garbage collection is in progress and if…",null,[[["mmtk",3],["objectreference",3]]]],[5,"add_weak_candidate","","Add a reference to the list of weak references.",null,[[["mmtk",3],["objectreference",3]]]],[5,"add_soft_candidate","","Add a reference to the list of soft references.",null,[[["mmtk",3],["objectreference",3]]]],[5,"add_phantom_candidate","","Add a reference to the list of phantom references.",null,[[["mmtk",3],["objectreference",3]]]],[5,"harness_begin","","Generic hook to allow benchmarks to be harnessed. We do a…",null,[[["mmtk",3],["opaquepointer",3]]]],[5,"harness_end","","Generic hook to allow benchmarks to be harnessed. We stop…",null,[[["mmtk",3]]]],[8,"CopyContext","mmtk","A GC worker\'s context for copying GCs. Each GC plan should…",null,null],[16,"VM","","",83,null],[18,"MAX_NON_LOS_COPY_BYTES","","",83,null],[10,"new","","",83,[[["mmtk",3]]]],[10,"init","","",83,[[["opaquepointer",3]]]],[10,"prepare","","",83,[[]]],[10,"release","","",83,[[]]],[10,"alloc_copy","","",83,[[["allocationsemantics",4],["objectreference",3]],["address",3]]],[11,"post_copy","","",83,[[["address",3],["allocationsemantics",4],["objectreference",3]]]],[11,"copy_check_allocator","","",83,[[["allocationsemantics",4],["objectreference",3]],["allocationsemantics",4]]],[8,"MutatorContext","","Each GC plan should provide their implementation of a…",null,null],[10,"prepare","","",84,[[["opaquepointer",3]]]],[10,"release","","",84,[[["opaquepointer",3]]]],[10,"alloc","","",84,[[["allocationtype",4]],["address",3]]],[10,"post_alloc","","",84,[[["objectreference",3],["allocationtype",4]]]],[11,"flush_remembered_sets","","",84,[[]]],[11,"flush","","",84,[[]]],[10,"get_tls","","",84,[[],["opaquepointer",3]]],[10,"barrier","","",84,[[],["barrier",8]]],[11,"record_modified_node","","",84,[[["objectreference",3]]]],[11,"record_modified_edge","","",84,[[["address",3]]]],[8,"Plan","","A plan describes the global core functionality for all…",null,null],[16,"VM","","",85,null],[16,"Mutator","","",85,null],[16,"CopyContext","","",85,null],[10,"new","","",85,[[["vmmap",6],["unsafeoptionswrapper",3],["arc",3],["mmapper",6],["mmtkscheduler",6]]]],[10,"base","","",85,[[],["baseplan",3]]],[10,"schedule_collection","","",85,[[["mmtkscheduler",6]]]],[11,"common","","",85,[[],["commonplan",3]]],[11,"mmapper","","",85,[[],["mmapper",6]]],[11,"options","","",85,[[],["options",3]]],[10,"gc_init","","",85,[[["vmmap",6],["arc",3]]]],[10,"bind_mutator","","",85,[[["opaquepointer",3],["mmtk",3]],["box",3]]],[10,"get_allocator_mapping","","",85,[[],["enummap",3]]],[11,"in_nursery","","",85,[[]]],[11,"is_initialized","","",85,[[]]],[10,"prepare","","",85,[[["opaquepointer",3]]]],[10,"release","","",85,[[["opaquepointer",3]]]],[11,"poll","","",85,[[["space",8]]]],[11,"log_poll","","",85,[[["space",8]]]],[11,"collection_required","","This method controls the triggering of a GC. It is called…",85,[[["space",8]]]],[11,"get_pages_reserved","","",85,[[]]],[11,"get_total_pages","","",85,[[]]],[11,"get_pages_avail","","",85,[[]]],[11,"get_collection_reserve","","",85,[[]]],[10,"get_pages_used","","",85,[[]]],[11,"is_emergency_collection","","",85,[[]]],[11,"get_free_pages","","",85,[[]]],[11,"stress_test_gc_required","","",85,[[]]],[11,"handle_user_collection_request","","",85,[[["opaquepointer",3]]]],[11,"reset_collection_trigger","","",85,[[]]],[11,"modify_check","","",85,[[["objectreference",3]]]],[8,"TraceLocal","","This trait and its global counterpart implement the core…",null,null],[10,"process_roots","","",86,[[]]],[10,"process_root_edge","","",86,[[["address",3]]]],[10,"trace_object","","",86,[[["objectreference",3]],["objectreference",3]]],[10,"complete_trace","","",86,[[]]],[10,"release","","",86,[[]]],[10,"process_interior_edge","","",86,[[["address",3],["objectreference",3]]]],[11,"overwrite_reference_during_trace","","",86,[[]]],[10,"report_delayed_root_edge","","",86,[[["address",3]]]],[10,"will_not_move_in_current_collection","","",86,[[["objectreference",3]]]],[11,"get_forwarded_reference","","",86,[[["objectreference",3]],["objectreference",3]]],[11,"get_forwarded_referent","","",86,[[["objectreference",3]],["objectreference",3]]],[11,"retain_referent","","",86,[[["objectreference",3]],["objectreference",3]]],[8,"TransitiveClosure","","This trait is the fundamental mechanism for performing a…",null,null],[10,"process_edge","","",87,[[["address",3]]]],[10,"process_node","","",87,[[["objectreference",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"into_any","","",0,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",0,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",0,[[],["any",8]]],[11,"as_any_mut","","",0,[[],["any",8]]],[11,"into_any_arc","","",0,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"into_any","","",1,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",1,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",1,[[],["any",8]]],[11,"as_any_mut","","",1,[[],["any",8]]],[11,"into_any_arc","","",1,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"into_any","","",2,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",2,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",2,[[],["any",8]]],[11,"as_any_mut","","",2,[[],["any",8]]],[11,"into_any_arc","","",2,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util","",44,[[]]],[11,"into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"into_any","","",44,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",44,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",44,[[],["any",8]]],[11,"as_any_mut","","",44,[[],["any",8]]],[11,"into_any_arc","","",44,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::address","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"into_any","","",3,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",3,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",3,[[],["any",8]]],[11,"as_any_mut","","",3,[[],["any",8]]],[11,"into_any_arc","","",3,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"into_any","","",4,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",4,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",4,[[],["any",8]]],[11,"as_any_mut","","",4,[[],["any",8]]],[11,"into_any_arc","","",4,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"into_any","","",5,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",5,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",5,[[],["any",8]]],[11,"as_any_mut","","",5,[[],["any",8]]],[11,"into_any_arc","","",5,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::allocators","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"into_any","","",7,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",7,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",7,[[],["any",8]]],[11,"as_any_mut","","",7,[[],["any",8]]],[11,"into_any_arc","","",7,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"into_any","","",8,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",8,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",8,[[],["any",8]]],[11,"as_any_mut","","",8,[[],["any",8]]],[11,"into_any_arc","","",8,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::dump_linear_scan","",88,[[]]],[11,"into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"into_any","","",88,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",88,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",88,[[],["any",8]]],[11,"as_any_mut","","",88,[[],["any",8]]],[11,"into_any_arc","","",88,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::large_object_allocator","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"into_any","","",9,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",9,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",9,[[],["any",8]]],[11,"as_any_mut","","",9,[[],["any",8]]],[11,"into_any_arc","","",9,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::gc_byte","",89,[[]]],[11,"into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"into_any","","",89,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",89,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",89,[[],["any",8]]],[11,"as_any_mut","","",89,[[],["any",8]]],[11,"into_any_arc","","",89,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"into_any","","",12,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",12,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",12,[[],["any",8]]],[11,"as_any_mut","","",12,[[],["any",8]]],[11,"into_any_arc","","",12,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"into_any","","",13,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",13,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",13,[[],["any",8]]],[11,"as_any_mut","","",13,[[],["any",8]]],[11,"into_any_arc","","",13,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::layout","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"into_any","","",18,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",18,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",18,[[],["any",8]]],[11,"as_any_mut","","",18,[[],["any",8]]],[11,"into_any_arc","","",18,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::layout::map64","",90,[[]]],[11,"into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"into_any","","",90,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",90,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",90,[[],["any",8]]],[11,"as_any_mut","","",90,[[],["any",8]]],[11,"into_any_arc","","",90,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::freelistpageresource","",20,[[]]],[11,"into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"into_any","","",20,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",20,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",20,[[],["any",8]]],[11,"as_any_mut","","",20,[[],["any",8]]],[11,"into_any_arc","","",20,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"into_any","","",21,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",21,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",21,[[],["any",8]]],[11,"as_any_mut","","",21,[[],["any",8]]],[11,"into_any_arc","","",21,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::monotonepageresource","",24,[[]]],[11,"into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"into_any","","",24,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",24,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",24,[[],["any",8]]],[11,"as_any_mut","","",24,[[],["any",8]]],[11,"into_any_arc","","",24,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"into_any","","",22,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",22,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",22,[[],["any",8]]],[11,"as_any_mut","","",22,[[],["any",8]]],[11,"into_any_arc","","",22,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::pageresource","",25,[[]]],[11,"into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"into_any","","",25,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",25,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",25,[[],["any",8]]],[11,"as_any_mut","","",25,[[],["any",8]]],[11,"into_any_arc","","",25,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::space_descriptor","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"into_any","","",27,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",27,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",27,[[],["any",8]]],[11,"as_any_mut","","",27,[[],["any",8]]],[11,"into_any_arc","","",27,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::int_array_freelist","",28,[[]]],[11,"into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"into_any","","",28,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",28,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",28,[[],["any",8]]],[11,"as_any_mut","","",28,[[],["any",8]]],[11,"into_any_arc","","",28,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::opaque_pointer","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"into_any","","",29,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",29,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",29,[[],["any",8]]],[11,"as_any_mut","","",29,[[],["any",8]]],[11,"into_any_arc","","",29,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::options","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"into_any","","",32,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",32,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",32,[[],["any",8]]],[11,"as_any_mut","","",32,[[],["any",8]]],[11,"into_any_arc","","",32,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"into_any","","",30,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",30,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",30,[[],["any",8]]],[11,"as_any_mut","","",30,[[],["any",8]]],[11,"into_any_arc","","",30,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"into_any","","",31,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",31,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",31,[[],["any",8]]],[11,"as_any_mut","","",31,[[],["any",8]]],[11,"into_any_arc","","",31,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::queue","",33,[[]]],[11,"into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"into_any","","",33,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",33,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",33,[[],["any",8]]],[11,"as_any_mut","","",33,[[],["any",8]]],[11,"into_any_arc","","",33,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"into_any","","",34,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",34,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",34,[[],["any",8]]],[11,"as_any_mut","","",34,[[],["any",8]]],[11,"into_any_arc","","",34,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::raw_memory_freelist","",35,[[]]],[11,"into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"into_any","","",35,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",35,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",35,[[],["any",8]]],[11,"as_any_mut","","",35,[[],["any",8]]],[11,"into_any_arc","","",35,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::reference_processor","",37,[[]]],[11,"into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"into_any","","",37,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",37,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",37,[[],["any",8]]],[11,"as_any_mut","","",37,[[],["any",8]]],[11,"into_any_arc","","",37,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"into_any","","",38,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",38,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",38,[[],["any",8]]],[11,"as_any_mut","","",38,[[],["any",8]]],[11,"into_any_arc","","",38,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"into_any","","",36,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",36,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",36,[[],["any",8]]],[11,"as_any_mut","","",36,[[],["any",8]]],[11,"into_any_arc","","",36,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::statistics::counter","",91,[[]]],[11,"into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"into_any","","",91,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",91,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",91,[[],["any",8]]],[11,"as_any_mut","","",91,[[],["any",8]]],[11,"into_any_arc","","",91,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"into_any","","",39,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",39,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",39,[[],["any",8]]],[11,"as_any_mut","","",39,[[],["any",8]]],[11,"into_any_arc","","",39,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::statistics::stats","",43,[[]]],[11,"into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"into_any","","",43,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",43,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",43,[[],["any",8]]],[11,"as_any_mut","","",43,[[],["any",8]]],[11,"into_any_arc","","",43,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"into_any","","",42,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",42,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",42,[[],["any",8]]],[11,"as_any_mut","","",42,[[],["any",8]]],[11,"into_any_arc","","",42,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::treadmill","",45,[[]]],[11,"into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"into_any","","",45,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",45,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",45,[[],["any",8]]],[11,"as_any_mut","","",45,[[],["any",8]]],[11,"into_any_arc","","",45,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::space","",50,[[]]],[11,"into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"into_any","","",50,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",50,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",50,[[],["any",8]]],[11,"as_any_mut","","",50,[[],["any",8]]],[11,"into_any_arc","","",50,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"into_any","","",46,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",46,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",46,[[],["any",8]]],[11,"as_any_mut","","",46,[[],["any",8]]],[11,"into_any_arc","","",46,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"into_any","","",47,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",47,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",47,[[],["any",8]]],[11,"as_any_mut","","",47,[[],["any",8]]],[11,"into_any_arc","","",47,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::immortalspace","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"into_any","","",51,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",51,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",51,[[],["any",8]]],[11,"as_any_mut","","",51,[[],["any",8]]],[11,"into_any_arc","","",51,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::copyspace","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"into_any","","",52,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",52,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",52,[[],["any",8]]],[11,"as_any_mut","","",52,[[],["any",8]]],[11,"into_any_arc","","",52,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::largeobjectspace","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"into_any","","",53,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",53,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",53,[[],["any",8]]],[11,"as_any_mut","","",53,[[],["any",8]]],[11,"into_any_arc","","",53,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler","",54,[[]]],[11,"into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"into_any","","",54,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",54,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",54,[[],["any",8]]],[11,"as_any_mut","","",54,[[],["any",8]]],[11,"into_any_arc","","",54,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"into_any","","",55,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",55,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",55,[[],["any",8]]],[11,"as_any_mut","","",55,[[],["any",8]]],[11,"into_any_arc","","",55,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"into_any","","",56,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",56,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",56,[[],["any",8]]],[11,"as_any_mut","","",56,[[],["any",8]]],[11,"into_any_arc","","",56,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"into_any","","",57,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",57,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",57,[[],["any",8]]],[11,"as_any_mut","","",57,[[],["any",8]]],[11,"into_any_arc","","",57,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler::stat","",58,[[]]],[11,"into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"into_any","","",58,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",58,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",58,[[],["any",8]]],[11,"as_any_mut","","",58,[[],["any",8]]],[11,"into_any_arc","","",58,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"into_any","","",59,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",59,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",59,[[],["any",8]]],[11,"as_any_mut","","",59,[[],["any",8]]],[11,"into_any_arc","","",59,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"into_any","","",60,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",60,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",60,[[],["any",8]]],[11,"as_any_mut","","",60,[[],["any",8]]],[11,"into_any_arc","","",60,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler::gc_works","",92,[[]]],[11,"into","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"into_any","","",92,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",92,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",92,[[],["any",8]]],[11,"as_any_mut","","",92,[[],["any",8]]],[11,"into_any_arc","","",92,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"into_any","","",61,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",61,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",61,[[],["any",8]]],[11,"as_any_mut","","",61,[[],["any",8]]],[11,"into_any_arc","","",61,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"into_any","","",62,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",62,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",62,[[],["any",8]]],[11,"as_any_mut","","",62,[[],["any",8]]],[11,"into_any_arc","","",62,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"into_any","","",93,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",93,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",93,[[],["any",8]]],[11,"as_any_mut","","",93,[[],["any",8]]],[11,"into_any_arc","","",93,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"into_any","","",63,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",63,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",63,[[],["any",8]]],[11,"as_any_mut","","",63,[[],["any",8]]],[11,"into_any_arc","","",63,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"into_any","","",64,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",64,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",64,[[],["any",8]]],[11,"as_any_mut","","",64,[[],["any",8]]],[11,"into_any_arc","","",64,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"into_any","","",94,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",94,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",94,[[],["any",8]]],[11,"as_any_mut","","",94,[[],["any",8]]],[11,"into_any_arc","","",94,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"into_any","","",68,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",68,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",68,[[],["any",8]]],[11,"as_any_mut","","",68,[[],["any",8]]],[11,"into_any_arc","","",68,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"into_any","","",95,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",95,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",95,[[],["any",8]]],[11,"as_any_mut","","",95,[[],["any",8]]],[11,"into_any_arc","","",95,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"into_any","","",69,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",69,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",69,[[],["any",8]]],[11,"as_any_mut","","",69,[[],["any",8]]],[11,"into_any_arc","","",69,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"into_any","","",65,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",65,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",65,[[],["any",8]]],[11,"as_any_mut","","",65,[[],["any",8]]],[11,"into_any_arc","","",65,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"into_any","","",70,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",70,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",70,[[],["any",8]]],[11,"as_any_mut","","",70,[[],["any",8]]],[11,"into_any_arc","","",70,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"into_any","","",66,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",66,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",66,[[],["any",8]]],[11,"as_any_mut","","",66,[[],["any",8]]],[11,"into_any_arc","","",66,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"into_any","","",71,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",71,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",71,[[],["any",8]]],[11,"as_any_mut","","",71,[[],["any",8]]],[11,"into_any_arc","","",71,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"into_any","","",72,[[["box",3]],[["box",3],["any",8]]]],[11,"into_any_rc","","",72,[[["rc",3]],[["any",8],["rc",3]]]],[11,"as_any","","",72,[[],["any",8]]],[11,"as_any_mut","","",72,[[],["any",8]]],[11,"into_any_arc","","",72,[[["arc",3]],[["arc",3],["any",8]]]],[11,"get_space","mmtk::util::alloc","",5,[[],[["option",4],["space",8]]]],[11,"get_plan","","",5,[[],["selectedplan",6]]],[11,"alloc","","",5,[[],["address",3]]],[11,"alloc_slow_once","","",5,[[],["address",3]]],[11,"get_tls","","",5,[[],["opaquepointer",3]]],[11,"get_tls","mmtk::util::alloc::large_object_allocator","",9,[[],["opaquepointer",3]]],[11,"get_plan","","",9,[[],["selectedplan",6]]],[11,"get_space","","",9,[[],[["option",4],["space",8]]]],[11,"alloc","","",9,[[],["address",3]]],[11,"alloc_slow","","",9,[[],["address",3]]],[11,"alloc_slow_once","","",9,[[],["address",3]]],[11,"scan","mmtk::util::alloc::dump_linear_scan","",88,[[["objectreference",3]]]],[11,"head","mmtk::util::int_array_freelist","",28,[[]]],[11,"heads","","",28,[[]]],[11,"get_entry","","",28,[[]]],[11,"set_entry","","",28,[[]]],[11,"head","mmtk::util::raw_memory_freelist","",35,[[]]],[11,"heads","","",35,[[]]],[11,"get_entry","","",35,[[]]],[11,"set_entry","","",35,[[]]],[11,"alloc","","",35,[[]]],[11,"eagerly_mmap_all_spaces","mmtk::util::heap::layout","",18,[[]]],[11,"mark_as_mapped","","",18,[[["address",3]]]],[11,"ensure_mapped","","",18,[[["address",3]]]],[11,"is_mapped_address","","Return {@code true} if the given address has been mmapped",18,[[["address",3]]]],[11,"protect","","",18,[[["address",3]]]],[11,"new","mmtk::util::heap::layout::map64","",90,[[]]],[11,"insert","","",90,[[["address",3],["spacedescriptor",3]]]],[11,"create_freelist","","",90,[[["commonfreelistpageresource",3]],["box",3]]],[11,"create_parent_freelist","","",90,[[["commonfreelistpageresource",3]],["box",3]]],[11,"allocate_contiguous_chunks","","",90,[[["address",3],["spacedescriptor",3]],["address",3]]],[11,"get_next_contiguous_region","","",90,[[["address",3]],["address",3]]],[11,"get_contiguous_region_chunks","","",90,[[["address",3]]]],[11,"get_contiguous_region_size","","",90,[[["address",3]]]],[11,"free_all_chunks","","",90,[[["address",3]]]],[11,"free_contiguous_chunks","","",90,[[["address",3]]]],[11,"boot","","",90,[[]]],[11,"finalize_static_space_map","","",90,[[["address",3]]]],[11,"is_finalized","","",90,[[]]],[11,"get_discontig_freelist_pr_ordinal","","",90,[[["commonfreelistpageresource",3]]]],[11,"get_descriptor_for_address","","",90,[[["address",3]],["spacedescriptor",3]]],[11,"add_to_cumulative_committed_pages","","",90,[[]]],[11,"get_cumulative_committed_pages","","",90,[[]]],[11,"common","mmtk::util::heap::freelistpageresource","",21,[[],["commonpageresource",3]]],[11,"common_mut","","",21,[[],["commonpageresource",3]]],[11,"alloc_pages","","",21,[[["opaquepointer",3]],["address",3]]],[11,"adjust_for_metadata","","",21,[[]]],[11,"common","mmtk::util::heap::monotonepageresource","",24,[[],["commonpageresource",3]]],[11,"common_mut","","",24,[[],["commonpageresource",3]]],[11,"reserve_pages","","",24,[[]]],[11,"alloc_pages","","",24,[[["opaquepointer",3]],["address",3]]],[11,"adjust_for_metadata","","",24,[[]]],[11,"start","mmtk::util::statistics::counter","",39,[[]]],[11,"stop","","",39,[[]]],[11,"phase_change","","",39,[[]]],[11,"print_count","","",39,[[]]],[11,"print_total","","",39,[[["option",4]]]],[11,"print_min","","",39,[[]]],[11,"print_max","","",39,[[]]],[11,"print_last","","",39,[[]]],[11,"merge_phases","","",39,[[]]],[11,"implicitly_start","","",39,[[]]],[11,"name","","",39,[[],["string",3]]],[11,"current_value","","",91,[[],["instant",3]]],[11,"diff","","",91,[[["instant",3]]]],[11,"print_diff","","",91,[[]]],[11,"prepare","mmtk","",1,[[["opaquepointer",3]]]],[11,"release","","",1,[[["opaquepointer",3]]]],[11,"alloc","","",1,[[["allocationtype",4]],["address",3]]],[11,"post_alloc","","",1,[[["objectreference",3],["allocationtype",4]]]],[11,"get_tls","","",1,[[],["opaquepointer",3]]],[11,"barrier","","",1,[[],["barrier",8]]],[11,"name","mmtk::policy::immortalspace","",51,[[]]],[11,"is_live","","",51,[[["objectreference",3]]]],[11,"is_movable","","",51,[[]]],[11,"initialize_header","","",51,[[["objectreference",3]]]],[11,"name","mmtk::policy::copyspace","",52,[[]]],[11,"is_live","","",52,[[["objectreference",3]]]],[11,"is_movable","","",52,[[]]],[11,"initialize_header","","",52,[[["objectreference",3]]]],[11,"name","mmtk::policy::largeobjectspace","",53,[[]]],[11,"is_live","","",53,[[["objectreference",3]]]],[11,"is_movable","","",53,[[]]],[11,"initialize_header","","",53,[[["objectreference",3]]]],[11,"as_space","mmtk::policy::immortalspace","",51,[[],["space",8]]],[11,"as_sft","","",51,[[],["sft",8]]],[11,"get_page_resource","","",51,[[],["pageresource",8]]],[11,"common","","",51,[[],["commonspace",3]]],[11,"unsafe_common_mut","","",51,[[],["commonspace",3]]],[11,"init","","",51,[[["vmmap",6]]]],[11,"release_multiple_pages","","",51,[[["address",3]]]],[11,"as_space","mmtk::policy::copyspace","",52,[[],["space",8]]],[11,"as_sft","","",52,[[],["sft",8]]],[11,"get_page_resource","","",52,[[],["pageresource",8]]],[11,"common","","",52,[[],["commonspace",3]]],[11,"unsafe_common_mut","","",52,[[],["commonspace",3]]],[11,"init","","",52,[[["vmmap",6]]]],[11,"release_multiple_pages","","",52,[[["address",3]]]],[11,"as_space","mmtk::policy::largeobjectspace","",53,[[],["space",8]]],[11,"as_sft","","",53,[[],["sft",8]]],[11,"get_page_resource","","",53,[[],["pageresource",8]]],[11,"init","","",53,[[["vmmap",6]]]],[11,"common","","",53,[[],["commonspace",3]]],[11,"unsafe_common_mut","","",53,[[],["commonspace",3]]],[11,"release_multiple_pages","","",53,[[["address",3]]]],[11,"spawn_worker","mmtk","",0,[[["gcworker",6],["opaquepointer",3]]]],[11,"do_work","mmtk::scheduler::gc_works","",92,[[["mmtk",3],["gcworker",6]]]],[11,"do_work","","",61,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",62,[[["mmtk",3],["gcworker",6]]]],[11,"do_work","","",93,[[["mmtk",3],["gcworker",6]]]],[11,"do_work","","",63,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",64,[[["mmtk",3],["gcworker",6]]]],[11,"do_work","","",94,[[["mmtk",3],["gcworker",6]]]],[11,"do_work","","",68,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",95,[[["mmtk",3],["gcworker",6]]]],[11,"do_work","","",69,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",65,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",70,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",71,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",72,[[["gcworker",6],["mmtk",3]]]],[11,"clone","mmtk::util::address","",3,[[],["address",3]]],[11,"clone","","",4,[[],["objectreference",3]]],[11,"clone","mmtk::util::alloc::allocators","",8,[[],["allocatorselector",4]]],[11,"clone","mmtk::util::heap::space_descriptor","",27,[[],["spacedescriptor",3]]],[11,"clone","mmtk::util::heap","",13,[[],["vmrequest",4]]],[11,"clone","mmtk::util::opaque_pointer","",29,[[],["opaquepointer",3]]],[11,"clone","mmtk::util::options","",31,[[],["nurseryzeroingoptions",4]]],[11,"clone","mmtk","",2,[[],["allocationsemantics",4]]],[11,"default","mmtk::util::heap::layout","",18,[[]]],[11,"default","mmtk::util::heap::layout::map64","",90,[[]]],[11,"default","mmtk::util::opaque_pointer","",29,[[]]],[11,"default","mmtk::util::options","",30,[[]]],[11,"default","mmtk::util::queue","",34,[[]]],[11,"default","mmtk::util::reference_processor","",37,[[]]],[11,"default","mmtk::util::statistics::stats","",42,[[]]],[11,"default","mmtk::util::treadmill","",45,[[]]],[11,"default","mmtk","",0,[[]]],[11,"default","mmtk::policy::space","",50,[[],["sftmap",3]]],[11,"default","mmtk::scheduler::stat","",58,[[],["schedulerstat",3]]],[11,"default","","",60,[[],["workerlocalstat",3]]],[11,"default","mmtk::scheduler::gc_works","",93,[[],["preparecollector",3]]],[11,"default","","",94,[[],["releasecollector",3]]],[11,"default","","",68,[[],["stopmutators",3]]],[11,"default","","",95,[[],["endofgc",3]]],[11,"default","","",69,[[],["scanstackroots",3]]],[11,"default","","",70,[[],["scanvmspecificroots",3]]],[11,"default","","",66,[[]]],[11,"default","","",72,[[],["processmodbuf",3]]],[11,"eq","mmtk::util::address","",3,[[["address",3]]]],[11,"ne","","",3,[[["address",3]]]],[11,"eq","","",4,[[["objectreference",3]]]],[11,"ne","","",4,[[["objectreference",3]]]],[11,"eq","mmtk::util::heap::space_descriptor","",27,[[["spacedescriptor",3]]]],[11,"ne","","",27,[[["spacedescriptor",3]]]],[11,"eq","mmtk::util::opaque_pointer","",29,[[["opaquepointer",3]]]],[11,"ne","","",29,[[["opaquepointer",3]]]],[11,"eq","mmtk::util::reference_processor","",36,[[["semantics",4]]]],[11,"partial_cmp","mmtk::util::address","",3,[[["address",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["address",3]]]],[11,"le","","",3,[[["address",3]]]],[11,"gt","","",3,[[["address",3]]]],[11,"ge","","",3,[[["address",3]]]],[11,"partial_cmp","","",4,[[["objectreference",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["objectreference",3]]]],[11,"le","","",4,[[["objectreference",3]]]],[11,"gt","","",4,[[["objectreference",3]]]],[11,"ge","","",4,[[["objectreference",3]]]],[11,"deref","mmtk::util::heap::freelistpageresource","",21,[[],["commonfreelistpageresource",3]]],[11,"deref","mmtk::util::options","",32,[[],["options",3]]],[11,"deref_mut","mmtk::util::heap::freelistpageresource","",21,[[],["commonfreelistpageresource",3]]],[11,"fmt","mmtk::util::address","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap::layout","",18,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap::space_descriptor","",27,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap","",13,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::int_array_freelist","",28,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::opaque_pointer","",29,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::raw_memory_freelist","",35,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::reference_processor","",36,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::statistics::counter","",39,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::treadmill","",45,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk","",2,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::address","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"sub","","",3,[[["bytesize",6]],["address",3]]],[11,"sub","","",3,[[["address",3]],["bytesize",6]]],[11,"add","","",3,[[["bytesize",6]],["address",3]]],[11,"add","","",3,[[["byteoffset",6]],["address",3]]],[11,"add_assign","","",3,[[["bytesize",6]]]],[11,"add_assign","","",3,[[["byteoffset",6]]]],[11,"sub_assign","","",3,[[["bytesize",6]]]],[11,"bitand","","",3,[[]]],[11,"bitand","","",3,[[]]],[11,"bitor","","",3,[[]]],[11,"bitor","","",3,[[]]],[11,"shr","","",3,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"from_str","mmtk::util::options","",31,[[],["result",4]]],[11,"fmt","mmtk::util::address","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"slice","mmtk","",2,[[]]],[11,"slice_mut","","",2,[[]]],[11,"from_usize","","",2,[[]]],[11,"to_usize","","",2,[[]]],[11,"from_function","","",2,[[["fnmut",8]]]],[18,"MAX_NON_LOS_COPY_BYTES","","",83,null],[11,"post_copy","","",83,[[["address",3],["allocationsemantics",4],["objectreference",3]]]],[11,"copy_check_allocator","","",83,[[["allocationsemantics",4],["objectreference",3]],["allocationsemantics",4]]],[11,"common","","",85,[[],["commonplan",3]]],[11,"mmapper","","",85,[[],["mmapper",6]]],[11,"options","","",85,[[],["options",3]]],[11,"in_nursery","","",85,[[]]],[11,"is_initialized","","",85,[[]]],[11,"poll","","",85,[[["space",8]]]],[11,"log_poll","","",85,[[["space",8]]]],[11,"collection_required","","This method controls the triggering of a GC. It is called…",85,[[["space",8]]]],[11,"get_pages_reserved","","",85,[[]]],[11,"get_total_pages","","",85,[[]]],[11,"get_pages_avail","","",85,[[]]],[11,"get_collection_reserve","","",85,[[]]],[11,"is_emergency_collection","","",85,[[]]],[11,"get_free_pages","","",85,[[]]],[11,"stress_test_gc_required","","",85,[[]]],[11,"handle_user_collection_request","","",85,[[["opaquepointer",3]]]],[11,"reset_collection_trigger","","",85,[[]]],[11,"modify_check","","",85,[[["objectreference",3]]]],[11,"flush_remembered_sets","","",84,[[]]],[11,"flush","","",84,[[]]],[11,"record_modified_node","","",84,[[["objectreference",3]]]],[11,"record_modified_edge","","",84,[[["address",3]]]],[11,"overwrite_reference_during_trace","","",86,[[]]],[11,"get_forwarded_reference","","",86,[[["objectreference",3]],["objectreference",3]]],[11,"get_forwarded_referent","","",86,[[["objectreference",3]],["objectreference",3]]],[11,"retain_referent","","",86,[[["objectreference",3]],["objectreference",3]]],[11,"spawn_worker","mmtk::scheduler","",73,[[["worker",3],["opaquepointer",3]]]],[11,"init","","",74,[[["opaquepointer",3]]]],[11,"notify_mutators_paused","","",96,[[["mmtk",3]]]],[11,"do_work_with_stat","","",75,[[["worker",3]]]],[11,"mutators","mmtk::vm","A utility method to provide a thread-safe mutator iterator…",77,[[],["synchronizedmutatoriterator",3]]],[11,"out_of_memory","","Inform the VM for an out-of-memory error. The VM can…",78,[[["opaquepointer",3]]]],[18,"HAS_GC_BYTE","","Whether an exclusive GC byte in each object\'s header word…",79,null],[18,"GC_BYTE_OFFSET","","The offset of the GC byte from the object reference, in…",79,null],[11,"clear_referent","","Weak and soft references always clear the referent before…",80,[[["objectreference",3]]]],[18,"SCAN_MUTATORS_IN_SAFEPOINT","","Scan stack roots after all mutators are paused.",81,null],[18,"SINGLE_THREAD_MUTATOR_SCANNING","","Scan all the mutators within a single work packet.",81,null]],"p":[[3,"MMTK"],[3,"Mutator"],[4,"AllocationSemantics"],[3,"Address"],[3,"ObjectReference"],[3,"BumpAllocator"],[8,"Allocator"],[3,"Allocators"],[4,"AllocatorSelector"],[3,"LargeObjectAllocator"],[8,"LinearScan"],[8,"GenericFreeList"],[3,"HeapMeta"],[4,"VMRequest"],[13,"RequestFixed"],[13,"RequestExtent"],[13,"RequestFraction"],[8,"Mmapper"],[3,"FragmentedMapper"],[8,"Map"],[3,"CommonFreeListPageResource"],[3,"FreeListPageResource"],[4,"MonotonePageResourceConditional"],[13,"Contiguous"],[3,"MonotonePageResource"],[3,"CommonPageResource"],[8,"PageResource"],[3,"SpaceDescriptor"],[3,"IntArrayFreeList"],[3,"OpaquePointer"],[3,"Options"],[4,"NurseryZeroingOptions"],[3,"UnsafeOptionsWrapper"],[3,"LocalQueue"],[3,"SharedQueue"],[3,"RawMemoryFreeList"],[4,"Semantics"],[3,"ReferenceProcessors"],[3,"ReferenceProcessor"],[3,"LongCounter"],[8,"Counter"],[8,"Diffable"],[3,"Stats"],[3,"SharedStats"],[3,"SynchronizedCounter"],[3,"TreadMill"],[3,"CommonSpace"],[3,"SpaceOptions"],[8,"SFT"],[8,"Space"],[3,"SFTMap"],[3,"ImmortalSpace"],[3,"CopySpace"],[3,"LargeObjectSpace"],[3,"Scheduler"],[3,"Worker"],[3,"WorkerGroup"],[4,"CoordinatorMessage"],[3,"SchedulerStat"],[3,"WorkStat"],[3,"WorkerLocalStat"],[3,"Prepare"],[3,"PrepareMutator"],[3,"Release"],[3,"ReleaseMutator"],[3,"ScanStackRoot"],[3,"ProcessEdgesBase"],[8,"ProcessEdgesWork"],[3,"StopMutators"],[3,"ScanStackRoots"],[3,"ScanVMSpecificRoots"],[3,"ScanObjects"],[3,"ProcessModBuf"],[8,"Context"],[8,"WorkerLocal"],[8,"Work"],[8,"GCWork"],[8,"ActivePlan"],[8,"Collection"],[8,"ObjectModel"],[8,"ReferenceGlue"],[8,"Scanning"],[8,"VMBinding"],[8,"CopyContext"],[8,"MutatorContext"],[8,"Plan"],[8,"TraceLocal"],[8,"TransitiveClosure"],[3,"DumpLinearScan"],[3,"GCByte"],[3,"Map64"],[3,"MonotoneNanoTime"],[3,"ScheduleCollection"],[3,"PrepareCollector"],[3,"ReleaseCollector"],[3,"EndOfGC"],[6,"MMTkScheduler"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);