var searchIndex = JSON.parse('{\
"mmtk":{"doc":"Memory Management ToolKit (MMTk) is a portable and high …","i":[[0,"mmtk","mmtk","",null,null],[3,"VM_MAP","mmtk::mmtk","A global VMMap that manages the mapping of spaces to …",null,null],[12,"__private_field","","",0,null],[3,"MMAPPER","","A global Mmapper for mmaping and protection of virtual …",null,null],[12,"__private_field","","",1,null],[3,"SFT_MAP","","",null,null],[12,"__private_field","","",2,null],[3,"MMTK","","An MMTk instance. MMTk allows multiple instances to run …",null,null],[12,"plan","","",3,null],[12,"reference_processors","","",3,null],[12,"finalizable_processor","","",3,null],[12,"options","","",3,null],[12,"scheduler","","",3,null],[12,"sanity_checker","","",3,null],[12,"inside_harness","","",3,null],[11,"new","","",3,[[]]],[11,"harness_begin","","",3,[[["vmmutatorthread",3]]]],[11,"harness_end","","",3,[[]]],[11,"get_plan","","",3,[[],["plan",8]]],[0,"policy","mmtk","Memory policies that can be used for spaces.",null,null],[0,"space","mmtk::policy","This class defines and manages spaces.  Each policy is an …",null,null],[8,"SFT","mmtk::policy::space","Space Function Table (SFT).",null,null],[10,"name","","The space name",4,[[]]],[10,"is_live","","Is the object live, determined by the policy?",4,[[["objectreference",3]]]],[10,"is_movable","","Is the object movable, determined by the policy? E.g. the …",4,[[]]],[10,"is_sane","","Is the object sane? A policy should return false if there …",4,[[]]],[10,"initialize_object_metadata","","Initialize object metadata (in the header, or in the side …",4,[[["objectreference",3]]]],[17,"DEBUG_SFT","","Print debug info for SFT. Should be false when committed.",null,null],[3,"EmptySpaceSFT","","",null,null],[17,"EMPTY_SFT_NAME","","",null,null],[3,"SFTMap","","",null,null],[12,"sft","","",5,null],[7,"EMPTY_SPACE_SFT","","",null,null],[11,"new","","",5,[[]]],[11,"mut_self","","",5,[[]]],[11,"get","","",5,[[["address",3]],["sft",8]]],[11,"log_update","","",5,[[["address",3],["sft",8]]]],[11,"trace_sft_map","","",5,[[]]],[11,"update","","Update SFT map for the given address range. It should be …",5,[[["address",3],["sft",8]]]],[11,"clear","","",5,[[]]],[11,"set","","",5,[[["sft",8]]]],[11,"is_in_space","","",5,[[["objectreference",3]]]],[8,"Space","","",null,null],[10,"as_space","","",6,[[],["space",8]]],[10,"as_sft","","",6,[[],["sft",8]]],[10,"get_page_resource","","",6,[[],["pageresource",8]]],[10,"init","","",6,[[["map64",3]]]],[11,"acquire","","",6,[[["vmthread",3]],["address",3]]],[11,"address_in_space","","",6,[[["address",3]]]],[11,"in_space","","",6,[[["objectreference",3]]]],[11,"grow_space","","This is called after we get result from page resources.  …",6,[[["address",3]]]],[11,"ensure_mapped","","Ensure this space is marked as mapped -- used when the …",6,[[]]],[11,"reserved_pages","","",6,[[]]],[11,"get_name","","",6,[[]]],[10,"common","","",6,[[],["commonspace",3]]],[10,"release_multiple_pages","","",6,[[["address",3]]]],[11,"print_vm_map","","",6,[[]]],[11,"local_side_metadata_specs","","",6,[[]]],[11,"is","","Returns true if the trait object wraps an object of type …",6,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the …",6,[[["box",3]],[["box",3],["result",4],["box",3]]]],[11,"downcast_rc","","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …",6,[[["rc",3]],[["rc",3],["rc",3],["result",4]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object …",6,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the …",6,[[],["option",4]]],[3,"CommonSpace","","",null,null],[12,"name","","",7,null],[12,"descriptor","","",7,null],[12,"vmrequest","","",7,null],[12,"immortal","","",7,null],[12,"movable","","",7,null],[12,"contiguous","","",7,null],[12,"zeroed","","",7,null],[12,"start","","",7,null],[12,"extent","","",7,null],[12,"head_discontiguous_region","","",7,null],[12,"vm_map","","",7,null],[12,"mmapper","","",7,null],[12,"metadata","","",7,null],[12,"p","","",7,null],[3,"SpaceOptions","","",null,null],[12,"name","","",8,null],[12,"movable","","",8,null],[12,"immortal","","",8,null],[12,"zeroed","","",8,null],[12,"vmrequest","","",8,null],[12,"side_metadata_specs","","",8,null],[17,"DEBUG_SPACE","","Print debug info for SFT. Should be false when committed.",null,null],[11,"new","","",7,[[["spaceoptions",3],["map64",3],["heapmeta",3],["fragmentedmapper",3]]]],[11,"init","","",7,[[["space",8]]]],[11,"vm_map","","",7,[[],["map64",3]]],[5,"get_frac_available","","",null,[[]]],[5,"required_chunks","","",null,[[]]],[0,"copyspace","mmtk::policy","",null,null],[17,"META_DATA_PAGES_PER_REGION","mmtk::policy::copyspace","",null,null],[3,"CopySpace","","This type implements a simple copying space.",null,null],[12,"common","","",9,null],[12,"pr","","",9,null],[12,"from_space","","",9,null],[11,"new","","",9,[[["vec",3],["fragmentedmapper",3],["map64",3],["heapmeta",3],["vmrequest",4],["sidemetadataspec",3]]]],[11,"prepare","","",9,[[]]],[11,"release","","",9,[[]]],[11,"from_space","","",9,[[]]],[11,"trace_object","","",9,[[["allocationsemantics",4],["objectreference",3]],["objectreference",3]]],[11,"protect","","",9,[[]]],[11,"unprotect","","",9,[[]]],[0,"immortalspace","mmtk::policy","",null,null],[3,"ImmortalSpace","mmtk::policy::immortalspace","This type implements a simple immortal collection policy. …",null,null],[12,"mark_state","","",10,null],[12,"common","","",10,null],[12,"pr","","",10,null],[12,"header_byte","","",10,null],[17,"GC_MARK_BIT_MASK","","",null,null],[17,"META_DATA_PAGES_PER_REGION","","",null,null],[11,"new","","",10,[[["vec",3],["fragmentedmapper",3],["planconstraints",3],["map64",3],["heapmeta",3],["vmrequest",4],["sidemetadataspec",3]]]],[11,"test_and_mark","","",10,[[["objectreference",3]]]],[11,"prepare","","",10,[[]]],[11,"release","","",10,[[]]],[11,"trace_object","","",10,[[["objectreference",3]],["objectreference",3]]],[0,"largeobjectspace","mmtk::policy","",null,null],[17,"PAGE_MASK","mmtk::policy::largeobjectspace","",null,null],[17,"MARK_BIT","","",null,null],[17,"NURSERY_BIT","","",null,null],[17,"LOS_BIT_MASK","","",null,null],[17,"USE_PRECEEDING_GC_HEADER","","",null,null],[17,"PRECEEDING_GC_HEADER_WORDS","","",null,null],[17,"PRECEEDING_GC_HEADER_BYTES","","",null,null],[3,"LargeObjectSpace","","This type implements a policy for large objects. Each …",null,null],[12,"common","","",11,null],[12,"pr","","",11,null],[12,"mark_state","","",11,null],[12,"in_nursery_gc","","",11,null],[12,"treadmill","","",11,null],[12,"header_byte","","",11,null],[11,"new","","",11,[[["vec",3],["fragmentedmapper",3],["planconstraints",3],["map64",3],["heapmeta",3],["vmrequest",4],["sidemetadataspec",3]]]],[11,"prepare","","",11,[[]]],[11,"release","","",11,[[]]],[11,"trace_object","","",11,[[["objectreference",3]],["objectreference",3]]],[11,"sweep_large_pages","","",11,[[]]],[11,"allocate_pages","","",11,[[["vmthread",3]],["address",3]]],[11,"test_and_mark","","",11,[[["objectreference",3]]]],[11,"test_mark_bit","","",11,[[["objectreference",3]]]],[11,"is_in_nursery","","",11,[[["objectreference",3]]]],[5,"get_super_page","","",null,[[["address",3]],["address",3]]],[0,"lockfreeimmortalspace","mmtk::policy","",null,null],[3,"LockFreeImmortalSpace","mmtk::policy::lockfreeimmortalspace","This type implements a lock free version of the immortal …",null,null],[12,"name","","",12,null],[12,"cursor","","Heap range start",12,null],[12,"limit","","Heap range end",12,null],[12,"slow_path_zeroing","","Zero memory after slow-path allocation",12,null],[12,"metadata","","",12,null],[12,"phantom","","",12,null],[11,"new","","",12,[[["vec",3],["sidemetadataspec",3]]]],[0,"mallocspace","mmtk::policy","",null,null],[0,"global","mmtk::policy::mallocspace","! A marksweep space that allocates from malloc.",null,null],[17,"ASSERT_ALLOCATION","mmtk::policy::mallocspace::global","",null,null],[3,"MallocSpace","","",null,null],[12,"phantom","","",13,null],[12,"active_bytes","","",13,null],[12,"metadata","","",13,null],[12,"active_mem","","",13,null],[11,"new","","",13,[[["vec",3],["sidemetadataspec",3]]]],[11,"alloc","","",13,[[["vmthread",3]],["address",3]]],[11,"free","","",13,[[["address",3]]]],[11,"trace_object","","",13,[[["objectreference",3]],["objectreference",3]]],[11,"release_all_chunks","","",13,[[]]],[0,"metadata","mmtk::policy::mallocspace","",null,null],[3,"ACTIVE_CHUNKS","mmtk::policy::mallocspace::metadata","",null,null],[12,"__private_field","","",14,null],[17,"ASSERT_METADATA","","",null,null],[3,"ALLOC_MAP","","",null,null],[12,"__private_field","","",15,null],[3,"MARK_MAP","","",null,null],[12,"__private_field","","",16,null],[17,"ALLOC_METADATA_SPEC","","",null,null],[17,"MARKING_METADATA_SPEC","","",null,null],[5,"is_meta_space_mapped","","",null,[[["address",3]]]],[5,"map_meta_space_for_chunk","","",null,[[["sidemetadata",3],["address",3]]]],[5,"is_alloced_by_malloc","","",null,[[["objectreference",3]]]],[5,"is_alloced","","",null,[[["objectreference",3]]]],[5,"is_alloced_object","","",null,[[["address",3]]]],[5,"is_marked","","",null,[[["objectreference",3]]]],[5,"set_alloc_bit","","",null,[[["objectreference",3]]]],[5,"set_mark_bit","","",null,[[["objectreference",3]]]],[5,"unset_alloc_bit","","",null,[[["objectreference",3]]]],[5,"unset_mark_bit","","",null,[[["objectreference",3]]]],[0,"memory_manager","mmtk","VM-to-MMTk interface: safe Rust APIs.",null,null],[5,"start_control_collector","mmtk::memory_manager","Run the main loop for the GC controller thread. This …",null,[[["vmworkerthread",3],["mmtk",3]]]],[5,"gc_init","","Initialize an MMTk instance. A VM should call this method …",null,[[["mmtk",3]]]],[5,"bind_mutator","","Request MMTk to create a mutator for the given thread. …",null,[[["vmmutatorthread",3],["mmtk",3]],[["box",3],["mutator",3]]]],[5,"destroy_mutator","","Reclaim a mutator that is no longer needed.",null,[[["box",3],["mutator",3]]]],[5,"flush_mutator","","Flush the mutator\'s local states.",null,[[["mutator",3]]]],[5,"alloc","","Allocate memory for an object. For performance reasons, a …",null,[[["mutator",3],["allocationsemantics",4]],["address",3]]],[5,"post_alloc","","Perform post-allocation actions, usually initializing …",null,[[["mutator",3],["allocationsemantics",4],["objectreference",3]]]],[5,"get_allocator_mapping","","Return an AllocatorSelector for the given allocation …",null,[[["allocationsemantics",4],["mmtk",3]],["allocatorselector",4]]],[5,"start_worker","","Run the main loop of a GC worker. This method does not …",null,[[["gcworker",6],["vmworkerthread",3],["mmtk",3]]]],[5,"enable_collection","","Allow MMTk to trigger garbage collection. A VM should …",null,[[["vmthread",3],["mmtk",3]]]],[5,"process","","Process MMTk run-time options.",null,[[["mmtk",3]]]],[5,"used_bytes","","Return used memory in bytes.",null,[[["mmtk",3]]]],[5,"free_bytes","","Return free memory in bytes.",null,[[["mmtk",3]]]],[5,"starting_heap_address","","Return the starting address of the heap. <em>Note that …",null,[[],["address",3]]],[5,"last_heap_address","","Return the ending address of the heap. <em>Note that …",null,[[],["address",3]]],[5,"total_bytes","","Return the total memory in bytes.",null,[[["mmtk",3]]]],[5,"handle_user_collection_request","","Trigger a garbage collection as requested by the user.",null,[[["vmmutatorthread",3],["mmtk",3]]]],[5,"is_live_object","","Is the object alive?",null,[[["objectreference",3]]]],[5,"is_mapped_object","","Is the object in the mapped memory? The runtime can use …",null,[[["objectreference",3]]]],[5,"is_mapped_address","","Is the address in the mapped memory? The runtime can use …",null,[[["address",3]]]],[5,"modify_check","","Check that if a garbage collection is in progress and if …",null,[[["objectreference",3],["mmtk",3]]]],[5,"add_weak_candidate","","Add a reference to the list of weak references.",null,[[["objectreference",3],["mmtk",3]]]],[5,"add_soft_candidate","","Add a reference to the list of soft references.",null,[[["objectreference",3],["mmtk",3]]]],[5,"add_phantom_candidate","","Add a reference to the list of phantom references.",null,[[["objectreference",3],["mmtk",3]]]],[5,"harness_begin","","Generic hook to allow benchmarks to be harnessed. We do a …",null,[[["vmmutatorthread",3],["mmtk",3]]]],[5,"harness_end","","Generic hook to allow benchmarks to be harnessed. We stop …",null,[[["mmtk",3]]]],[5,"add_finalizer","","Register a finalizable object. MMTk will retain the …",null,[[["objectreference",3],["mmtk",3]]]],[5,"get_finalized_object","","Get an object that is ready for finalization. After each …",null,[[["mmtk",3]],[["objectreference",3],["option",4]]]],[5,"num_of_workers","","Get the number of workers. MMTk spawns worker threads for …",null,[[["mmtk",3]]]],[5,"add_work_packet","","Add a work packet to the given work bucket. Note that …",null,[[["mmtk",3],["mmtk",3],["workbucketstage",4],["work",8]]]],[5,"add_work_packets","","Bulk add a number of work packets to the given work …",null,[[["mmtk",3],["workbucketstage",4],["vec",3],["box",3]]]],[0,"plan","mmtk","GC algorithms from the MMTk suite.",null,null],[0,"barriers","mmtk::plan","Read/Write barrier implementations.",null,null],[4,"BarrierSelector","mmtk::plan::barriers","BarrierSelector describes which barrier to use.",null,null],[13,"NoBarrier","","",17,null],[13,"ObjectBarrier","","",17,null],[4,"WriteTarget","","For field writes in HotSpot, we cannot always get the …",null,null],[13,"Object","","",18,null],[13,"Slot","","",18,null],[8,"Barrier","","",null,null],[10,"flush","","",19,[[]]],[10,"post_write_barrier","","",19,[[["writetarget",4]]]],[3,"NoBarrier","","",null,null],[3,"ObjectRememberingBarrier","","",null,null],[12,"mmtk","","",20,null],[12,"modbuf","","",20,null],[12,"meta","","",20,null],[11,"new","","",20,[[["mmtk",3],["sidemetadataspec",3]]]],[11,"enqueue_node","","",20,[[["objectreference",3]]]],[0,"controller_collector_context","mmtk::plan","The GC controller thread.",null,null],[3,"RequestSync","mmtk::plan::controller_collector_context","",null,null],[12,"tls","","",21,null],[12,"request_count","","",21,null],[12,"last_request_count","","",21,null],[3,"ControllerCollectorContext","","",null,null],[12,"request_sync","","",22,null],[12,"request_condvar","","",22,null],[12,"scheduler","","",22,null],[12,"request_flag","","",22,null],[12,"phantom","","",22,null],[11,"new","","",22,[[]]],[11,"init","","",22,[[["arc",3]]]],[11,"run","","",22,[[["vmworkerthread",3]]]],[11,"request","","",22,[[]]],[11,"clear_request","","",22,[[]]],[11,"wait_for_request","","",22,[[]]],[0,"global","mmtk::plan","The global part of a plan implementation.",null,null],[8,"CopyContext","mmtk::plan::global","A GC worker\'s context for copying GCs. Each GC plan …",null,null],[16,"VM","","",23,null],[10,"constraints","","",23,[[],["planconstraints",3]]],[10,"init","","",23,[[["vmworkerthread",3]]]],[10,"prepare","","",23,[[]]],[10,"release","","",23,[[]]],[10,"alloc_copy","","",23,[[["allocationsemantics",4],["objectreference",3]],["address",3]]],[11,"post_copy","","",23,[[["allocationsemantics",4],["objectreference",3],["address",3]]]],[11,"copy_check_allocator","","",23,[[["allocationsemantics",4],["objectreference",3]],["allocationsemantics",4]]],[3,"NoCopy","","",null,null],[12,"0","","",24,null],[11,"new","","",24,[[["mmtk",3]]]],[5,"create_mutator","","",null,[[["vmmutatorthread",3],["mmtk",3]],[["box",3],["mutator",3]]]],[5,"create_plan","","",null,[[["planselector",4],["unsafeoptionswrapper",3],["map64",3],["arc",3],["fragmentedmapper",3]],[["box",3],["plan",8]]]],[8,"Plan","","A plan describes the global core functionality for all …",null,null],[16,"VM","","",25,null],[10,"constraints","","",25,[[],["planconstraints",3]]],[10,"create_worker_local","","",25,[[["vmworkerthread",3],["mmtk",3]],["workerlocalptr",3]]],[10,"base","","",25,[[],["baseplan",3]]],[10,"schedule_collection","","",25,[[["scheduler",3]]]],[11,"common","","",25,[[],["commonplan",3]]],[11,"mmapper","","",25,[[],["fragmentedmapper",3]]],[11,"options","","",25,[[],["options",3]]],[10,"gc_init","","",25,[[["map64",3],["arc",3]]]],[10,"get_allocator_mapping","","",25,[[],["enummap",3]]],[11,"in_nursery","","",25,[[]]],[11,"enter_sanity","","",25,[[]]],[11,"leave_sanity","","",25,[[]]],[11,"is_in_sanity","","",25,[[]]],[11,"is_initialized","","",25,[[]]],[10,"prepare","","",25,[[["vmworkerthread",3]]]],[10,"release","","",25,[[["vmworkerthread",3]]]],[11,"poll","","",25,[[["space",8]]]],[11,"log_poll","","",25,[[["space",8]]]],[10,"collection_required","","This method controls the triggering of a GC. It is called …",25,[[["space",8]]]],[11,"get_pages_reserved","","",25,[[]]],[11,"get_total_pages","","",25,[[]]],[11,"get_pages_avail","","",25,[[]]],[11,"get_collection_reserve","","",25,[[]]],[10,"get_pages_used","","",25,[[]]],[11,"is_emergency_collection","","",25,[[]]],[11,"get_free_pages","","",25,[[]]],[11,"handle_user_collection_request","","",25,[[["vmmutatorthread",3]]]],[11,"reset_collection_trigger","","",25,[[]]],[11,"modify_check","","",25,[[["objectreference",3]]]],[11,"is","","Returns true if the trait object wraps an object of type …",25,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the …",25,[[["box",3]],[["box",3],["result",4],["box",3]]]],[11,"downcast_rc","","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …",25,[[["rc",3]],[["rc",3],["rc",3],["result",4]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object …",25,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the …",25,[[],["option",4]]],[4,"GcStatus","","",null,null],[13,"NotInGC","","",26,null],[13,"GcPrepare","","",26,null],[13,"GcProper","","",26,null],[3,"BasePlan","","BasePlan should contain all plan-related state and …",null,null],[12,"initialized","","",27,null],[12,"gc_status","","",27,null],[12,"last_stress_pages","","",27,null],[12,"stacks_prepared","","",27,null],[12,"emergency_collection","","",27,null],[12,"user_triggered_collection","","",27,null],[12,"allocation_success","","",27,null],[12,"max_collection_attempts","","",27,null],[12,"cur_collection_attempts","","",27,null],[12,"control_collector_context","","",27,null],[12,"stats","","",27,null],[12,"mmapper","","",27,null],[12,"vm_map","","",27,null],[12,"options","","",27,null],[12,"heap","","",27,null],[12,"inside_sanity","","",27,null],[12,"scanned_stacks","","",27,null],[12,"mutator_iterator_lock","","",27,null],[12,"allocation_bytes","","",27,null],[12,"analysis_manager","","",27,null],[12,"code_space","","",27,null],[12,"ro_space","","",27,null],[12,"vm_space","","",27,null],[5,"create_vm_space","","",null,[[["planconstraints",3],["vec",3],["sidemetadataspec",3],["map64",3],["heapmeta",3],["fragmentedmapper",3]],[["immortalspace",3],["vmbinding",8]]]],[11,"new","","",27,[[["planconstraints",3],["vec",3],["sidemetadataspec",3],["unsafeoptionswrapper",3],["heapmeta",3],["arc",3],["map64",3],["fragmentedmapper",3]],["baseplan",3]]],[11,"gc_init","","",27,[[["map64",3],["arc",3]]]],[11,"get_pages_used","","",27,[[]]],[11,"trace_object","","",27,[[["objectreference",3]],["objectreference",3]]],[11,"prepare","","",27,[[["vmworkerthread",3]]]],[11,"release","","",27,[[["vmworkerthread",3]]]],[11,"set_collection_kind","","",27,[[]]],[11,"set_gc_status","","",27,[[["gcstatus",4]]]],[11,"stacks_prepared","","",27,[[]]],[11,"gc_in_progress","","",27,[[]]],[11,"gc_in_progress_proper","","",27,[[]]],[11,"is_user_triggered_collection","","",27,[[]]],[11,"determine_collection_attempts","","",27,[[]]],[11,"is_internal_triggered_collection","","",27,[[]]],[11,"last_collection_was_exhaustive","","",27,[[]]],[11,"force_full_heap_collection","","",27,[[]]],[11,"increase_allocation_bytes_by","","",27,[[]]],[11,"stress_test_gc_required","","",27,[[]]],[11,"collection_required","","",27,[[["space",8]]]],[3,"CommonPlan","","CommonPlan is for representing state and features used by <em>…",null,null],[12,"immortal","","",28,null],[12,"los","","",28,null],[12,"base","","",28,null],[11,"new","","",28,[[["planconstraints",3],["vec",3],["sidemetadataspec",3],["unsafeoptionswrapper",3],["heapmeta",3],["arc",3],["map64",3],["fragmentedmapper",3]],["commonplan",3]]],[11,"gc_init","","",28,[[["map64",3],["arc",3]]]],[11,"get_pages_used","","",28,[[]]],[11,"trace_object","","",28,[[["objectreference",3]],["objectreference",3]]],[11,"prepare","","",28,[[["vmworkerthread",3]]]],[11,"release","","",28,[[["vmworkerthread",3]]]],[11,"schedule_common","","",28,[[["planconstraints",3],["scheduler",3]]]],[11,"stacks_prepared","","",28,[[]]],[11,"get_immortal","","",28,[[],["immortalspace",3]]],[11,"get_los","","",28,[[],["largeobjectspace",3]]],[4,"AllocationSemantics","","Allocation semantics that MMTk provides. Each allocation …",null,null],[13,"Default","","",29,null],[13,"Immortal","","",29,null],[13,"Los","","",29,null],[13,"Code","","",29,null],[13,"ReadOnly","","",29,null],[0,"mutator_context","mmtk::plan","Mutator context for each application thread.",null,null],[6,"SpaceMapping","mmtk::plan::mutator_context","",null,null],[3,"MutatorConfig","","",null,null],[12,"allocator_mapping","","Mapping between allocation semantics and allocator …",30,null],[12,"space_mapping","","Mapping between allocator selector and spaces. Each pair …",30,null],[12,"prepare_func","","Plan-specific code for mutator prepare. The …",30,null],[12,"release_func","","Plan-specific code for mutator release. The …",30,null],[3,"Mutator","","A mutator is a per-thread data structure that manages …",null,null],[12,"allocators","","",31,null],[12,"barrier","","",31,null],[12,"mutator_tls","","The mutator thread that is bound with this Mutator struct.",31,null],[12,"plan","","",31,null],[12,"config","","",31,null],[8,"MutatorContext","","Each GC plan should provide their implementation of a …",null,null],[10,"prepare","","",32,[[["vmworkerthread",3]]]],[10,"release","","",32,[[["vmworkerthread",3]]]],[10,"alloc","","",32,[[["allocationtype",4]],["address",3]]],[10,"post_alloc","","",32,[[["objectreference",3],["allocationtype",4]]]],[11,"flush_remembered_sets","","",32,[[]]],[11,"flush","","",32,[[]]],[10,"get_tls","","",32,[[],["vmmutatorthread",3]]],[10,"barrier","","",32,[[],["barrier",8]]],[11,"record_modified_node","","",32,[[["objectreference",3]]]],[0,"plan_constraints","mmtk::plan","Plan-specific constraints.",null,null],[3,"PlanConstraints","mmtk::plan::plan_constraints","This struct defines plan-specific constraints. Most of …",null,null],[12,"moves_objects","","",33,null],[12,"gc_header_bits","","",33,null],[12,"gc_header_words","","",33,null],[12,"num_specialized_scans","","",33,null],[12,"max_non_los_copy_bytes","","",33,null],[12,"needs_log_bit_in_header","","",33,null],[12,"needs_log_bit_in_header_num","","",33,null],[12,"barrier","","",33,null],[12,"needs_linear_scan","","",33,null],[12,"needs_concurrent_workers","","",33,null],[12,"generate_gc_trace","","",33,null],[12,"needs_forward_after_liveness","","",33,null],[11,"default","","",33,[[]]],[0,"tracelocal","mmtk::plan","Unsynchronized thread-local trace mechanism (superseded …",null,null],[8,"TraceLocal","mmtk::plan::tracelocal","This trait and its global counterpart implement the core …",null,null],[10,"process_roots","","",34,[[]]],[10,"process_root_edge","","",34,[[["address",3]]]],[10,"trace_object","","",34,[[["objectreference",3]],["objectreference",3]]],[10,"complete_trace","","",34,[[]]],[10,"release","","",34,[[]]],[10,"process_interior_edge","","",34,[[["objectreference",3],["address",3]]]],[11,"overwrite_reference_during_trace","","",34,[[]]],[10,"report_delayed_root_edge","","",34,[[["address",3]]]],[10,"will_not_move_in_current_collection","","",34,[[["objectreference",3]]]],[11,"get_forwarded_reference","","",34,[[["objectreference",3]],["objectreference",3]]],[11,"get_forwarded_referent","","",34,[[["objectreference",3]],["objectreference",3]]],[11,"retain_referent","","",34,[[["objectreference",3]],["objectreference",3]]],[0,"transitive_closure","mmtk::plan","The fundamental mechanism for performing a transitive …",null,null],[8,"TransitiveClosure","mmtk::plan::transitive_closure","This trait is the fundamental mechanism for performing a …",null,null],[10,"process_edge","","",35,[[["address",3]]]],[10,"process_node","","",35,[[["objectreference",3]]]],[0,"gencopy","mmtk::plan","Plan: generational copying",null,null],[0,"gc_work","mmtk::plan::gencopy","",null,null],[3,"GenCopyCopyContext","mmtk::plan::gencopy::gc_work","",null,null],[12,"plan","","",36,null],[12,"ss","","",36,null],[11,"new","","",36,[[["mmtk",3]]]],[3,"GenCopyNurseryProcessEdges","","",null,null],[12,"plan","","",37,null],[12,"base","","",37,null],[11,"gencopy","","",37,[[],["gencopy",3]]],[3,"GenCopyMatureProcessEdges","","",null,null],[12,"plan","","",38,null],[12,"base","","",38,null],[11,"gencopy","","",38,[[],["gencopy",3]]],[0,"global","mmtk::plan::gencopy","",null,null],[17,"ALLOC_SS","mmtk::plan::gencopy::global","",null,null],[17,"NURSERY_SIZE","","",null,null],[3,"GenCopy","","",null,null],[12,"nursery","","",39,null],[12,"hi","","",39,null],[12,"copyspace0","","",39,null],[12,"copyspace1","","",39,null],[12,"common","","",39,null],[12,"in_nursery","","",39,null],[17,"GENCOPY_CONSTRAINTS","","",null,null],[11,"new","","",39,[[["unsafeoptionswrapper",3],["map64",3],["arc",3],["fragmentedmapper",3]]]],[11,"request_full_heap_collection","","",39,[[]]],[11,"tospace","","",39,[[],["copyspace",3]]],[11,"fromspace","","",39,[[],["copyspace",3]]],[0,"mutator","mmtk::plan::gencopy","",null,null],[5,"gencopy_mutator_prepare","mmtk::plan::gencopy::mutator","",null,[[["mutator",3],["vmworkerthread",3]]]],[5,"gencopy_mutator_release","","",null,[[["mutator",3],["vmworkerthread",3]]]],[3,"ALLOCATOR_MAPPING","","",null,null],[12,"__private_field","","",40,null],[5,"create_gencopy_mutator","","",null,[[["vmmutatorthread",3],["mmtk",3]],[["vmbinding",8],["mutator",3]]]],[17,"ACTIVE_BARRIER","mmtk::plan::gencopy","Barrier overhead measurement:Set <code>FULL_NURSERY_GC</code> to <code>true</code>.…",null,null],[17,"FULL_NURSERY_GC","","Full heap collection as nursery GC.",null,null],[17,"NO_SLOW","","Force object barrier never enters the slow-path. If …",null,null],[17,"LOGGING_META","","",null,null],[0,"marksweep","mmtk::plan","Plan: marksweep (currently using malloc as its freelist …",null,null],[0,"gc_work","mmtk::plan::marksweep","",null,null],[3,"MSProcessEdges","mmtk::plan::marksweep::gc_work","",null,null],[12,"plan","","",41,null],[12,"base","","",41,null],[0,"global","mmtk::plan::marksweep","",null,null],[3,"MarkSweep","mmtk::plan::marksweep::global","",null,null],[12,"common","","",42,null],[12,"ms","","",42,null],[17,"MS_CONSTRAINTS","","",null,null],[11,"new","","",42,[[["unsafeoptionswrapper",3],["map64",3],["arc",3],["fragmentedmapper",3]]]],[11,"ms_space","","",42,[[],["mallocspace",3]]],[0,"mutator","mmtk::plan::marksweep","",null,null],[5,"ms_mutator_prepare","mmtk::plan::marksweep::mutator","",null,[[["mutator",3],["vmworkerthread",3]]]],[5,"ms_mutator_release","","",null,[[["mutator",3],["vmworkerthread",3]]]],[3,"ALLOCATOR_MAPPING","","",null,null],[12,"__private_field","","",43,null],[5,"create_ms_mutator","","",null,[[["vmmutatorthread",3],["plan",8]],[["vmbinding",8],["mutator",3]]]],[0,"nogc","mmtk::plan","Plan: nogc (allocation-only)",null,null],[0,"global","mmtk::plan::nogc","",null,null],[3,"NoGC","mmtk::plan::nogc::global","",null,null],[12,"base","","",44,null],[12,"nogc_space","","",44,null],[17,"NOGC_CONSTRAINTS","","",null,null],[11,"new","","",44,[[["unsafeoptionswrapper",3],["map64",3],["arc",3],["fragmentedmapper",3]]]],[0,"mutator","mmtk::plan::nogc","",null,null],[3,"ALLOCATOR_MAPPING","mmtk::plan::nogc::mutator","",null,null],[12,"__private_field","","",45,null],[5,"nogc_mutator_noop","","",null,[[["mutator",3],["vmworkerthread",3]]]],[5,"create_nogc_mutator","","",null,[[["vmmutatorthread",3],["plan",8]],[["vmbinding",8],["mutator",3]]]],[0,"semispace","mmtk::plan","Plan: semispace",null,null],[0,"gc_work","mmtk::plan::semispace","",null,null],[3,"SSCopyContext","mmtk::plan::semispace::gc_work","",null,null],[12,"plan","","",46,null],[12,"ss","","",46,null],[11,"new","","",46,[[["mmtk",3]]]],[3,"SSProcessEdges","","",null,null],[12,"plan","","",47,null],[12,"base","","",47,null],[11,"ss","","",47,[[],["semispace",3]]],[0,"global","mmtk::plan::semispace","",null,null],[17,"ALLOC_SS","mmtk::plan::semispace::global","",null,null],[3,"SemiSpace","","",null,null],[12,"hi","","",48,null],[12,"copyspace0","","",48,null],[12,"copyspace1","","",48,null],[12,"common","","",48,null],[17,"SS_CONSTRAINTS","","",null,null],[11,"new","","",48,[[["unsafeoptionswrapper",3],["map64",3],["arc",3],["fragmentedmapper",3]]]],[11,"tospace","","",48,[[],["copyspace",3]]],[11,"fromspace","","",48,[[],["copyspace",3]]],[0,"mutator","mmtk::plan::semispace","",null,null],[5,"ss_mutator_prepare","mmtk::plan::semispace::mutator","",null,[[["mutator",3],["vmworkerthread",3]]]],[5,"ss_mutator_release","","",null,[[["mutator",3],["vmworkerthread",3]]]],[3,"ALLOCATOR_MAPPING","","",null,null],[12,"__private_field","","",49,null],[5,"create_ss_mutator","","",null,[[["vmmutatorthread",3],["plan",8]],[["vmbinding",8],["mutator",3]]]],[4,"BarrierSelector","mmtk::plan","BarrierSelector describes which barrier to use.",null,null],[13,"NoBarrier","","",17,null],[13,"ObjectBarrier","","",17,null],[4,"AllocationSemantics","","Allocation semantics that MMTk provides. Each allocation …",null,null],[13,"Default","","",29,null],[13,"Immortal","","",29,null],[13,"Los","","",29,null],[13,"Code","","",29,null],[13,"ReadOnly","","",29,null],[8,"CopyContext","","A GC worker\'s context for copying GCs. Each GC plan …",null,null],[16,"VM","","",23,null],[10,"constraints","","",23,[[],["planconstraints",3]]],[10,"init","","",23,[[["vmworkerthread",3]]]],[10,"prepare","","",23,[[]]],[10,"release","","",23,[[]]],[10,"alloc_copy","","",23,[[["allocationsemantics",4],["objectreference",3]],["address",3]]],[11,"post_copy","mmtk::plan::global","",23,[[["allocationsemantics",4],["objectreference",3],["address",3]]]],[11,"copy_check_allocator","","",23,[[["allocationsemantics",4],["objectreference",3]],["allocationsemantics",4]]],[8,"Plan","mmtk::plan","A plan describes the global core functionality for all …",null,null],[16,"VM","","",25,null],[10,"constraints","","",25,[[],["planconstraints",3]]],[10,"create_worker_local","","",25,[[["vmworkerthread",3],["mmtk",3]],["workerlocalptr",3]]],[10,"base","","",25,[[],["baseplan",3]]],[10,"schedule_collection","","",25,[[["scheduler",3]]]],[11,"common","mmtk::plan::global","",25,[[],["commonplan",3]]],[11,"mmapper","","",25,[[],["fragmentedmapper",3]]],[11,"options","","",25,[[],["options",3]]],[10,"gc_init","mmtk::plan","",25,[[["map64",3],["arc",3]]]],[10,"get_allocator_mapping","","",25,[[],["enummap",3]]],[11,"in_nursery","mmtk::plan::global","",25,[[]]],[11,"enter_sanity","","",25,[[]]],[11,"leave_sanity","","",25,[[]]],[11,"is_in_sanity","","",25,[[]]],[11,"is_initialized","","",25,[[]]],[10,"prepare","mmtk::plan","",25,[[["vmworkerthread",3]]]],[10,"release","","",25,[[["vmworkerthread",3]]]],[11,"poll","mmtk::plan::global","",25,[[["space",8]]]],[11,"log_poll","","",25,[[["space",8]]]],[10,"collection_required","mmtk::plan","This method controls the triggering of a GC. It is called …",25,[[["space",8]]]],[11,"get_pages_reserved","mmtk::plan::global","",25,[[]]],[11,"get_total_pages","","",25,[[]]],[11,"get_pages_avail","","",25,[[]]],[11,"get_collection_reserve","","",25,[[]]],[10,"get_pages_used","mmtk::plan","",25,[[]]],[11,"is_emergency_collection","mmtk::plan::global","",25,[[]]],[11,"get_free_pages","","",25,[[]]],[11,"handle_user_collection_request","","",25,[[["vmmutatorthread",3]]]],[11,"reset_collection_trigger","","",25,[[]]],[11,"modify_check","","",25,[[["objectreference",3]]]],[3,"Mutator","mmtk::plan","A mutator is a per-thread data structure that manages …",null,null],[12,"allocators","","",31,null],[12,"barrier","","",31,null],[12,"mutator_tls","","The mutator thread that is bound with this Mutator struct.",31,null],[12,"plan","","",31,null],[12,"config","","",31,null],[8,"MutatorContext","","Each GC plan should provide their implementation of a …",null,null],[10,"prepare","","",32,[[["vmworkerthread",3]]]],[10,"release","","",32,[[["vmworkerthread",3]]]],[10,"alloc","","",32,[[["allocationtype",4]],["address",3]]],[10,"post_alloc","","",32,[[["objectreference",3],["allocationtype",4]]]],[11,"flush_remembered_sets","mmtk::plan::mutator_context","",32,[[]]],[11,"flush","","",32,[[]]],[10,"get_tls","mmtk::plan","",32,[[],["vmmutatorthread",3]]],[10,"barrier","","",32,[[],["barrier",8]]],[11,"record_modified_node","mmtk::plan::mutator_context","",32,[[["objectreference",3]]]],[3,"PlanConstraints","mmtk::plan","This struct defines plan-specific constraints. Most of …",null,null],[12,"moves_objects","","",33,null],[12,"gc_header_bits","","",33,null],[12,"gc_header_words","","",33,null],[12,"num_specialized_scans","","",33,null],[12,"max_non_los_copy_bytes","","",33,null],[12,"needs_log_bit_in_header","","",33,null],[12,"needs_log_bit_in_header_num","","",33,null],[12,"barrier","","",33,null],[12,"needs_linear_scan","","",33,null],[12,"needs_concurrent_workers","","",33,null],[12,"generate_gc_trace","","",33,null],[12,"needs_forward_after_liveness","","",33,null],[8,"TraceLocal","","This trait and its global counterpart implement the core …",null,null],[10,"process_roots","","",34,[[]]],[10,"process_root_edge","","",34,[[["address",3]]]],[10,"trace_object","","",34,[[["objectreference",3]],["objectreference",3]]],[10,"complete_trace","","",34,[[]]],[10,"release","","",34,[[]]],[10,"process_interior_edge","","",34,[[["objectreference",3],["address",3]]]],[11,"overwrite_reference_during_trace","mmtk::plan::tracelocal","",34,[[]]],[10,"report_delayed_root_edge","mmtk::plan","",34,[[["address",3]]]],[10,"will_not_move_in_current_collection","","",34,[[["objectreference",3]]]],[11,"get_forwarded_reference","mmtk::plan::tracelocal","",34,[[["objectreference",3]],["objectreference",3]]],[11,"get_forwarded_referent","","",34,[[["objectreference",3]],["objectreference",3]]],[11,"retain_referent","","",34,[[["objectreference",3]],["objectreference",3]]],[8,"TransitiveClosure","mmtk::plan","This trait is the fundamental mechanism for performing a …",null,null],[10,"process_edge","","",35,[[["address",3]]]],[10,"process_node","","",35,[[["objectreference",3]]]],[17,"GENCOPY_CONSTRAINTS","","",null,null],[17,"MS_CONSTRAINTS","","",null,null],[17,"NOGC_CONSTRAINTS","","",null,null],[17,"SS_CONSTRAINTS","","",null,null],[0,"scheduler","mmtk","A general scheduler implementation. MMTk uses it to …",null,null],[0,"context","mmtk::scheduler","",null,null],[8,"Context","mmtk::scheduler::context","The global context for the whole scheduling system. This …",null,null],[11,"spawn_worker","","",50,[[["worker",3],["vmthread",3]]]],[8,"WorkerLocal","","Thread-local data for each worker thread.",null,null],[11,"init","","",51,[[["vmworkerthread",3]]]],[0,"mmtk_context","mmtk::scheduler","",null,null],[6,"GCWorkerLocalPtr","mmtk::scheduler::mmtk_context","",null,null],[25,"GCWorkerLocal","","",null,null],[0,"scheduler","mmtk::scheduler","",null,null],[4,"CoordinatorMessage","mmtk::scheduler::scheduler","",null,null],[13,"Work","","",52,null],[13,"AllWorkerParked","","",52,null],[13,"BucketDrained","","",52,null],[3,"Scheduler","","",null,null],[12,"work_buckets","","",53,null],[12,"coordinator_work","","Work for the coordinator thread",53,null],[12,"worker_group","","workers",53,null],[12,"worker_monitor","","Condition Variable for worker synchronization",53,null],[12,"context","","",53,null],[12,"coordinator_worker","","",53,null],[12,"channel","","A message channel to send new coordinator work and other …",53,null],[12,"startup","","",53,null],[12,"finalizer","","",53,null],[11,"new","","",53,[[],["arc",3]]],[11,"num_workers","","",53,[[]]],[11,"initialize","","",53,[[["arc",3],["vmthread",3]]]],[11,"are_buckets_drained","","",53,[[]]],[11,"initialize_worker","","",53,[[["vmworkerthread",3],["arc",3]]]],[11,"set_initializer","","",53,[[["coordinatorwork",8],["option",4]]]],[11,"set_finalizer","","",53,[[["coordinatorwork",8],["option",4]]]],[11,"worker_group","","",53,[[],[["workergroup",3],["arc",3]]]],[11,"all_buckets_empty","","",53,[[]]],[11,"update_buckets","","Open buckets if their conditions are met",53,[[]]],[11,"process_coordinator_work","","Execute coordinator work, in the controller thread",53,[[["coordinatorwork",8],["box",3]]]],[11,"wait_for_completion","","Drain the message queue and execute coordinator work. …",53,[[]]],[11,"deactivate_all","","",53,[[]]],[11,"reset_state","","",53,[[]]],[11,"add_coordinator_work","","",53,[[["worker",3]]]],[11,"pop_scheduable_work","","",53,[[["worker",3]],["option",4]]],[11,"poll","","Get a scheduable work. Called by workers",53,[[["worker",3]],[["work",8],["box",3]]]],[11,"poll_slow","","",53,[[["worker",3]],[["work",8],["box",3]]]],[11,"enable_stat","","",53,[[]]],[11,"statistics","","",53,[[],[["hashmap",3],["string",3]]]],[6,"MMTkScheduler","","",null,null],[11,"notify_mutators_paused","","",53,[[["mmtk",3]]]],[0,"stat","mmtk::scheduler","",null,null],[3,"SchedulerStat","mmtk::scheduler::stat","",null,null],[12,"work_id_name_map","","",54,null],[12,"work_counts","","",54,null],[12,"work_durations","","",54,null],[11,"work_name","","Extract the work-packet name from the full type name. …",54,[[],["string",3]]],[11,"geomean","","",54,[[]]],[11,"min","","",54,[[]]],[11,"max","","",54,[[]]],[11,"sum","","",54,[[]]],[11,"harness_stat","","",54,[[],[["hashmap",3],["string",3]]]],[11,"merge","","",54,[[["workerlocalstat",3]]]],[3,"WorkStat","","",null,null],[12,"type_id","","",55,null],[12,"type_name","","",55,null],[12,"start_time","","",55,null],[11,"end_of_work","","",55,[[["workerlocalstat",3]]]],[3,"WorkerLocalStat","","",null,null],[12,"work_id_name_map","","",56,null],[12,"work_counts","","",56,null],[12,"work_durations","","",56,null],[12,"enabled","","",56,null],[11,"is_enabled","","",56,[[]]],[11,"enable","","",56,[[]]],[11,"measure_work","","",56,[[["typeid",3]],["workstat",3]]],[0,"work","mmtk::scheduler","",null,null],[8,"Work","mmtk::scheduler::work","",null,null],[10,"do_work","","",57,[[["worker",3]]]],[11,"do_work_with_stat","","",57,[[["worker",3]]]],[8,"CoordinatorWork","","A special kind of work that will execute on the …",null,null],[8,"GCWork","","",null,null],[10,"do_work","","",58,[[["gcworker",6],["mmtk",3]]]],[0,"work_bucket","mmtk::scheduler","",null,null],[3,"WorkUID","mmtk::scheduler::work_bucket","A unique work-packet id for each instance of work-packet",null,null],[12,"0","","",59,null],[11,"new","","",59,[[]]],[3,"PrioritizedWork","","",null,null],[12,"priority","","",60,null],[12,"work_uid","","",60,null],[12,"work","","",60,null],[11,"new","","",60,[[["work",8],["box",3]]]],[3,"WorkBucket","","",null,null],[12,"active","","",61,null],[12,"queue","","A priority queue",61,null],[12,"monitor","","",61,null],[12,"can_open","","",61,null],[11,"new","","",61,[[["arc",3]]]],[11,"notify_one_worker","","",61,[[]]],[11,"notify_all_workers","","",61,[[]]],[11,"is_activated","","",61,[[]]],[11,"activate","","Enable the bucket",61,[[]]],[11,"is_empty","","Test if the bucket is drained",61,[[]]],[11,"is_drained","","",61,[[]]],[11,"deactivate","","Disable the bucket",61,[[]]],[11,"add_with_priority","","Add a work packet to this bucket, with a given priority",61,[[["work",8],["box",3]]]],[11,"add","","Add a work packet to this bucket, with a default priority …",61,[[["work",8]]]],[11,"bulk_add_with_priority","","",61,[[["vec",3],["box",3]]]],[11,"bulk_add","","",61,[[["vec",3],["box",3]]]],[11,"poll","","Get a work packet (with the greatest priority) from this …",61,[[],[["box",3],["option",4]]]],[11,"set_open_condition","","",61,[[]]],[11,"update","","",61,[[]]],[4,"WorkBucketStage","","",null,null],[13,"Unconstrained","","",62,null],[13,"Prepare","","",62,null],[13,"Closure","","",62,null],[13,"RefClosure","","",62,null],[13,"RefForwarding","","",62,null],[13,"Release","","",62,null],[13,"Final","","",62,null],[0,"worker","mmtk::scheduler","",null,null],[3,"WorkerLocalPtr","mmtk::scheduler::worker","This struct will be accessed during trace_object(), which …",null,null],[12,"data","","",63,null],[12,"ty","","",63,null],[18,"UNINITIALIZED","","",63,null],[11,"new","","",63,[[["workerlocal",8]]]],[11,"as_type","","SafetyThe user needs to guarantee that the type supplied …",63,[[]]],[17,"LOCALLY_CACHED_WORKS","","",null,null],[3,"Worker","","",null,null],[12,"tls","","",64,null],[12,"ordinal","","",64,null],[12,"parked","","",64,null],[12,"scheduler","","",64,null],[12,"local","","",64,null],[12,"local_work_bucket","","",64,null],[12,"sender","","",64,null],[12,"stat","","",64,null],[12,"context","","",64,null],[12,"is_coordinator","","",64,null],[12,"local_work_buffer","","",64,null],[6,"GCWorker","","",null,null],[11,"new","","",64,[[["scheduler",3],["sender",3],["weak",3],["coordinatormessage",4]]]],[11,"add_work","","",64,[[["workbucketstage",4]]]],[11,"flush","","",64,[[]]],[11,"is_parked","","",64,[[]]],[11,"is_coordinator","","",64,[[]]],[11,"scheduler","","",64,[[],["scheduler",3]]],[11,"local","","SafetyThe user needs to guarantee that the type supplied …",64,[[]]],[11,"set_local","","",64,[[["workerlocalptr",3]]]],[11,"init","","",64,[[["vmworkerthread",3]]]],[11,"do_work","","",64,[[]]],[11,"run","","",64,[[]]],[3,"WorkerGroup","","",null,null],[12,"workers","","",65,null],[11,"new","","",65,[[["scheduler",3],["sender",3],["weak",3],["coordinatormessage",4]],["arc",3]]],[11,"worker_count","","",65,[[]]],[11,"parked_workers","","",65,[[]]],[11,"all_parked","","",65,[[]]],[11,"spawn_workers","","",65,[[["vmthread",3]]]],[0,"gc_work","mmtk::scheduler","",null,null],[3,"ScheduleCollection","mmtk::scheduler::gc_work","",null,null],[3,"Prepare","","The global GC Preparation Work This work packet invokes …",null,null],[12,"plan","","",66,null],[12,"_p","","",66,null],[11,"new","","",66,[[]]],[3,"PrepareMutator","","The mutator GC Preparation Work",null,null],[12,"mutator","","",67,null],[11,"new","","",67,[[["mutator",3]]]],[3,"PrepareCollector","","The collector GC Preparation Work",null,null],[12,"0","","",68,null],[11,"new","","",68,[[]]],[3,"Release","","The global GC release Work This work packet invokes …",null,null],[12,"plan","","",69,null],[12,"_p","","",69,null],[11,"new","","",69,[[]]],[3,"ReleaseMutator","","The mutator release Work",null,null],[12,"mutator","","",70,null],[11,"new","","",70,[[["mutator",3]]]],[3,"ReleaseCollector","","The collector release Work",null,null],[12,"0","","",71,null],[11,"new","","",71,[[]]],[3,"StopMutators","","Stop all mutators",null,null],[12,"0","","",72,null],[11,"new","","",72,[[]]],[3,"EndOfGC","","",null,null],[3,"ScanStackRoots","","",null,null],[12,"0","","",73,null],[11,"new","","",73,[[]]],[3,"ScanStackRoot","","",null,null],[12,"0","","",74,null],[3,"ScanVMSpecificRoots","","",null,null],[12,"0","","",75,null],[11,"new","","",75,[[]]],[3,"ProcessEdgesBase","","",null,null],[12,"edges","","",76,null],[12,"nodes","","",76,null],[12,"mmtk","","",76,null],[12,"worker","","",76,null],[11,"new","","",76,[[["mmtk",3],["vec",3],["address",3]]]],[11,"set_worker","","",76,[[["gcworker",6]]]],[11,"worker","","",76,[[],["gcworker",6]]],[11,"mmtk","","",76,[[],["mmtk",3]]],[11,"plan","","",76,[[],["plan",8]]],[8,"ProcessEdgesWork","","Scan & update a list of object slots",null,null],[16,"VM","","",77,null],[18,"CAPACITY","","",77,null],[18,"OVERWRITE_REFERENCE","","",77,null],[18,"SCAN_OBJECTS_IMMEDIATELY","","",77,null],[10,"new","","",77,[[["mmtk",3],["vec",3],["address",3]]]],[10,"trace_object","","",77,[[["objectreference",3]],["objectreference",3]]],[11,"process_node","","",77,[[["objectreference",3]]]],[11,"flush","","",77,[[]]],[11,"process_edge","","",77,[[["address",3]]]],[11,"process_edges","","",77,[[]]],[3,"ScanObjects","","Scan & update a list of object slots",null,null],[12,"buffer","","",78,null],[12,"concurrent","","",78,null],[12,"phantom","","",78,null],[11,"new","","",78,[[["vec",3],["objectreference",3]]]],[3,"ProcessModBuf","","",null,null],[12,"modbuf","","",79,null],[12,"phantom","","",79,null],[12,"meta","","",79,null],[11,"new","","",79,[[["vec",3],["objectreference",3],["sidemetadataspec",3]]]],[8,"CoordinatorWork","mmtk::scheduler","A special kind of work that will execute on the …",null,null],[8,"GCWork","","",null,null],[10,"do_work","","",58,[[["gcworker",6],["mmtk",3]]]],[4,"WorkBucketStage","","",null,null],[13,"Unconstrained","","",62,null],[13,"Prepare","","",62,null],[13,"Closure","","",62,null],[13,"RefClosure","","",62,null],[13,"RefForwarding","","",62,null],[13,"Release","","",62,null],[13,"Final","","",62,null],[6,"GCWorker","","",null,null],[8,"ProcessEdgesWork","","Scan & update a list of object slots",null,null],[16,"VM","","",77,null],[18,"CAPACITY","mmtk::scheduler::gc_work","",77,null],[18,"OVERWRITE_REFERENCE","","",77,null],[18,"SCAN_OBJECTS_IMMEDIATELY","","",77,null],[10,"new","mmtk::scheduler","",77,[[["mmtk",3],["vec",3],["address",3]]]],[10,"trace_object","","",77,[[["objectreference",3]],["objectreference",3]]],[11,"process_node","mmtk::scheduler::gc_work","",77,[[["objectreference",3]]]],[11,"flush","","",77,[[]]],[11,"process_edge","","",77,[[["address",3]]]],[11,"process_edges","","",77,[[]]],[3,"ScanStackRoot","mmtk::scheduler","",null,null],[12,"0","","",74,null],[0,"util","mmtk","Utilities used by other modules, including allocators, …",null,null],[0,"address","mmtk::util","An abstract of memory address and object reference.",null,null],[6,"ByteSize","mmtk::util::address","size in bytes",null,null],[6,"ByteOffset","","offset in byte",null,null],[3,"Address","","Address represents an arbitrary address. This is designed …",null,null],[12,"0","","",80,null],[18,"ZERO","","",80,null],[18,"MAX","","",80,null],[11,"from_ptr","","creates Address from a pointer",80,[[],["address",3]]],[11,"from_ref","","",80,[[],["address",3]]],[11,"from_mut_ptr","","creates Address from a mutable pointer",80,[[],["address",3]]],[11,"zero","","creates a null Address (0)",80,[[],["address",3]]],[11,"max","","creates an Address of (usize::MAX)",80,[[],["address",3]]],[11,"from_usize","","creates an arbitrary Address",80,[[],["address",3]]],[11,"shift","","shifts the address by N T-typed objects (returns addr + N …",80,[[]]],[11,"get_extent","","",80,[[["address",3]],["bytesize",6]]],[11,"get_offset","","",80,[[["address",3]],["byteoffset",6]]],[11,"add","","",80,[[],["address",3]]],[11,"sub","","",80,[[],["address",3]]],[11,"load","","loads a value of type T from the address",80,[[],["copy",8]]],[11,"store","","stores a value of type T to the address",80,[[]]],[11,"atomic_load","","atomic operation: load",80,[[["ordering",4]]]],[11,"atomic_store","","atomic operation: store",80,[[["ordering",4]]]],[11,"compare_exchange","","atomic operation: compare and exchange usize",80,[[["ordering",4]],["result",4]]],[11,"is_zero","","is this address zero?",80,[[]]],[11,"align_up","","aligns up the address to the given alignment",80,[[["bytesize",6]],["address",3]]],[11,"align_down","","aligns down the address to the given alignment",80,[[["bytesize",6]],["address",3]]],[11,"is_aligned_to","","is this address aligned to the given alignment",80,[[]]],[11,"to_object_reference","","converts the Address into an ObjectReference",80,[[],["objectreference",3]]],[11,"to_ptr","","converts the Address to a pointer",80,[[]]],[11,"to_mut_ptr","","converts the Address to a mutable pointer",80,[[]]],[11,"as_usize","","converts the Address to a pointer-sized integer",80,[[]]],[11,"chunk_index","","returns the chunk index for this address",80,[[]]],[11,"is_mapped","","return true if the referenced memory is mapped",80,[[]]],[3,"ObjectReference","","ObjectReference represents address for an object. …",null,null],[12,"0","","",81,null],[11,"to_address","","converts the ObjectReference to an Address",81,[[],["address",3]]],[11,"is_null","","is this object reference null reference?",81,[[]]],[11,"value","","returns the ObjectReference",81,[[]]],[11,"is_live","","",81,[[]]],[11,"is_movable","","",81,[[]]],[11,"is_mapped","","",81,[[]]],[11,"is_sane","","",81,[[]]],[0,"alloc","mmtk::util","Allocators",null,null],[0,"allocator","mmtk::util::alloc","",null,null],[5,"align_allocation_no_fill","mmtk::util::alloc::allocator","",null,[[["address",3]],["address",3]]],[5,"align_allocation","","",null,[[["address",3]],["address",3]]],[5,"fill_alignment_gap","","",null,[[["address",3]]]],[5,"get_maximum_aligned_size","","",null,[[]]],[8,"Allocator","","",null,null],[10,"get_tls","","",82,[[],["vmthread",3]]],[10,"get_space","","",82,[[],["space",8]]],[10,"get_plan","","",82,[[],["plan",8]]],[10,"alloc","","",82,[[],["address",3]]],[11,"alloc_slow","","",82,[[],["address",3]]],[11,"alloc_slow_inline","","",82,[[],["address",3]]],[10,"alloc_slow_once","","",82,[[],["address",3]]],[11,"is","","Returns true if the trait object wraps an object of type …",82,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the …",82,[[["box",3]],[["box",3],["result",4],["box",3]]]],[11,"downcast_rc","","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …",82,[[["rc",3]],[["rc",3],["rc",3],["result",4]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object …",82,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the …",82,[[],["option",4]]],[0,"allocators","mmtk::util::alloc","",null,null],[17,"MAX_BUMP_ALLOCATORS","mmtk::util::alloc::allocators","",null,null],[17,"MAX_LARGE_OBJECT_ALLOCATORS","","",null,null],[17,"MAX_MALLOC_ALLOCATORS","","",null,null],[3,"Allocators","","",null,null],[12,"bump_pointer","","",83,null],[12,"large_object","","",83,null],[12,"malloc","","",83,null],[11,"get_allocator","","SafetyThe selector needs to be valid, and points to an …",83,[[["allocatorselector",4]],["allocator",8]]],[11,"get_allocator_mut","","SafetyThe selector needs to be valid, and points to an …",83,[[["allocatorselector",4]],["allocator",8]]],[11,"new","","",83,[[["vmmutatorthread",3],["plan",8]]]],[4,"AllocatorSelector","","",null,null],[13,"BumpPointer","","",84,null],[13,"LargeObject","","",84,null],[13,"Malloc","","",84,null],[0,"bumpallocator","mmtk::util::alloc","",null,null],[17,"BYTES_IN_PAGE","mmtk::util::alloc::bumpallocator","",null,null],[17,"BLOCK_SIZE","","",null,null],[17,"BLOCK_MASK","","",null,null],[3,"BumpAllocator","","",null,null],[12,"tls","","",85,null],[12,"cursor","","",85,null],[12,"limit","","",85,null],[12,"space","","",85,null],[12,"plan","","",85,null],[11,"set_limit","","",85,[[["address",3]]]],[11,"reset","","",85,[[]]],[11,"rebind","","",85,[[["space",8]]]],[11,"new","","",85,[[["plan",8],["space",8],["vmthread",3]]]],[11,"alloc_slow_once_stress_test","","",85,[[],["address",3]]],[11,"acquire_block","","",85,[[],["address",3]]],[0,"large_object_allocator","mmtk::util::alloc","",null,null],[3,"LargeObjectAllocator","mmtk::util::alloc::large_object_allocator","",null,null],[12,"tls","","",86,null],[12,"space","","",86,null],[12,"plan","","",86,null],[11,"new","","",86,[[["largeobjectspace",3],["plan",8],["vmthread",3]]]],[0,"malloc_allocator","mmtk::util::alloc","",null,null],[3,"MallocAllocator","mmtk::util::alloc::malloc_allocator","",null,null],[12,"tls","","",87,null],[12,"space","","",87,null],[12,"plan","","",87,null],[11,"new","","",87,[[["mallocspace",3],["plan",8],["vmthread",3]]]],[0,"dump_linear_scan","mmtk::util::alloc","",null,null],[3,"DumpLinearScan","mmtk::util::alloc::dump_linear_scan","",null,null],[0,"embedded_meta_data","mmtk::util::alloc","",null,null],[17,"LOG_BYTES_IN_REGION","mmtk::util::alloc::embedded_meta_data","",null,null],[17,"BYTES_IN_REGION","","",null,null],[17,"REGION_MASK","","",null,null],[17,"LOG_PAGES_IN_REGION","","",null,null],[17,"PAGES_IN_REGION","","",null,null],[5,"get_metadata_base","","",null,[[["address",3]],["address",3]]],[5,"get_metadata_offset","","",null,[[["address",3]]]],[0,"linear_scan","mmtk::util::alloc","",null,null],[8,"LinearScan","mmtk::util::alloc::linear_scan","",null,null],[10,"scan","","",88,[[["objectreference",3]]]],[5,"fill_alignment_gap","mmtk::util::alloc","",null,[[["address",3]]]],[8,"Allocator","","",null,null],[10,"get_tls","","",82,[[],["vmthread",3]]],[10,"get_space","","",82,[[],["space",8]]],[10,"get_plan","","",82,[[],["plan",8]]],[10,"alloc","","",82,[[],["address",3]]],[11,"alloc_slow","mmtk::util::alloc::allocator","",82,[[],["address",3]]],[11,"alloc_slow_inline","","",82,[[],["address",3]]],[10,"alloc_slow_once","mmtk::util::alloc","",82,[[],["address",3]]],[4,"AllocatorSelector","","",null,null],[13,"BumpPointer","","",84,null],[13,"LargeObject","","",84,null],[13,"Malloc","","",84,null],[3,"BumpAllocator","","",null,null],[12,"tls","","",85,null],[12,"cursor","","",85,null],[12,"limit","","",85,null],[12,"space","","",85,null],[12,"plan","","",85,null],[3,"LargeObjectAllocator","","",null,null],[12,"tls","","",86,null],[12,"space","","",86,null],[12,"plan","","",86,null],[3,"MallocAllocator","","",null,null],[12,"tls","","",87,null],[12,"space","","",87,null],[12,"plan","","",87,null],[0,"constants","mmtk::util","Constants used in MMTk",null,null],[17,"INSTANCE_FIELD","mmtk::util::constants","Modes.",null,null],[17,"ARRAY_ELEMENT","","",null,null],[17,"LOG_BYTES_IN_BYTE","","",null,null],[17,"BYTES_IN_BYTE","","",null,null],[17,"LOG_BITS_IN_BYTE","","",null,null],[17,"BITS_IN_BYTE","","",null,null],[17,"LOG_BYTES_IN_MBYTE","","",null,null],[17,"BYTES_IN_MBYTE","","",null,null],[17,"LOG_BYTES_IN_KBYTE","","",null,null],[17,"BYTES_IN_KBYTE","","",null,null],[17,"SUPPORT_CARD_SCANNING","","",null,null],[17,"LOG_CARD_META_SIZE","","",null,null],[17,"LOG_CARD_UNITS","","",null,null],[17,"LOG_CARD_GRAIN","","",null,null],[17,"LOG_CARD_BYTES","","",null,null],[17,"LOG_CARD_META_BYTES","","",null,null],[17,"LOG_CARD_META_PAGES","","",null,null],[17,"CARD_META_PAGES_PER_REGION","","",null,null],[17,"CARD_MASK","","",null,null],[17,"LAZY_SWEEP","","Lazy sweeping - controlled from here because …",null,null],[17,"LOG_BYTES_IN_CHAR","","",null,null],[17,"BYTES_IN_CHAR","","",null,null],[17,"LOG_BITS_IN_CHAR","","",null,null],[17,"BITS_IN_CHAR","","",null,null],[17,"LOG_BYTES_IN_SHORT","","",null,null],[17,"BYTES_IN_SHORT","","",null,null],[17,"LOG_BITS_IN_SHORT","","",null,null],[17,"BITS_IN_SHORT","","",null,null],[17,"LOG_BYTES_IN_INT","","",null,null],[17,"BYTES_IN_INT","","",null,null],[17,"LOG_BITS_IN_INT","","",null,null],[17,"BITS_IN_INT","","",null,null],[17,"LOG_BYTES_IN_LONG","","",null,null],[17,"BYTES_IN_LONG","","",null,null],[17,"LOG_BITS_IN_LONG","","",null,null],[17,"BITS_IN_LONG","","",null,null],[17,"MAX_INT","","",null,null],[17,"MIN_INT","","",null,null],[17,"LOG_BYTES_IN_ADDRESS","","",null,null],[17,"BYTES_IN_ADDRESS","","",null,null],[17,"LOG_BITS_IN_ADDRESS","","",null,null],[17,"BITS_IN_ADDRESS","","",null,null],[17,"LOG_BYTES_IN_WORD","","",null,null],[17,"BYTES_IN_WORD","","",null,null],[17,"LOG_BITS_IN_WORD","","",null,null],[17,"BITS_IN_WORD","","",null,null],[17,"LOG_BYTES_IN_PAGE","","",null,null],[17,"BYTES_IN_PAGE","","",null,null],[17,"LOG_BITS_IN_PAGE","","",null,null],[17,"BITS_IN_PAGE","","",null,null],[17,"LOG_BYTES_IN_ADDRESS_SPACE","","",null,null],[17,"LOG_MIN_OBJECT_SIZE","","",null,null],[17,"MIN_OBJECT_SIZE","","",null,null],[17,"DEFAULT_STRESS_FACTOR","","",null,null],[0,"conversions","mmtk::util","Calculation, conversion and rounding for memory related …",null,null],[5,"is_address_aligned","mmtk::util::conversions","",null,[[["address",3]]]],[5,"page_align_down","","",null,[[["address",3]],["address",3]]],[5,"is_page_aligned","","",null,[[["address",3]]]],[5,"chunk_align_up","","",null,[[["address",3]],["address",3]]],[5,"chunk_align_down","","",null,[[["address",3]],["address",3]]],[5,"mmap_chunk_align_up","","",null,[[["address",3]],["address",3]]],[5,"mmap_chunk_align_down","","",null,[[["address",3]],["address",3]]],[5,"bytes_to_chunks_up","","",null,[[]]],[5,"address_to_chunk_index","","",null,[[["address",3]]]],[5,"chunk_index_to_address","","",null,[[],["address",3]]],[5,"raw_align_up","","",null,[[]]],[5,"raw_align_down","","",null,[[]]],[5,"raw_is_aligned","","",null,[[]]],[5,"pages_to_bytes","","",null,[[]]],[5,"bytes_to_pages_up","","",null,[[]]],[5,"bytes_to_pages","","",null,[[]]],[0,"memory","mmtk::util","Wrapper functions for memory syscalls such as mmap, …",null,null],[5,"result_is_mapped","mmtk::util::memory","",null,[[["result",6]]]],[5,"zero","","",null,[[["address",3]]]],[5,"dzmmap","","Demand-zero mmap: This function mmaps the memory and …",null,[[["address",3]],["result",6]]],[5,"dzmmap_noreplace","","Demand-zero mmap (no replace): This function mmaps the …",null,[[["address",3]],["result",6]]],[5,"mmap_noreserve","","mmap with no swap space reserve: This function does not …",null,[[["address",3]],["result",6]]],[5,"mmap_fixed","","",null,[[["address",3],["c_int",6]],["result",6]]],[5,"munmap","","",null,[[["address",3]],["result",6]]],[5,"handle_mmap_error","","Properly handle errors from a mmap Result, including …",null,[[["error",3],["vmthread",3]]]],[5,"panic_if_unmapped","","Checks if the memory has already been mapped. If not, we …",null,[[["address",3]]]],[5,"munprotect","","",null,[[["address",3]],["result",6]]],[5,"mprotect","","",null,[[["address",3]],["result",6]]],[5,"wrap_libc_call","","",null,[[["partialeq",8],["fn",8]],["result",6]]],[0,"opaque_pointer","mmtk::util","Opaque pointers used in MMTk, e.g. VMThread.",null,null],[3,"OpaquePointer","mmtk::util::opaque_pointer","",null,null],[12,"0","","",89,null],[18,"UNINITIALIZED","","",89,null],[11,"from_address","","",89,[[["address",3]]]],[11,"is_null","","",89,[[]]],[3,"VMThread","","A VMThread is an opaque pointer that can uniquely …",null,null],[12,"0","","",90,null],[18,"UNINITIALIZED","","",90,null],[3,"VMMutatorThread","","A VMMutatorThread is a VMThread that associates with a …",null,null],[12,"0","","",91,null],[3,"VMWorkerThread","","A VMWorkerThread is a VMThread that is associates with a …",null,null],[12,"0","","",92,null],[0,"reference_processor","mmtk::util","Reference processing implementation.",null,null],[3,"ReferenceProcessors","mmtk::util::reference_processor","",null,null],[12,"soft","","",93,null],[12,"weak","","",93,null],[12,"phantom","","",93,null],[11,"new","","",93,[[]]],[11,"get","","",93,[[["semantics",4]],["referenceprocessor",3]]],[11,"clear","","",93,[[]]],[11,"add_soft_candidate","","",93,[[["objectreference",3]]]],[11,"add_weak_candidate","","",93,[[["objectreference",3]]]],[11,"add_phantom_candidate","","",93,[[["objectreference",3]]]],[11,"forward_refs","","",93,[[]]],[11,"scan_weak_refs","","",93,[[["vmworkerthread",3]]]],[11,"scan_soft_refs","","",93,[[["vmworkerthread",3]]]],[11,"scan_phantom_refs","","",93,[[["vmworkerthread",3]]]],[17,"TRACE","","",null,null],[17,"TRACE_UNREACHABLE","","",null,null],[17,"TRACE_DETAIL","","",null,null],[17,"TRACE_FORWARD","","",null,null],[17,"INITIAL_SIZE","","",null,null],[3,"ReferenceProcessor","","",null,null],[12,"sync","","",94,null],[12,"semantics","","Semantics",94,null],[4,"Semantics","","",null,null],[13,"SOFT","","",95,null],[13,"WEAK","","",95,null],[13,"PHANTOM","","",95,null],[3,"ReferenceProcessorSync","","",null,null],[12,"references","","The table of reference objects for the current semantics",96,null],[12,"unforwarded_references","","In a MarkCompact (or similar) collector, we need to …",96,null],[12,"nursery_index","","Index into the references table for the start of the …",96,null],[11,"new","","",94,[[["semantics",4]]]],[11,"sync","","",94,[[],["mutex",3]]],[11,"sync_mut","","",94,[[],["referenceprocessorsync",3]]],[11,"clear","","",94,[[]]],[11,"add_candidate","","",94,[[["objectreference",3]]]],[11,"forward","","",94,[[]]],[11,"scan","","",94,[[["vmworkerthread",3]]]],[11,"retain_referent","","This method deals only with soft references. It retains …",94,[[["objectreference",3]]]],[0,"analysis","mmtk::util","An analysis framework for collecting data and profiling …",null,null],[0,"gc_count","mmtk::util::analysis","",null,null],[3,"GcCounter","mmtk::util::analysis::gc_count","Simple analysis routine that counts the number of …",null,null],[12,"running","","",97,null],[12,"counter","","",97,null],[11,"new","","",97,[[["mutex",3],["arc",3]]]],[0,"obj_num","mmtk::util::analysis","",null,null],[3,"ObjectCounter","mmtk::util::analysis::obj_num","Simple analysis routine that counts the number of objects …",null,null],[12,"running","","",98,null],[12,"counter","","",98,null],[11,"new","","",98,[[["mutex",3],["arc",3]]]],[0,"obj_size","mmtk::util::analysis","",null,null],[3,"PerSizeClassObjectCounter","mmtk::util::analysis::obj_size","This file implements an analysis routine that counts the …",null,null],[12,"running","","",99,null],[12,"size_classes","","",99,null],[11,"new","","",99,[[]]],[11,"size_class","","",99,[[]]],[8,"RtAnalysis","mmtk::util::analysis","This trait exposes hooks for developers to implement …",null,null],[11,"alloc_hook","","",100,[[]]],[11,"gc_hook","","",100,[[["mmtk",3]]]],[10,"set_running","","",100,[[]]],[3,"GcHookWork","","",null,null],[3,"AnalysisManager","","",null,null],[12,"routines","","",101,null],[11,"new","","",101,[[["stats",3]]]],[11,"initialize_routines","","",101,[[["stats",3]]]],[11,"add_analysis_routine","","",101,[[["mutex",3],["arc",3]]]],[11,"alloc_hook","","",101,[[]]],[11,"gc_hook","","",101,[[["mmtk",3]]]],[0,"edge_logger","mmtk::util","Logging edges to check duplicated edges in GC. This is a …",null,null],[3,"EDGE_LOG","mmtk::util::edge_logger","",null,null],[12,"__private_field","","",102,null],[5,"log_edge","","Logs an edge. Panics if the edge was already logged.",null,[[["address",3]]]],[5,"reset","","Reset the edge logger by clearing the hash-set of edges. …",null,[[]]],[0,"finalizable_processor","mmtk::util","Finalization implementation.",null,null],[3,"FinalizableProcessor","mmtk::util::finalizable_processor","A special processor for Finalizable objects.",null,null],[12,"candidates","","Candidate objects that has finalizers with them",103,null],[12,"nursery_index","","Index into candidates to record where we are up to in the …",103,null],[12,"ready_for_finalize","","Objects that can be finalized. They are actually dead, …",103,null],[11,"new","","",103,[[]]],[11,"add","","",103,[[["objectreference",3]]]],[11,"get_forwarded_finalizable","","",103,[[["objectreference",3]],["objectreference",3]]],[11,"return_for_finalize","","",103,[[["objectreference",3]],["objectreference",3]]],[11,"scan","","",103,[[["vmworkerthread",3]]]],[11,"forward","","",103,[[]]],[11,"get_ready_object","","",103,[[],[["objectreference",3],["option",4]]]],[3,"Finalization","","",null,null],[12,"0","","",104,null],[11,"new","","",104,[[]]],[3,"ForwardFinalization","","",null,null],[12,"0","","",105,null],[11,"new","","",105,[[]]],[0,"forwarding_word","mmtk::util","Forwarding word in object copying.",null,null],[17,"FORWARDING_NOT_TRIGGERED_YET","mmtk::util::forwarding_word","",null,null],[17,"BEING_FORWARDED","","",null,null],[17,"FORWARDED","","",null,null],[17,"FORWARDING_MASK","","",null,null],[17,"FORWARDING_BITS","","",null,null],[5,"attempt_to_forward","","",null,[[["objectreference",3]]]],[5,"spin_and_get_forwarded_object","","",null,[[["objectreference",3]],["objectreference",3]]],[5,"forward_object","","",null,[[["allocationsemantics",4],["objectreference",3]],["objectreference",3]]],[5,"set_forwarding_pointer","","",null,[[["objectreference",3]]]],[5,"is_forwarded","","",null,[[["objectreference",3]]]],[5,"is_forwarded_or_being_forwarded","","",null,[[["objectreference",3]]]],[5,"state_is_forwarded_or_being_forwarded","","",null,[[]]],[5,"state_is_being_forwarded","","",null,[[]]],[5,"clear_forwarding_bits","","",null,[[["objectreference",3]]]],[5,"get_forwarding_word_address","","Returns the address of the forwarding word of an object.",null,[[["objectreference",3]],["address",3]]],[5,"read_forwarding_word","","",null,[[["objectreference",3]]]],[5,"write_forwarding_word","","",null,[[["objectreference",3]]]],[5,"compare_exchange_forwarding_word","","",null,[[["objectreference",3]]]],[5,"gc_byte_offset_in_forwarding_word","","",null,[[],["option",4]]],[5,"check_alloc_size","","",null,[[]]],[0,"gc_byte","mmtk::util","Access to per-object metadata (in GC byte or in side …",null,null],[17,"SIDE_GC_BYTE_SPEC","mmtk::util::gc_byte","",null,null],[5,"read_gc_byte","","Atomically reads the current value of an object\'s GC byte.",null,[[["objectreference",3]]]],[5,"write_gc_byte","","Atomically writes a new value to the GC byte of an object",null,[[["objectreference",3]]]],[5,"compare_exchange_gc_byte","","Atomically performs the compare-and-exchange operation on …",null,[[["objectreference",3]]]],[0,"header_byte","mmtk::util","Access to per-object metadata with policy-specific …",null,null],[17,"TOTAL_BITS","mmtk::util::header_byte","",null,null],[3,"HeaderByte","","",null,null],[12,"needs_unlogged_bit","","",106,null],[12,"unlogged_bit_number","","",106,null],[12,"unlogged_bit","","",106,null],[12,"used_global_bits","","",106,null],[11,"new","","",106,[[["planconstraints",3]]]],[11,"mark_as_unlogged","","",106,[[["objectreference",3]]]],[11,"mark_as_logged","","",106,[[["objectreference",3]]]],[11,"is_unlogged","","",106,[[["objectreference",3]]]],[0,"heap","mmtk::util","Heap implementation, including page resource, mmapper, …",null,null],[0,"accounting","mmtk::util::heap","",null,null],[3,"PageAccounting","mmtk::util::heap::accounting","The struct is used for page usage. Both page resource and …",null,null],[12,"reserved","","The reserved pages. This should be incremented when we …",107,null],[12,"committed","","The committed pages. This should be incremented when we …",107,null],[11,"new","","",107,[[]]],[11,"reserve_and_commit","","Inform of both reserving and committing a certain number …",107,[[]]],[11,"reserve","","Inform of reserving a certain number of pages. Usually …",107,[[]]],[11,"clear_reserved","","Inform of clearing some reserved pages. This is used when …",107,[[]]],[11,"commit","","Inform of successfully committing a certain number of …",107,[[]]],[11,"release","","Inform of releasing a certain number of pages. The number …",107,[[]]],[11,"reset","","Set both reserved and committed pages to zero. This is …",107,[[]]],[11,"get_reserved_pages","","",107,[[]]],[11,"get_committed_pages","","",107,[[]]],[0,"layout","mmtk::util::heap","",null,null],[0,"heap_parameters","mmtk::util::heap::layout","",null,null],[17,"LOG_MAX_SPACES","mmtk::util::heap::layout::heap_parameters","log_2 of the maximum number of spaces a Plan can support.",null,null],[17,"MAX_SPACES","","Maximum number of spaces a Plan can support.",null,null],[17,"LOG_SPACE_SIZE_64","","In a 64-bit addressing model, each space is the same …",null,null],[0,"vm_layout_constants","mmtk::util::heap::layout","",null,null],[17,"LOG_ADDRESS_SPACE","mmtk::util::heap::layout::vm_layout_constants","log_2 of the addressable virtual space ",null,null],[17,"LOG_BYTES_IN_CHUNK","","log_2 of the coarsest unit of address space allocation.",null,null],[17,"BYTES_IN_CHUNK","","Coarsest unit of address space allocation. ",null,null],[17,"PAGES_IN_CHUNK","","Coarsest unit of address space allocation, in pages ",null,null],[17,"LOG_MAX_CHUNKS","","log_2 of the maximum number of chunks we need to track.  …",null,null],[17,"MAX_CHUNKS","","Maximum number of chunks we need to track.  Only used in …",null,null],[17,"LOG_SPACE_EXTENT","","An upper bound on the extent of any space in the current …",null,null],[17,"MAX_SPACE_EXTENT","","An upper bound on the extent of any space in the current …",null,null],[17,"HEAP_START","","",null,null],[17,"HEAP_END","","",null,null],[17,"VM_SPACE_SIZE","","",null,null],[17,"AVAILABLE_START","","Lowest virtual address available for MMTk to manage.  The …",null,null],[17,"AVAILABLE_END","","Highest virtual address available for MMTk to manage.  …",null,null],[17,"AVAILABLE_BYTES","","Size of the address space available to the MMTk heap. ",null,null],[17,"LOG_MMAP_CHUNK_BYTES","","Granularity at which we map and unmap virtual address …",null,null],[17,"MMAP_CHUNK_BYTES","","",null,null],[17,"LOG_PAGES_IN_SPACE64","","log_2 of the number of pages in a 64-bit space ",null,null],[17,"PAGES_IN_SPACE64","","The number of pages in a 64-bit space ",null,null],[17,"SPACE_SHIFT_64","","",null,null],[17,"SPACE_MASK_64","","",null,null],[17,"SPACE_SIZE_64","","",null,null],[0,"mmapper","mmtk::util::heap::layout","",null,null],[8,"Mmapper","mmtk::util::heap::layout::mmapper","",null,null],[10,"eagerly_mmap_all_spaces","","Given an address array describing the regions of virtual …",108,[[]]],[10,"mark_as_mapped","","Mark a number of pages as mapped, without making any …",108,[[["address",3]]]],[10,"ensure_mapped","","Ensure that a range of pages is mmapped (or equivalent).  …",108,[[["address",3],["sidemetadata",3]],["result",6]]],[11,"map_metadata","","Map metadata memory for a given chunk",108,[[["address",3],["sidemetadata",3]],["result",6]]],[10,"is_mapped_address","","Is the page pointed to by this address mapped ? @param …",108,[[["address",3]]]],[10,"protect","","Mark a number of pages as inaccessible. @param start …",108,[[["address",3]]]],[0,"fragmented_mapper","mmtk::util::heap::layout","",null,null],[4,"MapState","mmtk::util::heap::layout::fragmented_mapper","",null,null],[13,"Unmapped","","",109,null],[13,"Mapped","","",109,null],[13,"Protected","","",109,null],[17,"MMAP_NUM_CHUNKS","","",null,null],[17,"LOG_MAPPABLE_BYTES","","",null,null],[17,"LOG_MMAP_CHUNKS_PER_SLAB","","",null,null],[17,"LOG_MMAP_SLAB_BYTES","","",null,null],[17,"MMAP_SLAB_EXTENT","","",null,null],[17,"MMAP_SLAB_MASK","","",null,null],[17,"LOG_MAX_SLABS","","Maximum number of slabs, which determines the maximum …",null,null],[17,"MAX_SLABS","","",null,null],[17,"LOG_SLAB_TABLE_SIZE","","Parameters for the slab table.  The hash function …",null,null],[17,"HASH_MASK","","",null,null],[17,"SLAB_TABLE_SIZE","","",null,null],[17,"SENTINEL","","",null,null],[6,"Slab","","",null,null],[3,"FragmentedMapper","","",null,null],[12,"lock","","",110,null],[12,"free_slab_index","","",110,null],[12,"free_slabs","","",110,null],[12,"slab_table","","",110,null],[12,"slab_map","","",110,null],[11,"new","","",110,[[]]],[11,"new_slab","","",110,[[],["box",3]]],[11,"hash","","",110,[[["address",3]]]],[11,"slab_table","","",110,[[["address",3]],["option",4]]],[11,"get_or_allocate_slab_table","","",110,[[["address",3]]]],[11,"mut_self","","",110,[[]]],[11,"get_or_optionally_allocate_slab_table","","",110,[[["address",3]],["option",4]]],[11,"slab_table_for","","",110,[[["address",3]],["option",4]]],[11,"commit_free_slab","","Take a free slab of chunks from the freeSlabs array, and …",110,[[]]],[11,"chunk_index_to_address","","",110,[[["address",3]],["address",3]]],[11,"slab_align_down","","@param addr an address @return the base address of the …",110,[[["address",3]],["address",3]]],[11,"slab_limit","","@param addr an address @return the base address of the …",110,[[["address",3]],["address",3]]],[11,"chunk_index","","@param slab Address of the slab @param addr Address …",110,[[["address",3]]]],[0,"heap_layout","mmtk::util::heap::layout","",null,null],[6,"VMMap","mmtk::util::heap::layout::heap_layout","",null,null],[6,"Mmapper","","",null,null],[0,"map","mmtk::util::heap::layout","",null,null],[8,"Map","mmtk::util::heap::layout::map","",null,null],[16,"FreeList","","",111,null],[10,"new","","",111,[[]]],[10,"insert","","",111,[[["address",3],["spacedescriptor",3]]]],[10,"create_freelist","","",111,[[["commonfreelistpageresource",3]],["box",3]]],[10,"create_parent_freelist","","",111,[[["commonfreelistpageresource",3]],["box",3]]],[10,"allocate_contiguous_chunks","","",111,[[["spacedescriptor",3],["address",3]],["address",3]]],[10,"get_next_contiguous_region","","",111,[[["address",3]],["address",3]]],[10,"get_contiguous_region_chunks","","",111,[[["address",3]]]],[10,"get_contiguous_region_size","","",111,[[["address",3]]]],[10,"free_all_chunks","","",111,[[["address",3]]]],[10,"free_contiguous_chunks","","",111,[[["address",3]]]],[11,"boot","","",111,[[]]],[10,"finalize_static_space_map","","",111,[[["address",3]]]],[10,"is_finalized","","",111,[[]]],[10,"get_discontig_freelist_pr_ordinal","","",111,[[["commonfreelistpageresource",3]]]],[10,"get_descriptor_for_address","","",111,[[["address",3]],["spacedescriptor",3]]],[11,"get_chunk_index","","",111,[[["address",3]]]],[11,"address_for_chunk_index","","",111,[[],["address",3]]],[10,"add_to_cumulative_committed_pages","","",111,[[]]],[0,"map64","mmtk::util::heap::layout","",null,null],[17,"NON_MAP_FRACTION","mmtk::util::heap::layout::map64","",null,null],[3,"Map64","","",null,null],[12,"fl_page_resources","","",112,null],[12,"fl_map","","",112,null],[12,"finalized","","",112,null],[12,"descriptor_map","","",112,null],[12,"base_address","","",112,null],[12,"high_water","","",112,null],[12,"cumulative_committed_pages","","",112,null],[11,"mut_self","","SafetyThe caller needs to guarantee there is no race …",112,[[]]],[11,"space_index","","",112,[[["address",3]],["option",4]]],[11,"is_space_start","","",112,[[["address",3]]]],[0,"freelistpageresource","mmtk::util::heap","",null,null],[3,"CommonFreeListPageResource","mmtk::util::heap::freelistpageresource","",null,null],[12,"free_list","","",113,null],[12,"start","","",113,null],[11,"get_start","","",113,[[],["address",3]]],[11,"resize_freelist","","",113,[[["address",3]]]],[3,"FreeListPageResource","","",null,null],[12,"common","","",114,null],[12,"common_flpr","","",114,null],[12,"meta_data_pages_per_region","","Number of pages to reserve at the start of every …",114,null],[12,"sync","","",114,null],[12,"_p","","",114,null],[3,"FreeListPageResourceSync","","",null,null],[12,"pages_currently_on_freelist","","",115,null],[12,"highwater_mark","","",115,null],[11,"new_contiguous","","",114,[[["map64",3],["address",3]]]],[11,"new_discontiguous","","",114,[[["map64",3]]]],[11,"allocate_contiguous_chunks","","",114,[[["mutexguard",3],["spacedescriptor",3]]]],[11,"free_contiguous_chunk","","",114,[[["address",3]]]],[11,"reserve_metadata","","",114,[[]]],[11,"release_pages","","",114,[[["address",3]]]],[11,"release_free_chunks","","",114,[[["address",3]]]],[0,"heap_meta","mmtk::util::heap","",null,null],[3,"HeapMeta","mmtk::util::heap::heap_meta","",null,null],[12,"heap_cursor","","",116,null],[12,"heap_limit","","",116,null],[12,"total_pages","","",116,null],[11,"new","","",116,[[["address",3]]]],[11,"reserve","","",116,[[],["address",3]]],[11,"get_discontig_start","","",116,[[],["address",3]]],[11,"get_discontig_end","","",116,[[],["address",3]]],[11,"get_total_pages","","",116,[[]]],[0,"monotonepageresource","mmtk::util::heap","",null,null],[3,"MonotonePageResource","mmtk::util::heap::monotonepageresource","",null,null],[12,"common","","",117,null],[12,"meta_data_pages_per_region","","Number of pages to reserve at the start of every …",117,null],[12,"sync","","",117,null],[12,"_p","","",117,null],[3,"MonotonePageResourceSync","","",null,null],[12,"cursor","","Pointer to the next block to be allocated. ",118,null],[12,"sentinel","","The limit of the currently allocated address space. ",118,null],[12,"current_chunk","","Base address of the current chunk of addresses ",118,null],[12,"conditional","","",118,null],[4,"MonotonePageResourceConditional","","",null,null],[13,"Contiguous","","",119,null],[12,"start","mmtk::util::heap::monotonepageresource::MonotonePageResourceConditional","",120,null],[12,"zeroing_cursor","","Current frontier of zeroing, in a separate zeroing thread ",120,null],[12,"zeroing_sentinel","","Current limit of zeroing.  If zeroingCursor < …",120,null],[13,"Discontiguous","mmtk::util::heap::monotonepageresource","",119,null],[11,"new_contiguous","","",117,[[["map64",3],["address",3]]]],[11,"new_discontiguous","","",117,[[["map64",3]]]],[11,"log_chunk_fields","","",117,[[["spacedescriptor",3]]]],[11,"get_region_start","","",117,[[["address",3]],["address",3]]],[11,"reset","","SafetyTODO: I am not sure why this is unsafe.",117,[[]]],[11,"release_pages","","",117,[[["mutexguard",3]]]],[11,"release_pages_extent","","",117,[[["address",3]]]],[11,"move_to_next_chunk","","",117,[[["mutexguard",3]]]],[0,"pageresource","mmtk::util::heap","",null,null],[8,"PageResource","mmtk::util::heap::pageresource","",null,null],[11,"get_new_pages","","Allocate pages from this resource. Simply bump the …",121,[[["spacedescriptor",3],["vmthread",3]],[["result",4],["prallocfail",3],["prallocresult",3]]]],[11,"reserve_pages","","",121,[[]]],[11,"clear_request","","",121,[[]]],[11,"update_zeroing_approach","","",121,[[]]],[11,"skip_concurrent_zeroing","","",121,[[]]],[11,"trigger_concurrent_zeroing","","",121,[[]]],[11,"concurrent_zeroing","","",121,[[]]],[10,"alloc_pages","","",121,[[["spacedescriptor",3],["vmthread",3]],[["result",4],["prallocfail",3],["prallocresult",3]]]],[10,"adjust_for_metadata","","",121,[[]]],[11,"commit_pages","","Commit pages to the page budget.  This is called after …",121,[[["vmthread",3]]]],[11,"reserved_pages","","",121,[[]]],[11,"committed_pages","","",121,[[]]],[10,"common","","",121,[[],["commonpageresource",3]]],[10,"common_mut","","",121,[[],["commonpageresource",3]]],[11,"vm_map","","",121,[[],["map64",3]]],[3,"PRAllocResult","","",null,null],[12,"start","","",122,null],[12,"pages","","",122,null],[12,"new_chunk","","",122,null],[3,"PRAllocFail","","",null,null],[3,"CommonPageResource","","",null,null],[12,"accounting","","",123,null],[12,"contiguous","","",123,null],[12,"growable","","",123,null],[12,"vm_map","","",123,null],[12,"head_discontiguous_region","","",123,null],[11,"new","","",123,[[["map64",3]],["commonpageresource",3]]],[11,"grow_discontiguous_space","","Extend the virtual memory associated with a particular …",123,[[["spacedescriptor",3]],["address",3]]],[11,"release_discontiguous_chunks","","Release one or more contiguous chunks associated with a …",123,[[["address",3]]]],[11,"release_all_chunks","","",123,[[]]],[11,"get_head_discontiguous_region","","",123,[[],["address",3]]],[0,"space_descriptor","mmtk::util::heap","",null,null],[17,"TYPE_BITS","mmtk::util::heap::space_descriptor","",null,null],[17,"TYPE_SHARED","","",null,null],[17,"TYPE_CONTIGUOUS","","",null,null],[17,"TYPE_CONTIGUOUS_HI","","",null,null],[17,"TYPE_MASK","","",null,null],[17,"SIZE_SHIFT","","",null,null],[17,"SIZE_BITS","","",null,null],[17,"EXPONENT_SHIFT","","",null,null],[17,"EXPONENT_BITS","","",null,null],[17,"MANTISSA_SHIFT","","",null,null],[17,"MANTISSA_BITS","","",null,null],[17,"BASE_EXPONENT","","",null,null],[17,"INDEX_MASK","","",null,null],[17,"INDEX_SHIFT","","",null,null],[7,"DISCONTIGUOUS_SPACE_INDEX","","",null,null],[17,"DISCONTIG_INDEX_INCREMENT","","",null,null],[3,"SpaceDescriptor","","",null,null],[12,"0","","",124,null],[18,"UNINITIALIZED","","",124,null],[11,"create_descriptor_from_heap_range","","",124,[[["address",3]],["spacedescriptor",3]]],[11,"create_descriptor","","",124,[[],["spacedescriptor",3]]],[11,"is_empty","","",124,[[]]],[11,"is_contiguous","","",124,[[]]],[11,"is_contiguous_hi","","",124,[[]]],[11,"get_start","","",124,[[],["address",3]]],[11,"get_extent","","",124,[[]]],[11,"get_index","","",124,[[]]],[0,"vmrequest","mmtk::util::heap","",null,null],[4,"VMRequest","mmtk::util::heap::vmrequest","",null,null],[13,"RequestDiscontiguous","","",125,null],[13,"RequestFixed","","",125,null],[12,"start","mmtk::util::heap::vmrequest::VMRequest","",126,null],[12,"extent","","",126,null],[12,"top","","",126,null],[13,"RequestExtent","mmtk::util::heap::vmrequest","",125,null],[12,"extent","mmtk::util::heap::vmrequest::VMRequest","",127,null],[12,"top","","",127,null],[13,"RequestFraction","mmtk::util::heap::vmrequest","",125,null],[12,"frac","mmtk::util::heap::vmrequest::VMRequest","",128,null],[12,"top","","",128,null],[11,"is_discontiguous","mmtk::util::heap::vmrequest","",125,[[]]],[11,"common64bit","","",125,[[]]],[11,"discontiguous","","",125,[[]]],[11,"fixed_size","","",125,[[]]],[11,"fraction","","",125,[[]]],[11,"high_fixed_size","","",125,[[]]],[11,"fixed_extent","","",125,[[]]],[0,"logger","mmtk::util","Logger initialization",null,null],[5,"try_init","mmtk::util::logger","Attempt to init a env_logger for MMTk.",null,[[],[["setloggererror",3],["result",4]]]],[0,"malloc","mmtk::util","Various malloc implementations (conditionally compiled by …",null,null],[5,"calloc","mmtk::util::malloc","",null,[[]]],[5,"free","","",null,[[]]],[5,"malloc_usable_size","","",null,[[]]],[0,"options","mmtk::util","MMTk command line options.",null,null],[4,"NurseryZeroingOptions","mmtk::util::options","",null,null],[13,"Temporal","","",129,null],[13,"Nontemporal","","",129,null],[13,"Concurrent","","",129,null],[13,"Adaptive","","",129,null],[4,"PlanSelector","","",null,null],[13,"NoGC","","",130,null],[13,"SemiSpace","","",130,null],[13,"GenCopy","","",130,null],[13,"MarkSweep","","",130,null],[3,"UnsafeOptionsWrapper","","",null,null],[12,"0","","",131,null],[11,"new","","",131,[[["options",3]],["unsafeoptionswrapper",3]]],[11,"process","","SafetyThis method is not thread safe, as internally it …",131,[[]]],[5,"always_valid","","",null,[[]]],[3,"Options","","",null,null],[12,"plan","","",132,null],[12,"threads","","",132,null],[12,"use_short_stack_scans","","",132,null],[12,"use_return_barrier","","",132,null],[12,"eager_complete_sweep","","",132,null],[12,"ignore_system_g_c","","",132,null],[12,"variable_size_heap","","",132,null],[12,"no_finalizer","","",132,null],[12,"no_reference_types","","",132,null],[12,"nursery_zeroing","","",132,null],[12,"verbose","","",132,null],[12,"stress_factor","","",132,null],[12,"analysis_factor","","",132,null],[12,"vm_space","","",132,null],[12,"vm_space_size","","",132,null],[11,"set_from_str","","",132,[[]]],[11,"set_from_camelcase_str","","",132,[[]]],[0,"sanity","mmtk::util","Sanity checker for GC.",null,null],[0,"memory_scan","mmtk::util::sanity","",null,null],[5,"scan_region","mmtk::util::sanity::memory_scan","",null,[[]]],[0,"sanity_checker","mmtk::util::sanity","",null,null],[3,"SanityChecker","mmtk::util::sanity::sanity_checker","",null,null],[12,"refs","","",133,null],[11,"new","","",133,[[]]],[3,"ScheduleSanityGC","","",null,null],[12,"_plan","","",134,null],[12,"_p","","",134,null],[11,"new","","",134,[[]]],[3,"SanityPrepare","","",null,null],[12,"plan","","",135,null],[12,"_p","","",135,null],[11,"new","","",135,[[]]],[3,"SanityRelease","","",null,null],[12,"plan","","",136,null],[12,"_p","","",136,null],[11,"new","","",136,[[]]],[3,"SanityGCProcessEdges","","",null,null],[12,"base","","",137,null],[0,"side_metadata","mmtk::util","Side metadata implementation. This is a generic module to …",null,null],[0,"constants","mmtk::util::side_metadata","",null,null],[17,"GLOBAL_SIDE_METADATA_BASE_ADDRESS","mmtk::util::side_metadata::constants","",null,null],[17,"LOG_GLOBAL_SIDE_METADATA_WORST_CASE_RATIO","","",null,null],[17,"LOG_MAX_GLOBAL_SIDE_METADATA_SIZE","","",null,null],[17,"LOCAL_SIDE_METADATA_BASE_ADDRESS","","",null,null],[0,"global","mmtk::util::side_metadata","",null,null],[4,"SideMetadataScope","mmtk::util::side_metadata::global","",null,null],[13,"Global","","",138,null],[13,"PolicySpecific","","",138,null],[11,"is_global","","",138,[[]]],[3,"SideMetadataSpec","","This struct stores the specification of a side metadata …",null,null],[12,"scope","","",139,null],[12,"offset","","",139,null],[12,"log_num_of_bits","","",139,null],[12,"log_min_obj_size","","",139,null],[3,"SideMetadataContext","","This struct stores all the side metadata specs for a …",null,null],[12,"global","","",140,null],[12,"local","","",140,null],[11,"new_global_specs","","",140,[[],[["vec",3],["sidemetadataspec",3]]]],[3,"SideMetadata","","",null,null],[12,"context","","",141,null],[12,"accounting","","",141,null],[11,"new","","",141,[[["sidemetadatacontext",3]],["sidemetadata",3]]],[11,"reserved_pages","","",141,[[]]],[11,"try_map_metadata_space","","Tries to map the required metadata space and returns <code>true</code> …",141,[[["address",3]],["result",6]]],[11,"try_map_metadata_address_range","","Tries to map the required metadata address range, without …",141,[[["address",3]],["result",6]]],[11,"map_metadata_internal","","The internal function to mmap metadata",141,[[["address",3]],["result",6]]],[11,"ensure_unmap_metadata_space","","Unmap the corresponding metadata space or panic.",141,[[["address",3]]]],[5,"ensure_metadata_is_mapped","","",null,[[["address",3],["sidemetadataspec",3]]]],[5,"load_atomic","","",null,[[["address",3],["sidemetadataspec",3]]]],[5,"store_atomic","","",null,[[["address",3],["sidemetadataspec",3]]]],[5,"compare_exchange_atomic","","",null,[[["address",3],["sidemetadataspec",3]]]],[5,"fetch_add_atomic","","",null,[[["address",3],["sidemetadataspec",3]]]],[5,"fetch_sub_atomic","","",null,[[["address",3],["sidemetadataspec",3]]]],[5,"load","","Non-atomic load of metadata.",null,[[["address",3],["sidemetadataspec",3]]]],[5,"store","","Non-atomic store of metadata.",null,[[["address",3],["sidemetadataspec",3]]]],[5,"bzero_metadata","","Bulk-zero a specific metadata for a chunk.",null,[[["address",3],["sidemetadataspec",3]]]],[0,"helpers","mmtk::util::side_metadata","",null,null],[5,"address_to_contiguous_meta_address","mmtk::util::side_metadata::helpers","Performs address translation in contiguous metadata …",null,[[["address",3],["sidemetadataspec",3]],["address",3]]],[5,"ensure_munmap_metadata","","Unmaps the specified metadata range, or panics.",null,[[["address",3]]]],[5,"ensure_munmap_contiguos_metadata_space","","Unmaps a metadata space (<code>spec</code>) for the specified data …",null,[[["address",3],["sidemetadataspec",3]]]],[5,"try_mmap_contiguous_metadata_space","","Tries to mmap the metadata space (<code>spec</code>) for the specified …",null,[[["address",3],["sidemetadataspec",3]],["result",6]]],[5,"try_mmap_metadata_address_range","","Tries to map the specified metadata address range (<code>start</code> …",null,[[["address",3]],["result",6]]],[5,"try_mmap_metadata","","Tries to map the specified metadata space (<code>start</code> and <code>size</code>…",null,[[["address",3]],["result",6]]],[5,"address_to_meta_address","","Performs the translation of data address (<code>data_addr</code>) to …",null,[[["address",3],["sidemetadataspec",3]],["address",3]]],[5,"addr_rshift","","",null,[[["sidemetadataspec",3]]]],[5,"metadata_address_range_size","","",null,[[["sidemetadataspec",3]]]],[5,"meta_byte_lshift","","",null,[[["address",3],["sidemetadataspec",3]]]],[5,"meta_byte_mask","","",null,[[["sidemetadataspec",3]]]],[0,"side_metadata_tests","mmtk::util::side_metadata","",null,null],[0,"statistics","mmtk::util","Utils for collecting statistics.",null,null],[0,"counter","mmtk::util::statistics","",null,null],[0,"event_counter","mmtk::util::statistics::counter","",null,null],[3,"EventCounter","mmtk::util::statistics::counter::event_counter","This file implements a simple event counter (counting …",null,null],[12,"name","","",142,null],[12,"implicitly_start","","",142,null],[12,"merge_phases","","",142,null],[12,"count","","",142,null],[12,"current_count","","",142,null],[12,"running","","",142,null],[12,"stats","","",142,null],[11,"new","","",142,[[["string",3],["arc",3],["sharedstats",3]]]],[11,"inc","","Increment the event counter",142,[[]]],[11,"inc_by","","Increment the event counter by provided value",142,[[]]],[11,"print_current","","",142,[[]]],[11,"print_value","","",142,[[]]],[0,"long_counter","mmtk::util::statistics::counter","",null,null],[3,"LongCounter","mmtk::util::statistics::counter::long_counter","",null,null],[12,"name","","",143,null],[12,"implicitly_start","","",143,null],[12,"merge_phases","","",143,null],[12,"count","","",143,null],[12,"start_value","","",143,null],[12,"total_count","","",143,null],[12,"running","","",143,null],[12,"stats","","",143,null],[11,"new","","",143,[[["string",3],["arc",3],["sharedstats",3]]]],[11,"print_value","","",143,[[]]],[6,"Timer","","",null,null],[0,"size_counter","mmtk::util::statistics::counter","",null,null],[3,"SizeCounter","mmtk::util::statistics::counter::size_counter","",null,null],[12,"units","","",144,null],[12,"volume","","",144,null],[11,"new","","",144,[[["mutex",3],["arc",3]]]],[11,"inc","","Increment the event counter by provided value",144,[[]]],[11,"start","","Start this counter",144,[[]]],[11,"stop","","Stop this counter",144,[[]]],[11,"print_current_units","","Print current (mid-phase) units",144,[[]]],[11,"print_current_volume","","Print (mid-phase) volume",144,[[]]],[11,"print_units","","Print units",144,[[]]],[11,"print_volume","","Print volume",144,[[]]],[8,"Counter","mmtk::util::statistics::counter","",null,null],[10,"start","","",145,[[]]],[10,"stop","","",145,[[]]],[10,"phase_change","","",145,[[]]],[10,"print_count","","",145,[[]]],[10,"print_total","","",145,[[["option",4]]]],[10,"print_min","","",145,[[]]],[10,"print_max","","",145,[[]]],[10,"print_last","","",145,[[]]],[10,"merge_phases","","",145,[[]]],[10,"implicitly_start","","",145,[[]]],[10,"name","","",145,[[],["string",3]]],[8,"Diffable","","",null,null],[16,"Val","","",146,null],[10,"current_value","","",146,[[]]],[10,"diff","","",146,[[]]],[10,"print_diff","","",146,[[]]],[3,"MonotoneNanoTime","","",null,null],[0,"stats","mmtk::util::statistics","",null,null],[17,"MAX_PHASES","mmtk::util::statistics::stats","",null,null],[17,"MAX_COUNTERS","","",null,null],[3,"SharedStats","","",null,null],[12,"phase","","",147,null],[12,"gathering_stats","","",147,null],[11,"increment_phase","","",147,[[]]],[11,"get_phase","","",147,[[]]],[11,"get_gathering_stats","","",147,[[]]],[11,"set_gathering_stats","","",147,[[]]],[3,"Stats","","",null,null],[12,"gc_count","","",148,null],[12,"total_time","","",148,null],[12,"shared","","",148,null],[12,"counters","","",148,null],[12,"exceeded_phase_limit","","",148,null],[11,"new","","",148,[[]]],[11,"new_event_counter","","",148,[[],[["mutex",3],["arc",3]]]],[11,"new_size_counter","","",148,[[],[["mutex",3],["sizecounter",3]]]],[11,"new_timer","","",148,[[],[["arc",3],["mutex",3]]]],[11,"start_gc","","",148,[[]]],[11,"end_gc","","",148,[[]]],[11,"print_stats","","",148,[[["mmtk",3]]]],[11,"print_column_names","","",148,[[["hashmap",3]]]],[11,"start_all","","",148,[[]]],[11,"stop_all","","",148,[[["mmtk",3]]]],[11,"stop_all_counters","","",148,[[]]],[11,"get_phase","","",148,[[]]],[11,"get_gathering_stats","","",148,[[]]],[0,"treadmill","mmtk::util","A treadmill implementation.",null,null],[3,"TreadMill","mmtk::util::treadmill","",null,null],[12,"from_space","","",149,null],[12,"to_space","","",149,null],[12,"collect_nursery","","",149,null],[12,"alloc_nursery","","",149,null],[11,"new","","",149,[[]]],[11,"add_to_treadmill","","",149,[[["address",3]]]],[11,"collect_nursery","","",149,[[],[["vec",3],["address",3]]]],[11,"collect","","",149,[[],[["vec",3],["address",3]]]],[11,"copy","","",149,[[["address",3]]]],[11,"to_space_empty","","",149,[[]]],[11,"from_space_empty","","",149,[[]]],[11,"nursery_empty","","",149,[[]]],[11,"flip","","",149,[[]]],[0,"generic_freelist","mmtk::util","A very simple, generic malloc-free allocator",null,null],[17,"FAILURE","mmtk::util::generic_freelist","",null,null],[17,"MAX_HEADS","","",null,null],[17,"TOTAL_BITS","","",null,null],[17,"UNIT_BITS","","",null,null],[17,"MAX_UNITS","","",null,null],[17,"NEXT_MASK","","",null,null],[17,"PREV_MASK","","",null,null],[17,"FREE_MASK","","",null,null],[17,"MULTI_MASK","","",null,null],[17,"COALESC_MASK","","",null,null],[17,"SIZE_MASK","","",null,null],[8,"GenericFreeList","","",null,null],[10,"head","","",150,[[]]],[10,"heads","","",150,[[]]],[10,"get_entry","","",150,[[]]],[10,"set_entry","","",150,[[]]],[11,"alloc","","",150,[[]]],[11,"alloc_from_unit","","",150,[[]]],[11,"free","","Free a previously allocated contiguous lump of units",150,[[]]],[11,"size","","",150,[[]]],[11,"initialize_heap","","",150,[[]]],[11,"add_to_free","","",150,[[]]],[11,"get_right","","",150,[[]]],[11,"set_sentinel","","",150,[[]]],[11,"get_size","","",150,[[]]],[11,"set_size","","",150,[[]]],[11,"get_free","","",150,[[]]],[11,"set_free","","",150,[[]]],[11,"get_next","","",150,[[]]],[11,"set_next","","",150,[[]]],[11,"get_prev","","",150,[[]]],[11,"set_prev","","",150,[[]]],[11,"get_left","","",150,[[]]],[11,"is_coalescable","","",150,[[]]],[11,"clear_uncoalescable","","",150,[[]]],[11,"set_uncoalescable","","",150,[[]]],[11,"is_multi","","",150,[[]]],[11,"is_free","","",150,[[]]],[11,"get_lo_entry","","",150,[[]]],[11,"get_hi_entry","","",150,[[]]],[11,"set_lo_entry","","",150,[[]]],[11,"set_hi_entry","","",150,[[]]],[11,"__alloc","","",150,[[]]],[11,"__split","","",150,[[]]],[11,"__coalesce","","",150,[[]]],[11,"__remove_from_free","","",150,[[]]],[0,"int_array_freelist","mmtk::util","Implementation of GenericFreeList by an int vector.",null,null],[3,"IntArrayFreeList","mmtk::util::int_array_freelist","",null,null],[12,"head","","",151,null],[12,"heads","","",151,null],[12,"table","","",151,null],[12,"parent","","",151,null],[11,"new","","",151,[[]]],[11,"from_parent","","",151,[[["intarrayfreelist",3]]]],[11,"table","","",151,[[],["vec",3]]],[11,"table_mut","","",151,[[],["vec",3]]],[11,"resize_freelist","","",151,[[]]],[0,"raw_memory_freelist","mmtk::util","Implementation of GenericFreeList backed by raw memory, …",null,null],[17,"LOG_ENTRY_BITS","mmtk::util::raw_memory_freelist","log2 of the number of bits used by a free list entry (two …",null,null],[17,"LOG_BYTES_IN_ENTRY","","log2 of the number of bytes used by a free list entry …",null,null],[17,"LOG_BYTES_IN_UNIT","","log2 of the number of bytes used by a free list unit ",null,null],[3,"RawMemoryFreeList","","",null,null],[12,"head","","",152,null],[12,"heads","","",152,null],[12,"base","","",152,null],[12,"limit","","",152,null],[12,"high_water","","",152,null],[12,"max_units","","",152,null],[12,"grain","","",152,null],[12,"current_units","","",152,null],[12,"pages_per_block","","",152,null],[11,"units_per_block","","",152,[[]]],[11,"units_in_first_block","","",152,[[]]],[11,"default_block_size","","",152,[[]]],[11,"size_in_pages","","",152,[[]]],[11,"new","","",152,[[["address",3]]]],[11,"current_capacity","","",152,[[]]],[11,"grow_freelist","","",152,[[]]],[11,"grow_list_by_blocks","","",152,[[]]],[11,"raise_high_water","","",152,[[]]],[11,"mmap","","",152,[[["address",3]]]],[11,"get_limit","","",152,[[],["address",3]]],[0,"synchronized_counter","mmtk::util","",null,null],[3,"SynchronizedCounter","mmtk::util::synchronized_counter","",null,null],[12,"count","","",153,null],[11,"new","","",153,[[]]],[11,"reset","","",153,[[]]],[11,"increment","","",153,[[]]],[11,"peek","","",153,[[]]],[3,"SynchronizedCounter","mmtk::util","",null,null],[12,"count","","",153,null],[0,"vm","mmtk","MMTk-to-VM interface: the VMBinding trait.",null,null],[0,"active_plan","mmtk::vm","",null,null],[3,"SynchronizedMutatorIterator","mmtk::vm::active_plan","",null,null],[12,"_guard","","",154,null],[12,"start","","",154,null],[12,"phantom","","",154,null],[8,"ActivePlan","","VM-specific methods for the current plan.",null,null],[10,"global","","Return a reference to the current plan.",155,[[],["plan",8]]],[10,"is_mutator","","Return whether there is a mutator created and associated …",155,[[["vmthread",3]]]],[10,"mutator","","Return a <code>Mutator</code> reference for the thread.",155,[[["vmmutatorthread",3]],["mutator",3]]],[10,"reset_mutator_iterator","","Reset the mutator iterator so that <code>get_next_mutator()</code> …",155,[[]]],[10,"get_next_mutator","","Return the next mutator if there is any. This method …",155,[[],[["option",4],["mutator",3]]]],[11,"mutators","","A utility method to provide a thread-safe mutator …",155,[[],["synchronizedmutatoriterator",3]]],[10,"number_of_mutators","","Return the total count of mutators.",155,[[]]],[0,"collection","mmtk::vm","",null,null],[8,"Collection","mmtk::vm::collection","VM-specific methods for garbage collection.",null,null],[10,"stop_all_mutators","","Stop all the mutator threads. MMTk calls this method when …",156,[[["vmworkerthread",3]]]],[10,"resume_mutators","","Resume all the mutator threads, the opposite of the …",156,[[["vmworkerthread",3]]]],[10,"block_for_gc","","Block the current thread for GC. This is called when an …",156,[[["vmmutatorthread",3]]]],[10,"spawn_worker_thread","","Ask the VM to spawn a GC thread for MMTk. A GC thread may …",156,[[["gcworker",6],["option",4],["vmthread",3]]]],[10,"prepare_mutator","","Allow VM-specific behaviors for a mutator after all the …",156,[[["vmworkerthread",3],["vmmutatorthread",3]]]],[11,"out_of_memory","","Inform the VM for an out-of-memory error. The VM can …",156,[[["vmthread",3]]]],[11,"schedule_finalization","","Inform the VM to schedule finalization threads.",156,[[["vmworkerthread",3]]]],[0,"object_model","mmtk::vm","",null,null],[8,"ObjectModel","mmtk::vm::object_model","VM-specific methods for object model.",null,null],[18,"GC_BYTE_OFFSET","","The offset of the GC byte from the object reference, in …",157,null],[10,"copy","","Copy an object and return the address of the new object. …",157,[[["allocationsemantics",4],["objectreference",3]],["objectreference",3]]],[10,"copy_to","","Copy an object. This is required for delayed-copy …",157,[[["objectreference",3],["address",3]],["address",3]]],[10,"get_reference_when_copied_to","","Return the reference that an object will be referred to …",157,[[["objectreference",3],["address",3]],["objectreference",3]]],[10,"get_current_size","","Return the size used by an object.",157,[[["objectreference",3]]]],[10,"get_type_descriptor","","Get the type descriptor for an object.",157,[[["objectreference",3]]]],[10,"object_start_ref","","Return the lowest address of the storage associated with …",157,[[["objectreference",3]],["address",3]]],[10,"ref_to_address","","Return an address guaranteed to be inside the storage …",157,[[["objectreference",3]],["address",3]]],[10,"dump_object","","Dump debugging information for an object.",157,[[["objectreference",3]]]],[0,"reference_glue","mmtk::vm","",null,null],[8,"ReferenceGlue","mmtk::vm::reference_glue","VM-specific methods for reference processing.",null,null],[11,"clear_referent","","Weak and soft references always clear the referent before …",158,[[["objectreference",3]]]],[10,"get_referent","","Get the referent from a reference.",158,[[["objectreference",3]],["objectreference",3]]],[10,"set_referent","","Set the referent in a reference.",158,[[["objectreference",3]]]],[10,"process_reference","","Process a reference with the current semantics and return …",158,[[["objectreference",3],["vmworkerthread",3]],["objectreference",3]]],[0,"scanning","mmtk::vm","",null,null],[8,"Scanning","mmtk::vm::scanning","VM-specific methods for scanning roots/objects.",null,null],[18,"SCAN_MUTATORS_IN_SAFEPOINT","","Scan stack roots after all mutators are paused.",159,null],[18,"SINGLE_THREAD_MUTATOR_SCANNING","","Scan all the mutators within a single work packet.",159,null],[10,"scan_object","","Delegated scanning of a object, processing each pointer …",159,[[["objectreference",3],["vmworkerthread",3]]]],[10,"notify_initial_thread_scan_complete","","MMTk calls this method at the first time during a …",159,[[["vmworkerthread",3]]]],[10,"scan_objects","","Bulk scanning of objects, processing each pointer field …",159,[[["gcworker",6]]]],[10,"scan_thread_roots","","Scan all the mutators for roots.",159,[[]]],[10,"scan_thread_root","","Scan one mutator for roots.",159,[[["mutator",3],["vmworkerthread",3]]]],[10,"scan_vm_specific_roots","","Scan VM-specific roots. The creation of all root scan …",159,[[]]],[10,"supports_return_barrier","","Return whether the VM supports return barriers. This is …",159,[[]]],[8,"ActivePlan","mmtk::vm","VM-specific methods for the current plan.",null,null],[10,"global","","Return a reference to the current plan.",155,[[],["plan",8]]],[10,"is_mutator","","Return whether there is a mutator created and associated …",155,[[["vmthread",3]]]],[10,"mutator","","Return a <code>Mutator</code> reference for the thread.",155,[[["vmmutatorthread",3]],["mutator",3]]],[10,"reset_mutator_iterator","","Reset the mutator iterator so that <code>get_next_mutator()</code> …",155,[[]]],[10,"get_next_mutator","","Return the next mutator if there is any. This method …",155,[[],[["option",4],["mutator",3]]]],[11,"mutators","mmtk::vm::active_plan","A utility method to provide a thread-safe mutator …",155,[[],["synchronizedmutatoriterator",3]]],[10,"number_of_mutators","mmtk::vm","Return the total count of mutators.",155,[[]]],[8,"Collection","","VM-specific methods for garbage collection.",null,null],[10,"stop_all_mutators","","Stop all the mutator threads. MMTk calls this method when …",156,[[["vmworkerthread",3]]]],[10,"resume_mutators","","Resume all the mutator threads, the opposite of the …",156,[[["vmworkerthread",3]]]],[10,"block_for_gc","","Block the current thread for GC. This is called when an …",156,[[["vmmutatorthread",3]]]],[10,"spawn_worker_thread","","Ask the VM to spawn a GC thread for MMTk. A GC thread may …",156,[[["gcworker",6],["option",4],["vmthread",3]]]],[10,"prepare_mutator","","Allow VM-specific behaviors for a mutator after all the …",156,[[["vmworkerthread",3],["vmmutatorthread",3]]]],[11,"out_of_memory","mmtk::vm::collection","Inform the VM for an out-of-memory error. The VM can …",156,[[["vmthread",3]]]],[11,"schedule_finalization","","Inform the VM to schedule finalization threads.",156,[[["vmworkerthread",3]]]],[8,"ObjectModel","mmtk::vm","VM-specific methods for object model.",null,null],[18,"GC_BYTE_OFFSET","mmtk::vm::object_model","The offset of the GC byte from the object reference, in …",157,null],[10,"copy","mmtk::vm","Copy an object and return the address of the new object. …",157,[[["allocationsemantics",4],["objectreference",3]],["objectreference",3]]],[10,"copy_to","","Copy an object. This is required for delayed-copy …",157,[[["objectreference",3],["address",3]],["address",3]]],[10,"get_reference_when_copied_to","","Return the reference that an object will be referred to …",157,[[["objectreference",3],["address",3]],["objectreference",3]]],[10,"get_current_size","","Return the size used by an object.",157,[[["objectreference",3]]]],[10,"get_type_descriptor","","Get the type descriptor for an object.",157,[[["objectreference",3]]]],[10,"object_start_ref","","Return the lowest address of the storage associated with …",157,[[["objectreference",3]],["address",3]]],[10,"ref_to_address","","Return an address guaranteed to be inside the storage …",157,[[["objectreference",3]],["address",3]]],[10,"dump_object","","Dump debugging information for an object.",157,[[["objectreference",3]]]],[8,"ReferenceGlue","","VM-specific methods for reference processing.",null,null],[11,"clear_referent","mmtk::vm::reference_glue","Weak and soft references always clear the referent before …",158,[[["objectreference",3]]]],[10,"get_referent","mmtk::vm","Get the referent from a reference.",158,[[["objectreference",3]],["objectreference",3]]],[10,"set_referent","","Set the referent in a reference.",158,[[["objectreference",3]]]],[10,"process_reference","","Process a reference with the current semantics and return …",158,[[["objectreference",3],["vmworkerthread",3]],["objectreference",3]]],[8,"Scanning","","VM-specific methods for scanning roots/objects.",null,null],[18,"SCAN_MUTATORS_IN_SAFEPOINT","mmtk::vm::scanning","Scan stack roots after all mutators are paused.",159,null],[18,"SINGLE_THREAD_MUTATOR_SCANNING","","Scan all the mutators within a single work packet.",159,null],[10,"scan_object","mmtk::vm","Delegated scanning of a object, processing each pointer …",159,[[["objectreference",3],["vmworkerthread",3]]]],[10,"notify_initial_thread_scan_complete","","MMTk calls this method at the first time during a …",159,[[["vmworkerthread",3]]]],[10,"scan_objects","","Bulk scanning of objects, processing each pointer field …",159,[[["gcworker",6]]]],[10,"scan_thread_roots","","Scan all the mutators for roots.",159,[[]]],[10,"scan_thread_root","","Scan one mutator for roots.",159,[[["mutator",3],["vmworkerthread",3]]]],[10,"scan_vm_specific_roots","","Scan VM-specific roots. The creation of all root scan …",159,[[]]],[10,"supports_return_barrier","","Return whether the VM supports return barriers. This is …",159,[[]]],[8,"VMBinding","","The <code>VMBinding</code> trait associates with each trait, and …",null,null],[16,"VMObjectModel","","",160,null],[16,"VMScanning","","",160,null],[16,"VMCollection","","",160,null],[16,"VMActivePlan","","",160,null],[16,"VMReferenceGlue","","",160,null],[18,"ALIGNMENT_VALUE","","A value to fill in alignment gaps. This value can be used …",160,null],[18,"LOG_MIN_ALIGNMENT","","Allowed minimal alignment.",160,null],[18,"MIN_ALIGNMENT","","Allowed minimal alignment in bytes.",160,null],[18,"MAX_ALIGNMENT_SHIFT","","Allowed maximum alignment as shift by min alignment.    ",160,null],[18,"MAX_ALIGNMENT","","Allowed maximum alignment in bytes.",160,null],[18,"ALLOC_END_ALIGNMENT","","This value is used to assert if the cursor is reasonable …",160,null],[3,"MMTK","mmtk","An MMTk instance. MMTk allows multiple instances to run …",null,null],[12,"plan","","",3,null],[12,"reference_processors","","",3,null],[12,"finalizable_processor","","",3,null],[12,"options","","",3,null],[12,"scheduler","","",3,null],[12,"sanity_checker","","",3,null],[12,"inside_harness","","",3,null],[4,"AllocationSemantics","","Allocation semantics that MMTk provides. Each allocation …",null,null],[13,"Default","","",29,null],[13,"Immortal","","",29,null],[13,"Los","","",29,null],[13,"Code","","",29,null],[13,"ReadOnly","","",29,null],[4,"BarrierSelector","","BarrierSelector describes which barrier to use.",null,null],[13,"NoBarrier","","",17,null],[13,"ObjectBarrier","","",17,null],[8,"CopyContext","","A GC worker\'s context for copying GCs. Each GC plan …",null,null],[16,"VM","","",23,null],[10,"constraints","","",23,[[],["planconstraints",3]]],[10,"init","","",23,[[["vmworkerthread",3]]]],[10,"prepare","","",23,[[]]],[10,"release","","",23,[[]]],[10,"alloc_copy","","",23,[[["allocationsemantics",4],["objectreference",3]],["address",3]]],[11,"post_copy","mmtk::plan::global","",23,[[["allocationsemantics",4],["objectreference",3],["address",3]]]],[11,"copy_check_allocator","","",23,[[["allocationsemantics",4],["objectreference",3]],["allocationsemantics",4]]],[3,"Mutator","mmtk","A mutator is a per-thread data structure that manages …",null,null],[12,"allocators","","",31,null],[12,"barrier","","",31,null],[12,"mutator_tls","","The mutator thread that is bound with this Mutator struct.",31,null],[12,"plan","","",31,null],[12,"config","","",31,null],[8,"MutatorContext","","Each GC plan should provide their implementation of a …",null,null],[10,"prepare","","",32,[[["vmworkerthread",3]]]],[10,"release","","",32,[[["vmworkerthread",3]]]],[10,"alloc","","",32,[[["allocationtype",4]],["address",3]]],[10,"post_alloc","","",32,[[["objectreference",3],["allocationtype",4]]]],[11,"flush_remembered_sets","mmtk::plan::mutator_context","",32,[[]]],[11,"flush","","",32,[[]]],[10,"get_tls","mmtk","",32,[[],["vmmutatorthread",3]]],[10,"barrier","","",32,[[],["barrier",8]]],[11,"record_modified_node","mmtk::plan::mutator_context","",32,[[["objectreference",3]]]],[8,"Plan","mmtk","A plan describes the global core functionality for all …",null,null],[16,"VM","","",25,null],[10,"constraints","","",25,[[],["planconstraints",3]]],[10,"create_worker_local","","",25,[[["vmworkerthread",3],["mmtk",3]],["workerlocalptr",3]]],[10,"base","","",25,[[],["baseplan",3]]],[10,"schedule_collection","","",25,[[["scheduler",3]]]],[11,"common","mmtk::plan::global","",25,[[],["commonplan",3]]],[11,"mmapper","","",25,[[],["fragmentedmapper",3]]],[11,"options","","",25,[[],["options",3]]],[10,"gc_init","mmtk","",25,[[["map64",3],["arc",3]]]],[10,"get_allocator_mapping","","",25,[[],["enummap",3]]],[11,"in_nursery","mmtk::plan::global","",25,[[]]],[11,"enter_sanity","","",25,[[]]],[11,"leave_sanity","","",25,[[]]],[11,"is_in_sanity","","",25,[[]]],[11,"is_initialized","","",25,[[]]],[10,"prepare","mmtk","",25,[[["vmworkerthread",3]]]],[10,"release","","",25,[[["vmworkerthread",3]]]],[11,"poll","mmtk::plan::global","",25,[[["space",8]]]],[11,"log_poll","","",25,[[["space",8]]]],[10,"collection_required","mmtk","This method controls the triggering of a GC. It is called …",25,[[["space",8]]]],[11,"get_pages_reserved","mmtk::plan::global","",25,[[]]],[11,"get_total_pages","","",25,[[]]],[11,"get_pages_avail","","",25,[[]]],[11,"get_collection_reserve","","",25,[[]]],[10,"get_pages_used","mmtk","",25,[[]]],[11,"is_emergency_collection","mmtk::plan::global","",25,[[]]],[11,"get_free_pages","","",25,[[]]],[11,"handle_user_collection_request","","",25,[[["vmmutatorthread",3]]]],[11,"reset_collection_trigger","","",25,[[]]],[11,"modify_check","","",25,[[["objectreference",3]]]],[8,"TraceLocal","mmtk","This trait and its global counterpart implement the core …",null,null],[10,"process_roots","","",34,[[]]],[10,"process_root_edge","","",34,[[["address",3]]]],[10,"trace_object","","",34,[[["objectreference",3]],["objectreference",3]]],[10,"complete_trace","","",34,[[]]],[10,"release","","",34,[[]]],[10,"process_interior_edge","","",34,[[["objectreference",3],["address",3]]]],[11,"overwrite_reference_during_trace","mmtk::plan::tracelocal","",34,[[]]],[10,"report_delayed_root_edge","mmtk","",34,[[["address",3]]]],[10,"will_not_move_in_current_collection","","",34,[[["objectreference",3]]]],[11,"get_forwarded_reference","mmtk::plan::tracelocal","",34,[[["objectreference",3]],["objectreference",3]]],[11,"get_forwarded_referent","","",34,[[["objectreference",3]],["objectreference",3]]],[11,"retain_referent","","",34,[[["objectreference",3]],["objectreference",3]]],[8,"TransitiveClosure","mmtk","This trait is the fundamental mechanism for performing a …",null,null],[10,"process_edge","","",35,[[["address",3]]]],[10,"process_node","","",35,[[["objectreference",3]]]],[11,"from","mmtk::mmtk","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"into_any","","",0,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",0,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",0,[[],["any",8]]],[11,"as_any_mut","","",0,[[],["any",8]]],[11,"into_any_arc","","",0,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"into_any","","",1,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",1,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",1,[[],["any",8]]],[11,"as_any_mut","","",1,[[],["any",8]]],[11,"into_any_arc","","",1,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"into_any","","",2,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",2,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",2,[[],["any",8]]],[11,"as_any_mut","","",2,[[],["any",8]]],[11,"into_any_arc","","",2,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"into_any","","",3,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",3,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",3,[[],["any",8]]],[11,"as_any_mut","","",3,[[],["any",8]]],[11,"from","mmtk::policy::space","",161,[[]]],[11,"into","","",161,[[]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"into_any","","",161,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",161,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",161,[[],["any",8]]],[11,"as_any_mut","","",161,[[],["any",8]]],[11,"into_any_arc","","",161,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"into_any","","",5,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",5,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",5,[[],["any",8]]],[11,"as_any_mut","","",5,[[],["any",8]]],[11,"into_any_arc","","",5,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"into_any","","",7,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",7,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",7,[[],["any",8]]],[11,"as_any_mut","","",7,[[],["any",8]]],[11,"into_any_arc","","",7,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"into_any","","",8,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",8,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",8,[[],["any",8]]],[11,"as_any_mut","","",8,[[],["any",8]]],[11,"into_any_arc","","",8,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::copyspace","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"into_any","","",9,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",9,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",9,[[],["any",8]]],[11,"as_any_mut","","",9,[[],["any",8]]],[11,"into_any_arc","","",9,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::immortalspace","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"into_any","","",10,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",10,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",10,[[],["any",8]]],[11,"as_any_mut","","",10,[[],["any",8]]],[11,"into_any_arc","","",10,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::largeobjectspace","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"into_any","","",11,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",11,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",11,[[],["any",8]]],[11,"as_any_mut","","",11,[[],["any",8]]],[11,"into_any_arc","","",11,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::lockfreeimmortalspace","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"into_any","","",12,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",12,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",12,[[],["any",8]]],[11,"as_any_mut","","",12,[[],["any",8]]],[11,"into_any_arc","","",12,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::mallocspace::global","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"into_any","","",13,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",13,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",13,[[],["any",8]]],[11,"as_any_mut","","",13,[[],["any",8]]],[11,"into_any_arc","","",13,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::mallocspace::metadata","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"into_any","","",14,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",14,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",14,[[],["any",8]]],[11,"as_any_mut","","",14,[[],["any",8]]],[11,"into_any_arc","","",14,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"into_any","","",15,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",15,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",15,[[],["any",8]]],[11,"as_any_mut","","",15,[[],["any",8]]],[11,"into_any_arc","","",15,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"into_any","","",16,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",16,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",16,[[],["any",8]]],[11,"as_any_mut","","",16,[[],["any",8]]],[11,"into_any_arc","","",16,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::barriers","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"into_any","","",17,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",17,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",17,[[],["any",8]]],[11,"as_any_mut","","",17,[[],["any",8]]],[11,"into_any_arc","","",17,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"into_any","","",18,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",18,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",18,[[],["any",8]]],[11,"as_any_mut","","",18,[[],["any",8]]],[11,"into_any_arc","","",18,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",162,[[]]],[11,"into","","",162,[[]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"into_any","","",162,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",162,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",162,[[],["any",8]]],[11,"as_any_mut","","",162,[[],["any",8]]],[11,"into_any_arc","","",162,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"into_any","","",20,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",20,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",20,[[],["any",8]]],[11,"as_any_mut","","",20,[[],["any",8]]],[11,"into_any_arc","","",20,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::controller_collector_context","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"into_any","","",21,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",21,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",21,[[],["any",8]]],[11,"as_any_mut","","",21,[[],["any",8]]],[11,"into_any_arc","","",21,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"into_any","","",22,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",22,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",22,[[],["any",8]]],[11,"as_any_mut","","",22,[[],["any",8]]],[11,"into_any_arc","","",22,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::global","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"into_any","","",24,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",24,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",24,[[],["any",8]]],[11,"as_any_mut","","",24,[[],["any",8]]],[11,"into_any_arc","","",24,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"into_any","","",26,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",26,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",26,[[],["any",8]]],[11,"as_any_mut","","",26,[[],["any",8]]],[11,"into_any_arc","","",26,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"into_any","","",27,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",27,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",27,[[],["any",8]]],[11,"as_any_mut","","",27,[[],["any",8]]],[11,"into_any_arc","","",27,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"into_any","","",28,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",28,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",28,[[],["any",8]]],[11,"as_any_mut","","",28,[[],["any",8]]],[11,"into_any_arc","","",28,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"into_any","","",29,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",29,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",29,[[],["any",8]]],[11,"as_any_mut","","",29,[[],["any",8]]],[11,"into_any_arc","","",29,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::mutator_context","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"into_any","","",30,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",30,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",30,[[],["any",8]]],[11,"as_any_mut","","",30,[[],["any",8]]],[11,"into_any_arc","","",30,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"into_any","","",31,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",31,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",31,[[],["any",8]]],[11,"as_any_mut","","",31,[[],["any",8]]],[11,"into_any_arc","","",31,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::plan_constraints","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"into_any","","",33,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",33,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",33,[[],["any",8]]],[11,"as_any_mut","","",33,[[],["any",8]]],[11,"into_any_arc","","",33,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::gencopy::gc_work","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"into_any","","",36,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",36,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",36,[[],["any",8]]],[11,"as_any_mut","","",36,[[],["any",8]]],[11,"into_any_arc","","",36,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"into_any","","",37,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",37,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",37,[[],["any",8]]],[11,"as_any_mut","","",37,[[],["any",8]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"into_any","","",38,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",38,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",38,[[],["any",8]]],[11,"as_any_mut","","",38,[[],["any",8]]],[11,"from","mmtk::plan::gencopy::global","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"into_any","","",39,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",39,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",39,[[],["any",8]]],[11,"as_any_mut","","",39,[[],["any",8]]],[11,"into_any_arc","","",39,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::gencopy::mutator","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"into_any","","",40,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",40,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",40,[[],["any",8]]],[11,"as_any_mut","","",40,[[],["any",8]]],[11,"into_any_arc","","",40,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::marksweep::gc_work","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"into_any","","",41,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",41,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",41,[[],["any",8]]],[11,"as_any_mut","","",41,[[],["any",8]]],[11,"from","mmtk::plan::marksweep::global","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"into_any","","",42,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",42,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",42,[[],["any",8]]],[11,"as_any_mut","","",42,[[],["any",8]]],[11,"into_any_arc","","",42,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::marksweep::mutator","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"into_any","","",43,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",43,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",43,[[],["any",8]]],[11,"as_any_mut","","",43,[[],["any",8]]],[11,"into_any_arc","","",43,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::nogc::global","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"into_any","","",44,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",44,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",44,[[],["any",8]]],[11,"as_any_mut","","",44,[[],["any",8]]],[11,"into_any_arc","","",44,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::nogc::mutator","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"into_any","","",45,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",45,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",45,[[],["any",8]]],[11,"as_any_mut","","",45,[[],["any",8]]],[11,"into_any_arc","","",45,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::semispace::gc_work","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"into_any","","",46,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",46,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",46,[[],["any",8]]],[11,"as_any_mut","","",46,[[],["any",8]]],[11,"into_any_arc","","",46,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"into_any","","",47,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",47,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",47,[[],["any",8]]],[11,"as_any_mut","","",47,[[],["any",8]]],[11,"from","mmtk::plan::semispace::global","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"into_any","","",48,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",48,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",48,[[],["any",8]]],[11,"as_any_mut","","",48,[[],["any",8]]],[11,"into_any_arc","","",48,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::semispace::mutator","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"into_any","","",49,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",49,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",49,[[],["any",8]]],[11,"as_any_mut","","",49,[[],["any",8]]],[11,"into_any_arc","","",49,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler::scheduler","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"into_any","","",52,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",52,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",52,[[],["any",8]]],[11,"as_any_mut","","",52,[[],["any",8]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"into_any","","",53,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",53,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",53,[[],["any",8]]],[11,"as_any_mut","","",53,[[],["any",8]]],[11,"into_any_arc","","",53,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler::stat","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"into_any","","",54,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",54,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",54,[[],["any",8]]],[11,"as_any_mut","","",54,[[],["any",8]]],[11,"into_any_arc","","",54,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"into_any","","",55,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",55,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",55,[[],["any",8]]],[11,"as_any_mut","","",55,[[],["any",8]]],[11,"into_any_arc","","",55,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"into_any","","",56,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",56,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",56,[[],["any",8]]],[11,"as_any_mut","","",56,[[],["any",8]]],[11,"into_any_arc","","",56,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler::work_bucket","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"into_any","","",59,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",59,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",59,[[],["any",8]]],[11,"as_any_mut","","",59,[[],["any",8]]],[11,"into_any_arc","","",59,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"into_any","","",60,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",60,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",60,[[],["any",8]]],[11,"as_any_mut","","",60,[[],["any",8]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"into_any","","",61,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",61,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",61,[[],["any",8]]],[11,"as_any_mut","","",61,[[],["any",8]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"into_any","","",62,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",62,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",62,[[],["any",8]]],[11,"as_any_mut","","",62,[[],["any",8]]],[11,"into_any_arc","","",62,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler::worker","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"into_any","","",63,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",63,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",63,[[],["any",8]]],[11,"as_any_mut","","",63,[[],["any",8]]],[11,"into_any_arc","","",63,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"into_any","","",64,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",64,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",64,[[],["any",8]]],[11,"as_any_mut","","",64,[[],["any",8]]],[11,"into_any_arc","","",64,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"into_any","","",65,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",65,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",65,[[],["any",8]]],[11,"as_any_mut","","",65,[[],["any",8]]],[11,"into_any_arc","","",65,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler::gc_work","",163,[[]]],[11,"into","","",163,[[]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"into_any","","",163,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",163,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",163,[[],["any",8]]],[11,"as_any_mut","","",163,[[],["any",8]]],[11,"into_any_arc","","",163,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"into_any","","",66,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",66,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",66,[[],["any",8]]],[11,"as_any_mut","","",66,[[],["any",8]]],[11,"into_any_arc","","",66,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"into_any","","",67,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",67,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",67,[[],["any",8]]],[11,"as_any_mut","","",67,[[],["any",8]]],[11,"into_any_arc","","",67,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"into_any","","",68,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",68,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",68,[[],["any",8]]],[11,"as_any_mut","","",68,[[],["any",8]]],[11,"into_any_arc","","",68,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"into_any","","",69,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",69,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",69,[[],["any",8]]],[11,"as_any_mut","","",69,[[],["any",8]]],[11,"into_any_arc","","",69,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"into_any","","",70,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",70,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",70,[[],["any",8]]],[11,"as_any_mut","","",70,[[],["any",8]]],[11,"into_any_arc","","",70,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"into_any","","",71,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",71,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",71,[[],["any",8]]],[11,"as_any_mut","","",71,[[],["any",8]]],[11,"into_any_arc","","",71,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"into_any","","",72,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",72,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",72,[[],["any",8]]],[11,"as_any_mut","","",72,[[],["any",8]]],[11,"into_any_arc","","",72,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",164,[[]]],[11,"into","","",164,[[]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"into_any","","",164,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",164,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",164,[[],["any",8]]],[11,"as_any_mut","","",164,[[],["any",8]]],[11,"into_any_arc","","",164,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"into_any","","",73,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",73,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",73,[[],["any",8]]],[11,"as_any_mut","","",73,[[],["any",8]]],[11,"into_any_arc","","",73,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"into_any","","",74,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",74,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",74,[[],["any",8]]],[11,"as_any_mut","","",74,[[],["any",8]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"into_any","","",75,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",75,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",75,[[],["any",8]]],[11,"as_any_mut","","",75,[[],["any",8]]],[11,"into_any_arc","","",75,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"into_any","","",76,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",76,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",76,[[],["any",8]]],[11,"as_any_mut","","",76,[[],["any",8]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"into_any","","",78,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",78,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",78,[[],["any",8]]],[11,"as_any_mut","","",78,[[],["any",8]]],[11,"into_any_arc","","",78,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"into_any","","",79,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",79,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",79,[[],["any",8]]],[11,"as_any_mut","","",79,[[],["any",8]]],[11,"into_any_arc","","",79,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::address","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"to_string","","",80,[[],["string",3]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"into_any","","",80,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",80,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",80,[[],["any",8]]],[11,"as_any_mut","","",80,[[],["any",8]]],[11,"into_any_arc","","",80,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"to_string","","",81,[[],["string",3]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"into_any","","",81,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",81,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",81,[[],["any",8]]],[11,"as_any_mut","","",81,[[],["any",8]]],[11,"into_any_arc","","",81,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::allocators","",83,[[]]],[11,"into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"into_any","","",83,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",83,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",83,[[],["any",8]]],[11,"as_any_mut","","",83,[[],["any",8]]],[11,"into_any_arc","","",83,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"into_any","","",84,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",84,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",84,[[],["any",8]]],[11,"as_any_mut","","",84,[[],["any",8]]],[11,"into_any_arc","","",84,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::bumpallocator","",85,[[]]],[11,"into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"into_any","","",85,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",85,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",85,[[],["any",8]]],[11,"as_any_mut","","",85,[[],["any",8]]],[11,"into_any_arc","","",85,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::large_object_allocator","",86,[[]]],[11,"into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"into_any","","",86,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",86,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",86,[[],["any",8]]],[11,"as_any_mut","","",86,[[],["any",8]]],[11,"into_any_arc","","",86,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::malloc_allocator","",87,[[]]],[11,"into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"into_any","","",87,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",87,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",87,[[],["any",8]]],[11,"as_any_mut","","",87,[[],["any",8]]],[11,"into_any_arc","","",87,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::dump_linear_scan","",165,[[]]],[11,"into","","",165,[[]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"try_into","","",165,[[],["result",4]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"into_any","","",165,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",165,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",165,[[],["any",8]]],[11,"as_any_mut","","",165,[[],["any",8]]],[11,"into_any_arc","","",165,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::opaque_pointer","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"into_any","","",89,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",89,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",89,[[],["any",8]]],[11,"as_any_mut","","",89,[[],["any",8]]],[11,"into_any_arc","","",89,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"into_any","","",90,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",90,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",90,[[],["any",8]]],[11,"as_any_mut","","",90,[[],["any",8]]],[11,"into_any_arc","","",90,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"into_any","","",91,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",91,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",91,[[],["any",8]]],[11,"as_any_mut","","",91,[[],["any",8]]],[11,"into_any_arc","","",91,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"into_any","","",92,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",92,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",92,[[],["any",8]]],[11,"as_any_mut","","",92,[[],["any",8]]],[11,"into_any_arc","","",92,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::reference_processor","",93,[[]]],[11,"into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"into_any","","",93,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",93,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",93,[[],["any",8]]],[11,"as_any_mut","","",93,[[],["any",8]]],[11,"into_any_arc","","",93,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"into_any","","",94,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",94,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",94,[[],["any",8]]],[11,"as_any_mut","","",94,[[],["any",8]]],[11,"into_any_arc","","",94,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"into_any","","",95,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",95,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",95,[[],["any",8]]],[11,"as_any_mut","","",95,[[],["any",8]]],[11,"into_any_arc","","",95,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"into_any","","",96,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",96,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",96,[[],["any",8]]],[11,"as_any_mut","","",96,[[],["any",8]]],[11,"into_any_arc","","",96,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::analysis::gc_count","",97,[[]]],[11,"into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"into_any","","",97,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",97,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",97,[[],["any",8]]],[11,"as_any_mut","","",97,[[],["any",8]]],[11,"into_any_arc","","",97,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::analysis::obj_num","",98,[[]]],[11,"into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"into_any","","",98,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",98,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",98,[[],["any",8]]],[11,"as_any_mut","","",98,[[],["any",8]]],[11,"into_any_arc","","",98,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::analysis::obj_size","",99,[[]]],[11,"into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"into_any","","",99,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",99,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",99,[[],["any",8]]],[11,"as_any_mut","","",99,[[],["any",8]]],[11,"into_any_arc","","",99,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::analysis","",166,[[]]],[11,"into","","",166,[[]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"into_any","","",166,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",166,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",166,[[],["any",8]]],[11,"as_any_mut","","",166,[[],["any",8]]],[11,"into_any_arc","","",166,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"into_any","","",101,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",101,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",101,[[],["any",8]]],[11,"as_any_mut","","",101,[[],["any",8]]],[11,"into_any_arc","","",101,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::edge_logger","",102,[[]]],[11,"into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"into_any","","",102,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",102,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",102,[[],["any",8]]],[11,"as_any_mut","","",102,[[],["any",8]]],[11,"into_any_arc","","",102,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::finalizable_processor","",103,[[]]],[11,"into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"into_any","","",103,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",103,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",103,[[],["any",8]]],[11,"as_any_mut","","",103,[[],["any",8]]],[11,"into_any_arc","","",103,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"into_any","","",104,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",104,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",104,[[],["any",8]]],[11,"as_any_mut","","",104,[[],["any",8]]],[11,"into_any_arc","","",104,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"into_any","","",105,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",105,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",105,[[],["any",8]]],[11,"as_any_mut","","",105,[[],["any",8]]],[11,"into_any_arc","","",105,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::header_byte","",106,[[]]],[11,"into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"into_any","","",106,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",106,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",106,[[],["any",8]]],[11,"as_any_mut","","",106,[[],["any",8]]],[11,"into_any_arc","","",106,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::accounting","",107,[[]]],[11,"into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"into_any","","",107,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",107,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",107,[[],["any",8]]],[11,"as_any_mut","","",107,[[],["any",8]]],[11,"into_any_arc","","",107,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::layout::fragmented_mapper","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"into_any","","",109,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",109,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",109,[[],["any",8]]],[11,"as_any_mut","","",109,[[],["any",8]]],[11,"into_any_arc","","",109,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"into_any","","",110,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",110,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",110,[[],["any",8]]],[11,"as_any_mut","","",110,[[],["any",8]]],[11,"into_any_arc","","",110,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::layout::map64","",112,[[]]],[11,"into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"into_any","","",112,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",112,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",112,[[],["any",8]]],[11,"as_any_mut","","",112,[[],["any",8]]],[11,"into_any_arc","","",112,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::freelistpageresource","",113,[[]]],[11,"into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"into_any","","",113,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",113,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",113,[[],["any",8]]],[11,"as_any_mut","","",113,[[],["any",8]]],[11,"into_any_arc","","",113,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"into_any","","",114,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",114,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",114,[[],["any",8]]],[11,"as_any_mut","","",114,[[],["any",8]]],[11,"into_any_arc","","",114,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"into_any","","",115,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",115,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",115,[[],["any",8]]],[11,"as_any_mut","","",115,[[],["any",8]]],[11,"into_any_arc","","",115,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::heap_meta","",116,[[]]],[11,"into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"into_any","","",116,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",116,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",116,[[],["any",8]]],[11,"as_any_mut","","",116,[[],["any",8]]],[11,"into_any_arc","","",116,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::monotonepageresource","",117,[[]]],[11,"into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"into_any","","",117,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",117,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",117,[[],["any",8]]],[11,"as_any_mut","","",117,[[],["any",8]]],[11,"into_any_arc","","",117,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"into_any","","",118,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",118,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",118,[[],["any",8]]],[11,"as_any_mut","","",118,[[],["any",8]]],[11,"into_any_arc","","",118,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"into_any","","",119,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",119,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",119,[[],["any",8]]],[11,"as_any_mut","","",119,[[],["any",8]]],[11,"into_any_arc","","",119,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::pageresource","",122,[[]]],[11,"into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"into_any","","",122,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",122,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",122,[[],["any",8]]],[11,"as_any_mut","","",122,[[],["any",8]]],[11,"into_any_arc","","",122,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",167,[[]]],[11,"into","","",167,[[]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"into_any","","",167,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",167,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",167,[[],["any",8]]],[11,"as_any_mut","","",167,[[],["any",8]]],[11,"into_any_arc","","",167,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"into_any","","",123,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",123,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",123,[[],["any",8]]],[11,"as_any_mut","","",123,[[],["any",8]]],[11,"into_any_arc","","",123,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::space_descriptor","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"into_any","","",124,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",124,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",124,[[],["any",8]]],[11,"as_any_mut","","",124,[[],["any",8]]],[11,"into_any_arc","","",124,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::vmrequest","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"into_any","","",125,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",125,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",125,[[],["any",8]]],[11,"as_any_mut","","",125,[[],["any",8]]],[11,"into_any_arc","","",125,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::options","",129,[[]]],[11,"into","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"into_any","","",129,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",129,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",129,[[],["any",8]]],[11,"as_any_mut","","",129,[[],["any",8]]],[11,"into_any_arc","","",129,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"into_any","","",130,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",130,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",130,[[],["any",8]]],[11,"as_any_mut","","",130,[[],["any",8]]],[11,"into_any_arc","","",130,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"into_any","","",131,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",131,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",131,[[],["any",8]]],[11,"as_any_mut","","",131,[[],["any",8]]],[11,"into_any_arc","","",131,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"into_any","","",132,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",132,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",132,[[],["any",8]]],[11,"as_any_mut","","",132,[[],["any",8]]],[11,"into_any_arc","","",132,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::sanity::sanity_checker","",133,[[]]],[11,"into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"into_any","","",133,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",133,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",133,[[],["any",8]]],[11,"as_any_mut","","",133,[[],["any",8]]],[11,"into_any_arc","","",133,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"into_any","","",134,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",134,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",134,[[],["any",8]]],[11,"as_any_mut","","",134,[[],["any",8]]],[11,"into_any_arc","","",134,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"into_any","","",135,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",135,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",135,[[],["any",8]]],[11,"as_any_mut","","",135,[[],["any",8]]],[11,"into_any_arc","","",135,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"into_any","","",136,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",136,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",136,[[],["any",8]]],[11,"as_any_mut","","",136,[[],["any",8]]],[11,"into_any_arc","","",136,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"into_any","","",137,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",137,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",137,[[],["any",8]]],[11,"as_any_mut","","",137,[[],["any",8]]],[11,"from","mmtk::util::side_metadata::global","",138,[[]]],[11,"into","","",138,[[]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"into_any","","",138,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",138,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",138,[[],["any",8]]],[11,"as_any_mut","","",138,[[],["any",8]]],[11,"into_any_arc","","",138,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"into_any","","",139,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",139,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",139,[[],["any",8]]],[11,"as_any_mut","","",139,[[],["any",8]]],[11,"into_any_arc","","",139,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"into_any","","",140,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",140,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",140,[[],["any",8]]],[11,"as_any_mut","","",140,[[],["any",8]]],[11,"into_any_arc","","",140,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"into_any","","",141,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",141,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",141,[[],["any",8]]],[11,"as_any_mut","","",141,[[],["any",8]]],[11,"into_any_arc","","",141,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::statistics::counter::event_counter","",142,[[]]],[11,"into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"into_any","","",142,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",142,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",142,[[],["any",8]]],[11,"as_any_mut","","",142,[[],["any",8]]],[11,"into_any_arc","","",142,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::statistics::counter::long_counter","",143,[[]]],[11,"into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"into_any","","",143,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",143,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",143,[[],["any",8]]],[11,"as_any_mut","","",143,[[],["any",8]]],[11,"into_any_arc","","",143,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::statistics::counter::size_counter","",144,[[]]],[11,"into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"into_any","","",144,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",144,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",144,[[],["any",8]]],[11,"as_any_mut","","",144,[[],["any",8]]],[11,"into_any_arc","","",144,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::statistics::counter","",168,[[]]],[11,"into","","",168,[[]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"try_into","","",168,[[],["result",4]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"into_any","","",168,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",168,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",168,[[],["any",8]]],[11,"as_any_mut","","",168,[[],["any",8]]],[11,"into_any_arc","","",168,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::statistics::stats","",147,[[]]],[11,"into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"into_any","","",147,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",147,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",147,[[],["any",8]]],[11,"as_any_mut","","",147,[[],["any",8]]],[11,"into_any_arc","","",147,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"into_any","","",148,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",148,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",148,[[],["any",8]]],[11,"as_any_mut","","",148,[[],["any",8]]],[11,"into_any_arc","","",148,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::treadmill","",149,[[]]],[11,"into","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"into_any","","",149,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",149,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",149,[[],["any",8]]],[11,"as_any_mut","","",149,[[],["any",8]]],[11,"into_any_arc","","",149,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::int_array_freelist","",151,[[]]],[11,"into","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"into_any","","",151,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",151,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",151,[[],["any",8]]],[11,"as_any_mut","","",151,[[],["any",8]]],[11,"into_any_arc","","",151,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::raw_memory_freelist","",152,[[]]],[11,"into","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"into_any","","",152,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",152,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",152,[[],["any",8]]],[11,"as_any_mut","","",152,[[],["any",8]]],[11,"into_any_arc","","",152,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::synchronized_counter","",153,[[]]],[11,"into","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"into_any","","",153,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",153,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",153,[[],["any",8]]],[11,"as_any_mut","","",153,[[],["any",8]]],[11,"into_any_arc","","",153,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::vm::active_plan","",154,[[]]],[11,"into","","",154,[[]]],[11,"into_iter","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"into_any","","",154,[[["global",3],["box",3]],[["global",3],["any",8],["box",3]]]],[11,"into_any_rc","","",154,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",154,[[],["any",8]]],[11,"as_any_mut","","",154,[[],["any",8]]],[11,"into_any_arc","","",154,[[["arc",3]],[["arc",3],["any",8]]]],[11,"name","mmtk::policy::space","",161,[[]]],[11,"is_live","","",161,[[["objectreference",3]]]],[11,"is_sane","","",161,[[]]],[11,"is_movable","","",161,[[]]],[11,"initialize_object_metadata","","",161,[[["objectreference",3]]]],[11,"name","mmtk::policy::copyspace","",9,[[]]],[11,"is_live","","",9,[[["objectreference",3]]]],[11,"is_movable","","",9,[[]]],[11,"is_sane","","",9,[[]]],[11,"initialize_object_metadata","","",9,[[["objectreference",3]]]],[11,"name","mmtk::policy::immortalspace","",10,[[]]],[11,"is_live","","",10,[[["objectreference",3]]]],[11,"is_movable","","",10,[[]]],[11,"is_sane","","",10,[[]]],[11,"initialize_object_metadata","","",10,[[["objectreference",3]]]],[11,"name","mmtk::policy::largeobjectspace","",11,[[]]],[11,"is_live","","",11,[[["objectreference",3]]]],[11,"is_movable","","",11,[[]]],[11,"is_sane","","",11,[[]]],[11,"initialize_object_metadata","","",11,[[["objectreference",3]]]],[11,"name","mmtk::policy::lockfreeimmortalspace","",12,[[]]],[11,"is_live","","",12,[[["objectreference",3]]]],[11,"is_movable","","",12,[[]]],[11,"is_sane","","",12,[[]]],[11,"initialize_object_metadata","","",12,[[["objectreference",3]]]],[11,"name","mmtk::policy::mallocspace::global","",13,[[]]],[11,"is_live","","",13,[[["objectreference",3]]]],[11,"is_movable","","",13,[[]]],[11,"is_sane","","",13,[[]]],[11,"initialize_object_metadata","","",13,[[["objectreference",3]]]],[11,"as_space","mmtk::policy::copyspace","",9,[[],["space",8]]],[11,"as_sft","","",9,[[],["sft",8]]],[11,"get_page_resource","","",9,[[],["pageresource",8]]],[11,"common","","",9,[[],["commonspace",3]]],[11,"init","","",9,[[["map64",3]]]],[11,"release_multiple_pages","","",9,[[["address",3]]]],[11,"as_space","mmtk::policy::immortalspace","",10,[[],["space",8]]],[11,"as_sft","","",10,[[],["sft",8]]],[11,"get_page_resource","","",10,[[],["pageresource",8]]],[11,"common","","",10,[[],["commonspace",3]]],[11,"init","","",10,[[["map64",3]]]],[11,"release_multiple_pages","","",10,[[["address",3]]]],[11,"as_space","mmtk::policy::largeobjectspace","",11,[[],["space",8]]],[11,"as_sft","","",11,[[],["sft",8]]],[11,"get_page_resource","","",11,[[],["pageresource",8]]],[11,"init","","",11,[[["map64",3]]]],[11,"common","","",11,[[],["commonspace",3]]],[11,"release_multiple_pages","","",11,[[["address",3]]]],[11,"as_space","mmtk::policy::lockfreeimmortalspace","",12,[[],["space",8]]],[11,"as_sft","","",12,[[],["sft",8]]],[11,"get_page_resource","","",12,[[],["pageresource",8]]],[11,"common","","",12,[[],["commonspace",3]]],[11,"release_multiple_pages","","",12,[[["address",3]]]],[11,"init","","",12,[[["map64",3]]]],[11,"reserved_pages","","",12,[[]]],[11,"acquire","","",12,[[["vmthread",3]],["address",3]]],[11,"as_space","mmtk::policy::mallocspace::global","",13,[[],["space",8]]],[11,"as_sft","","",13,[[],["sft",8]]],[11,"get_page_resource","","",13,[[],["pageresource",8]]],[11,"common","","",13,[[],["commonspace",3]]],[11,"init","","",13,[[["map64",3]]]],[11,"release_multiple_pages","","",13,[[["address",3]]]],[11,"in_space","","",13,[[["objectreference",3]]]],[11,"address_in_space","","",13,[[["address",3]]]],[11,"get_name","","",13,[[]]],[11,"reserved_pages","","",13,[[]]],[11,"flush","mmtk::plan::barriers","",162,[[]]],[11,"post_write_barrier","","",162,[[["writetarget",4]]]],[11,"flush","","",20,[[]]],[11,"post_write_barrier","","",20,[[["writetarget",4]]]],[11,"init","mmtk::plan::global","",24,[[["vmworkerthread",3]]]],[11,"constraints","","",24,[[],["planconstraints",3]]],[11,"prepare","","",24,[[]]],[11,"release","","",24,[[]]],[11,"alloc_copy","","",24,[[["allocationsemantics",4],["objectreference",3]],["address",3]]],[11,"constraints","mmtk::plan::gencopy::gc_work","",36,[[],["planconstraints",3]]],[11,"init","","",36,[[["vmworkerthread",3]]]],[11,"prepare","","",36,[[]]],[11,"release","","",36,[[]]],[11,"alloc_copy","","",36,[[["objectreference",3],["allocationsemantics",4]],["address",3]]],[11,"post_copy","","",36,[[["allocationsemantics",4],["objectreference",3],["address",3]]]],[11,"constraints","mmtk::plan::semispace::gc_work","",46,[[],["planconstraints",3]]],[11,"init","","",46,[[["vmworkerthread",3]]]],[11,"prepare","","",46,[[]]],[11,"release","","",46,[[]]],[11,"alloc_copy","","",46,[[["objectreference",3],["allocationsemantics",4]],["address",3]]],[11,"post_copy","","",46,[[["allocationsemantics",4],["objectreference",3],["address",3]]]],[11,"constraints","mmtk::plan::gencopy::global","",39,[[],["planconstraints",3]]],[11,"create_worker_local","","",39,[[["vmworkerthread",3],["mmtk",3]],["workerlocalptr",3]]],[11,"collection_required","","",39,[[["space",8]]]],[11,"gc_init","","",39,[[["map64",3],["arc",3]]]],[11,"schedule_collection","","",39,[[["scheduler",3]]]],[11,"get_allocator_mapping","","",39,[[],["enummap",3]]],[11,"prepare","","",39,[[["vmworkerthread",3]]]],[11,"release","","",39,[[["vmworkerthread",3]]]],[11,"get_collection_reserve","","",39,[[]]],[11,"get_pages_used","","",39,[[]]],[11,"base","","",39,[[],["baseplan",3]]],[11,"common","","",39,[[],["commonplan",3]]],[11,"in_nursery","","",39,[[]]],[11,"gc_init","mmtk::plan::marksweep::global","",42,[[["map64",3],["arc",3]]]],[11,"schedule_collection","","",42,[[["scheduler",3]]]],[11,"get_allocator_mapping","","",42,[[],["enummap",3]]],[11,"prepare","","",42,[[["vmworkerthread",3]]]],[11,"release","","",42,[[["vmworkerthread",3]]]],[11,"collection_required","","",42,[[["space",8]]]],[11,"get_collection_reserve","","",42,[[]]],[11,"get_pages_used","","",42,[[]]],[11,"base","","",42,[[],["baseplan",3]]],[11,"common","","",42,[[],["commonplan",3]]],[11,"constraints","","",42,[[],["planconstraints",3]]],[11,"create_worker_local","","",42,[[["vmworkerthread",3],["mmtk",3]],["workerlocalptr",3]]],[11,"constraints","mmtk::plan::nogc::global","",44,[[],["planconstraints",3]]],[11,"create_worker_local","","",44,[[["vmworkerthread",3],["mmtk",3]],["workerlocalptr",3]]],[11,"gc_init","","",44,[[["map64",3],["arc",3]]]],[11,"collection_required","","",44,[[["space",8]]]],[11,"base","","",44,[[],["baseplan",3]]],[11,"prepare","","",44,[[["vmworkerthread",3]]]],[11,"release","","",44,[[["vmworkerthread",3]]]],[11,"get_allocator_mapping","","",44,[[],["enummap",3]]],[11,"schedule_collection","","",44,[[["scheduler",3]]]],[11,"get_pages_used","","",44,[[]]],[11,"handle_user_collection_request","","",44,[[["vmmutatorthread",3]]]],[11,"constraints","mmtk::plan::semispace::global","",48,[[],["planconstraints",3]]],[11,"create_worker_local","","",48,[[["vmworkerthread",3],["mmtk",3]],["workerlocalptr",3]]],[11,"gc_init","","",48,[[["map64",3],["arc",3]]]],[11,"schedule_collection","","",48,[[["scheduler",3]]]],[11,"get_allocator_mapping","","",48,[[],["enummap",3]]],[11,"prepare","","",48,[[["vmworkerthread",3]]]],[11,"release","","",48,[[["vmworkerthread",3]]]],[11,"collection_required","","",48,[[["space",8]]]],[11,"get_collection_reserve","","",48,[[]]],[11,"get_pages_used","","",48,[[]]],[11,"base","","",48,[[],["baseplan",3]]],[11,"common","","",48,[[],["commonplan",3]]],[11,"prepare","mmtk::plan::mutator_context","",31,[[["vmworkerthread",3]]]],[11,"release","","",31,[[["vmworkerthread",3]]]],[11,"alloc","","",31,[[["allocationtype",4]],["address",3]]],[11,"post_alloc","","",31,[[["objectreference",3],["allocationtype",4]]]],[11,"get_tls","","",31,[[],["vmmutatorthread",3]]],[11,"barrier","","",31,[[],["barrier",8]]],[11,"spawn_worker","mmtk::mmtk","",3,[[["gcworker",6],["vmthread",3]]]],[11,"init","mmtk::plan::global","",24,[[["vmworkerthread",3]]]],[11,"init","mmtk::plan::gencopy::gc_work","",36,[[["vmworkerthread",3]]]],[11,"init","mmtk::plan::semispace::gc_work","",46,[[["vmworkerthread",3]]]],[11,"do_work","mmtk::scheduler::gc_work","",163,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",66,[[["mmtk",3],["gcworker",6]]]],[11,"do_work","","",67,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",68,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",69,[[["mmtk",3],["gcworker",6]]]],[11,"do_work","","",70,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",71,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",72,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",164,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",73,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",74,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",75,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",78,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",79,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","mmtk::util::analysis","",166,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","mmtk::util::finalizable_processor","",104,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",105,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","mmtk::util::sanity::sanity_checker","",134,[[["mmtk",3],["gcworker",6]]]],[11,"do_work","","",135,[[["mmtk",3],["gcworker",6]]]],[11,"do_work","","",136,[[["mmtk",3],["gcworker",6]]]],[11,"new","mmtk::plan::gencopy::gc_work","",37,[[["mmtk",3],["vec",3],["address",3]]]],[11,"trace_object","","",37,[[["objectreference",3]],["objectreference",3]]],[11,"process_edge","","",37,[[["address",3]]]],[11,"new","","",38,[[["mmtk",3],["vec",3],["address",3]]]],[11,"trace_object","","",38,[[["objectreference",3]],["objectreference",3]]],[11,"new","mmtk::plan::marksweep::gc_work","",41,[[["mmtk",3],["vec",3],["address",3]]]],[11,"trace_object","","",41,[[["objectreference",3]],["objectreference",3]]],[11,"new","mmtk::plan::semispace::gc_work","",47,[[["mmtk",3],["vec",3],["address",3]]]],[11,"trace_object","","",47,[[["objectreference",3]],["objectreference",3]]],[11,"new","mmtk::util::sanity::sanity_checker","",137,[[["mmtk",3],["vec",3],["address",3]]]],[11,"trace_object","","",137,[[["objectreference",3]],["objectreference",3]]],[11,"get_space","mmtk::util::alloc::bumpallocator","",85,[[],["space",8]]],[11,"get_plan","","",85,[[],["plan",8]]],[11,"alloc","","",85,[[],["address",3]]],[11,"alloc_slow_once","","",85,[[],["address",3]]],[11,"get_tls","","",85,[[],["vmthread",3]]],[11,"get_tls","mmtk::util::alloc::large_object_allocator","",86,[[],["vmthread",3]]],[11,"get_plan","","",86,[[],["plan",8]]],[11,"get_space","","",86,[[],["space",8]]],[11,"alloc","","",86,[[],["address",3]]],[11,"alloc_slow","","",86,[[],["address",3]]],[11,"alloc_slow_once","","",86,[[],["address",3]]],[11,"get_space","mmtk::util::alloc::malloc_allocator","",87,[[],["space",8]]],[11,"get_plan","","",87,[[],["plan",8]]],[11,"alloc","","",87,[[],["address",3]]],[11,"get_tls","","",87,[[],["vmthread",3]]],[11,"alloc_slow_once","","",87,[[],["address",3]]],[11,"scan","mmtk::util::alloc::dump_linear_scan","",165,[[["objectreference",3]]]],[11,"gc_hook","mmtk::util::analysis::gc_count","",97,[[["mmtk",3]]]],[11,"set_running","","",97,[[]]],[11,"alloc_hook","mmtk::util::analysis::obj_num","",98,[[]]],[11,"set_running","","",98,[[]]],[11,"alloc_hook","mmtk::util::analysis::obj_size","",99,[[]]],[11,"set_running","","",99,[[]]],[11,"eagerly_mmap_all_spaces","mmtk::util::heap::layout::fragmented_mapper","",110,[[]]],[11,"mark_as_mapped","","",110,[[["address",3]]]],[11,"ensure_mapped","","",110,[[["address",3],["sidemetadata",3]],["result",6]]],[11,"is_mapped_address","","Return {@code true} if the given address has been mmapped",110,[[["address",3]]]],[11,"protect","","",110,[[["address",3]]]],[11,"new","mmtk::util::heap::layout::map64","",112,[[]]],[11,"insert","","",112,[[["address",3],["spacedescriptor",3]]]],[11,"create_freelist","","",112,[[["commonfreelistpageresource",3]],["box",3]]],[11,"create_parent_freelist","","",112,[[["commonfreelistpageresource",3]],["box",3]]],[11,"allocate_contiguous_chunks","","",112,[[["spacedescriptor",3],["address",3]],["address",3]]],[11,"get_next_contiguous_region","","",112,[[["address",3]],["address",3]]],[11,"get_contiguous_region_chunks","","",112,[[["address",3]]]],[11,"get_contiguous_region_size","","",112,[[["address",3]]]],[11,"free_all_chunks","","",112,[[["address",3]]]],[11,"free_contiguous_chunks","","",112,[[["address",3]]]],[11,"boot","","",112,[[]]],[11,"finalize_static_space_map","","",112,[[["address",3]]]],[11,"is_finalized","","",112,[[]]],[11,"get_discontig_freelist_pr_ordinal","","",112,[[["commonfreelistpageresource",3]]]],[11,"get_descriptor_for_address","","",112,[[["address",3]],["spacedescriptor",3]]],[11,"add_to_cumulative_committed_pages","","",112,[[]]],[11,"common","mmtk::util::heap::freelistpageresource","",114,[[],["commonpageresource",3]]],[11,"common_mut","","",114,[[],["commonpageresource",3]]],[11,"alloc_pages","","",114,[[["spacedescriptor",3],["vmthread",3]],[["result",4],["prallocfail",3],["prallocresult",3]]]],[11,"adjust_for_metadata","","",114,[[]]],[11,"common","mmtk::util::heap::monotonepageresource","",117,[[],["commonpageresource",3]]],[11,"common_mut","","",117,[[],["commonpageresource",3]]],[11,"reserve_pages","","",117,[[]]],[11,"alloc_pages","","",117,[[["spacedescriptor",3],["vmthread",3]],[["result",4],["prallocfail",3],["prallocresult",3]]]],[11,"adjust_for_metadata","","",117,[[]]],[11,"start","mmtk::util::statistics::counter::event_counter","",142,[[]]],[11,"stop","","",142,[[]]],[11,"phase_change","","The phase has changed (from GC to mutator or mutator to …",142,[[]]],[11,"print_count","","",142,[[]]],[11,"print_total","","",142,[[["option",4]]]],[11,"print_min","","",142,[[]]],[11,"print_max","","",142,[[]]],[11,"print_last","","",142,[[]]],[11,"merge_phases","","",142,[[]]],[11,"implicitly_start","","",142,[[]]],[11,"name","","",142,[[],["string",3]]],[11,"start","mmtk::util::statistics::counter::long_counter","",143,[[]]],[11,"stop","","",143,[[]]],[11,"phase_change","","",143,[[]]],[11,"print_count","","",143,[[]]],[11,"print_total","","",143,[[["option",4]]]],[11,"print_min","","",143,[[]]],[11,"print_max","","",143,[[]]],[11,"print_last","","",143,[[]]],[11,"merge_phases","","",143,[[]]],[11,"implicitly_start","","",143,[[]]],[11,"name","","",143,[[],["string",3]]],[11,"current_value","mmtk::util::statistics::counter","",168,[[],["instant",3]]],[11,"diff","","",168,[[["instant",3]]]],[11,"print_diff","","",168,[[]]],[11,"head","mmtk::util::int_array_freelist","",151,[[]]],[11,"heads","","",151,[[]]],[11,"get_entry","","",151,[[]]],[11,"set_entry","","",151,[[]]],[11,"head","mmtk::util::raw_memory_freelist","",152,[[]]],[11,"heads","","",152,[[]]],[11,"get_entry","","",152,[[]]],[11,"set_entry","","",152,[[]]],[11,"alloc","","",152,[[]]],[11,"next","mmtk::vm::active_plan","",154,[[],["option",4]]],[11,"clone","mmtk::plan::barriers","",17,[[],["barrierselector",4]]],[11,"clone","mmtk::plan::global","",29,[[],["allocationsemantics",4]]],[11,"clone","mmtk::scheduler::work_bucket","",59,[[],["workuid",3]]],[11,"clone","","",62,[[],["workbucketstage",4]]],[11,"clone","mmtk::scheduler::worker","",63,[[],["workerlocalptr",3]]],[11,"clone","mmtk::util::address","",80,[[],["address",3]]],[11,"clone","","",81,[[],["objectreference",3]]],[11,"clone","mmtk::util::alloc::allocators","",84,[[],["allocatorselector",4]]],[11,"clone","mmtk::util::opaque_pointer","",89,[[],["opaquepointer",3]]],[11,"clone","","",90,[[],["vmthread",3]]],[11,"clone","","",91,[[],["vmmutatorthread",3]]],[11,"clone","","",92,[[],["vmworkerthread",3]]],[11,"clone","mmtk::util::heap::layout::fragmented_mapper","",109,[[],["mapstate",4]]],[11,"clone","mmtk::util::heap::space_descriptor","",124,[[],["spacedescriptor",3]]],[11,"clone","mmtk::util::heap::vmrequest","",125,[[],["vmrequest",4]]],[11,"clone","mmtk::util::options","",129,[[],["nurseryzeroingoptions",4]]],[11,"clone","","",130,[[],["planselector",4]]],[11,"clone","mmtk::util::side_metadata::global","",138,[[],["sidemetadatascope",4]]],[11,"clone","","",139,[[],["sidemetadataspec",3]]],[11,"default","mmtk::mmtk","",3,[[]]],[11,"default","mmtk::policy::space","",5,[[],["sftmap",3]]],[11,"default","mmtk::plan::controller_collector_context","",22,[[]]],[11,"default","mmtk::scheduler::stat","",54,[[],["schedulerstat",3]]],[11,"default","","",56,[[],["workerlocalstat",3]]],[11,"default","mmtk::scheduler::gc_work","",68,[[],["preparecollector",3]]],[11,"default","","",71,[[],["releasecollector",3]]],[11,"default","","",72,[[],["stopmutators",3]]],[11,"default","","",164,[[],["endofgc",3]]],[11,"default","","",73,[[],["scanstackroots",3]]],[11,"default","","",75,[[],["scanvmspecificroots",3]]],[11,"default","mmtk::util::opaque_pointer","",89,[[]]],[11,"default","mmtk::util::reference_processor","",93,[[]]],[11,"default","mmtk::util::analysis::obj_size","",99,[[],["persizeclassobjectcounter",3]]],[11,"default","mmtk::util::analysis","",166,[[],["gchookwork",3]]],[11,"default","","",101,[[],["analysismanager",3]]],[11,"default","mmtk::util::finalizable_processor","",103,[[],["finalizableprocessor",3]]],[11,"default","","",104,[[],["finalization",3]]],[11,"default","","",105,[[],["forwardfinalization",3]]],[11,"default","mmtk::util::heap::accounting","",107,[[]]],[11,"default","mmtk::util::heap::layout::fragmented_mapper","",110,[[]]],[11,"default","mmtk::util::heap::layout::map64","",112,[[]]],[11,"default","mmtk::util::options","",132,[[]]],[11,"default","mmtk::util::sanity::sanity_checker","",133,[[]]],[11,"default","mmtk::util::statistics::stats","",148,[[]]],[11,"default","mmtk::util::treadmill","",149,[[]]],[11,"cmp","mmtk::scheduler::work_bucket","",60,[[],["ordering",4]]],[11,"cmp","mmtk::util::address","",80,[[["address",3]],["ordering",4]]],[11,"eq","mmtk::plan::barriers","",17,[[["barrierselector",4]]]],[11,"eq","mmtk::plan::global","",26,[[["gcstatus",4]]]],[11,"eq","mmtk::scheduler::work_bucket","",59,[[["workuid",3]]]],[11,"ne","","",59,[[["workuid",3]]]],[11,"eq","","",60,[[]]],[11,"eq","","",62,[[["workbucketstage",4]]]],[11,"eq","mmtk::util::address","",80,[[["address",3]]]],[11,"ne","","",80,[[["address",3]]]],[11,"eq","","",81,[[["objectreference",3]]]],[11,"ne","","",81,[[["objectreference",3]]]],[11,"eq","mmtk::util::opaque_pointer","",89,[[["opaquepointer",3]]]],[11,"ne","","",89,[[["opaquepointer",3]]]],[11,"eq","","",90,[[["vmthread",3]]]],[11,"ne","","",90,[[["vmthread",3]]]],[11,"eq","","",91,[[["vmmutatorthread",3]]]],[11,"ne","","",91,[[["vmmutatorthread",3]]]],[11,"eq","","",92,[[["vmworkerthread",3]]]],[11,"ne","","",92,[[["vmworkerthread",3]]]],[11,"eq","mmtk::util::reference_processor","",95,[[["semantics",4]]]],[11,"eq","mmtk::util::heap::layout::fragmented_mapper","",109,[[["mapstate",4]]]],[11,"eq","mmtk::util::heap::space_descriptor","",124,[[["spacedescriptor",3]]]],[11,"ne","","",124,[[["spacedescriptor",3]]]],[11,"partial_cmp","mmtk::scheduler::work_bucket","",60,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","mmtk::util::address","",80,[[["address",3]],[["ordering",4],["option",4]]]],[11,"lt","","",80,[[["address",3]]]],[11,"le","","",80,[[["address",3]]]],[11,"gt","","",80,[[["address",3]]]],[11,"ge","","",80,[[["address",3]]]],[11,"partial_cmp","","",81,[[["objectreference",3]],[["ordering",4],["option",4]]]],[11,"lt","","",81,[[["objectreference",3]]]],[11,"le","","",81,[[["objectreference",3]]]],[11,"gt","","",81,[[["objectreference",3]]]],[11,"ge","","",81,[[["objectreference",3]]]],[11,"deref","mmtk::mmtk","",0,[[],["map64",3]]],[11,"deref","","",1,[[],["fragmentedmapper",3]]],[11,"deref","","",2,[[],["sftmap",3]]],[11,"deref","mmtk::policy::mallocspace::metadata","",14,[[],["rwlock",3]]],[11,"deref","","",15,[[],["rwlock",3]]],[11,"deref","","",16,[[],["rwlock",3]]],[11,"deref","mmtk::plan::gencopy::gc_work","",37,[[]]],[11,"deref","","",38,[[]]],[11,"deref","mmtk::plan::gencopy::mutator","",40,[[],["enummap",3]]],[11,"deref","mmtk::plan::marksweep::gc_work","",41,[[]]],[11,"deref","mmtk::plan::marksweep::mutator","",43,[[],["enummap",3]]],[11,"deref","mmtk::plan::nogc::mutator","",45,[[],["enummap",3]]],[11,"deref","mmtk::plan::semispace::gc_work","",47,[[]]],[11,"deref","mmtk::plan::semispace::mutator","",49,[[],["enummap",3]]],[11,"deref","mmtk::util::edge_logger","",102,[[],["rwlock",3]]],[11,"deref","mmtk::util::heap::freelistpageresource","",114,[[],["commonfreelistpageresource",3]]],[11,"deref","mmtk::util::options","",131,[[],["options",3]]],[11,"deref","mmtk::util::sanity::sanity_checker","",137,[[]]],[11,"deref_mut","mmtk::plan::gencopy::gc_work","",37,[[]]],[11,"deref_mut","","",38,[[]]],[11,"deref_mut","mmtk::plan::marksweep::gc_work","",41,[[]]],[11,"deref_mut","mmtk::plan::semispace::gc_work","",47,[[]]],[11,"deref_mut","mmtk::util::heap::freelistpageresource","",114,[[],["commonfreelistpageresource",3]]],[11,"deref_mut","mmtk::util::sanity::sanity_checker","",137,[[]]],[11,"fmt","mmtk::policy::space","",161,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::plan::barriers","",17,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::plan::global","",29,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::scheduler::work_bucket","",62,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::address","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::alloc::allocators","",84,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::opaque_pointer","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::reference_processor","",95,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap::layout::fragmented_mapper","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap::space_descriptor","",124,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap::vmrequest","",125,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::options","",130,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::statistics::counter::long_counter","",143,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::treadmill","",149,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::int_array_freelist","",151,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::raw_memory_freelist","",152,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::address","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"sub","","",80,[[["bytesize",6]],["address",3]]],[11,"sub","","",80,[[["address",3]],["bytesize",6]]],[11,"add","","",80,[[["bytesize",6]],["address",3]]],[11,"add","","",80,[[["byteoffset",6]],["address",3]]],[11,"add_assign","","",80,[[["bytesize",6]]]],[11,"add_assign","","",80,[[["byteoffset",6]]]],[11,"sub_assign","","",80,[[["bytesize",6]]]],[11,"bitand","","",80,[[]]],[11,"bitand","","",80,[[]]],[11,"bitor","","",80,[[]]],[11,"bitor","","",80,[[]]],[11,"shl","","",80,[[]]],[11,"shr","","",80,[[]]],[11,"hash","","",80,[[]]],[11,"hash","","",81,[[]]],[11,"from_str","mmtk::util::options","",129,[[],["result",4]]],[11,"from_str","","",130,[[],["result",4]]],[11,"fmt","mmtk::util::address","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"initialize","mmtk::mmtk","",0,[[]]],[11,"initialize","","",1,[[]]],[11,"initialize","","",2,[[]]],[11,"initialize","mmtk::policy::mallocspace::metadata","",14,[[]]],[11,"initialize","","",15,[[]]],[11,"initialize","","",16,[[]]],[11,"initialize","mmtk::plan::gencopy::mutator","",40,[[]]],[11,"initialize","mmtk::plan::marksweep::mutator","",43,[[]]],[11,"initialize","mmtk::plan::nogc::mutator","",45,[[]]],[11,"initialize","mmtk::plan::semispace::mutator","",49,[[]]],[11,"initialize","mmtk::util::edge_logger","",102,[[]]],[11,"slice","mmtk::plan::global","",29,[[]]],[11,"slice_mut","","",29,[[]]],[11,"from_usize","","",29,[[]]],[11,"to_usize","","",29,[[]]],[11,"from_function","","",29,[[["fnmut",8]]]],[11,"slice","mmtk::scheduler::work_bucket","",62,[[]]],[11,"slice_mut","","",62,[[]]],[11,"from_usize","","",62,[[]]],[11,"to_usize","","",62,[[]]],[11,"from_function","","",62,[[["fnmut",8]]]]],"p":[[3,"VM_MAP"],[3,"MMAPPER"],[3,"SFT_MAP"],[3,"MMTK"],[8,"SFT"],[3,"SFTMap"],[8,"Space"],[3,"CommonSpace"],[3,"SpaceOptions"],[3,"CopySpace"],[3,"ImmortalSpace"],[3,"LargeObjectSpace"],[3,"LockFreeImmortalSpace"],[3,"MallocSpace"],[3,"ACTIVE_CHUNKS"],[3,"ALLOC_MAP"],[3,"MARK_MAP"],[4,"BarrierSelector"],[4,"WriteTarget"],[8,"Barrier"],[3,"ObjectRememberingBarrier"],[3,"RequestSync"],[3,"ControllerCollectorContext"],[8,"CopyContext"],[3,"NoCopy"],[8,"Plan"],[4,"GcStatus"],[3,"BasePlan"],[3,"CommonPlan"],[4,"AllocationSemantics"],[3,"MutatorConfig"],[3,"Mutator"],[8,"MutatorContext"],[3,"PlanConstraints"],[8,"TraceLocal"],[8,"TransitiveClosure"],[3,"GenCopyCopyContext"],[3,"GenCopyNurseryProcessEdges"],[3,"GenCopyMatureProcessEdges"],[3,"GenCopy"],[3,"ALLOCATOR_MAPPING"],[3,"MSProcessEdges"],[3,"MarkSweep"],[3,"ALLOCATOR_MAPPING"],[3,"NoGC"],[3,"ALLOCATOR_MAPPING"],[3,"SSCopyContext"],[3,"SSProcessEdges"],[3,"SemiSpace"],[3,"ALLOCATOR_MAPPING"],[8,"Context"],[8,"WorkerLocal"],[4,"CoordinatorMessage"],[3,"Scheduler"],[3,"SchedulerStat"],[3,"WorkStat"],[3,"WorkerLocalStat"],[8,"Work"],[8,"GCWork"],[3,"WorkUID"],[3,"PrioritizedWork"],[3,"WorkBucket"],[4,"WorkBucketStage"],[3,"WorkerLocalPtr"],[3,"Worker"],[3,"WorkerGroup"],[3,"Prepare"],[3,"PrepareMutator"],[3,"PrepareCollector"],[3,"Release"],[3,"ReleaseMutator"],[3,"ReleaseCollector"],[3,"StopMutators"],[3,"ScanStackRoots"],[3,"ScanStackRoot"],[3,"ScanVMSpecificRoots"],[3,"ProcessEdgesBase"],[8,"ProcessEdgesWork"],[3,"ScanObjects"],[3,"ProcessModBuf"],[3,"Address"],[3,"ObjectReference"],[8,"Allocator"],[3,"Allocators"],[4,"AllocatorSelector"],[3,"BumpAllocator"],[3,"LargeObjectAllocator"],[3,"MallocAllocator"],[8,"LinearScan"],[3,"OpaquePointer"],[3,"VMThread"],[3,"VMMutatorThread"],[3,"VMWorkerThread"],[3,"ReferenceProcessors"],[3,"ReferenceProcessor"],[4,"Semantics"],[3,"ReferenceProcessorSync"],[3,"GcCounter"],[3,"ObjectCounter"],[3,"PerSizeClassObjectCounter"],[8,"RtAnalysis"],[3,"AnalysisManager"],[3,"EDGE_LOG"],[3,"FinalizableProcessor"],[3,"Finalization"],[3,"ForwardFinalization"],[3,"HeaderByte"],[3,"PageAccounting"],[8,"Mmapper"],[4,"MapState"],[3,"FragmentedMapper"],[8,"Map"],[3,"Map64"],[3,"CommonFreeListPageResource"],[3,"FreeListPageResource"],[3,"FreeListPageResourceSync"],[3,"HeapMeta"],[3,"MonotonePageResource"],[3,"MonotonePageResourceSync"],[4,"MonotonePageResourceConditional"],[13,"Contiguous"],[8,"PageResource"],[3,"PRAllocResult"],[3,"CommonPageResource"],[3,"SpaceDescriptor"],[4,"VMRequest"],[13,"RequestFixed"],[13,"RequestExtent"],[13,"RequestFraction"],[4,"NurseryZeroingOptions"],[4,"PlanSelector"],[3,"UnsafeOptionsWrapper"],[3,"Options"],[3,"SanityChecker"],[3,"ScheduleSanityGC"],[3,"SanityPrepare"],[3,"SanityRelease"],[3,"SanityGCProcessEdges"],[4,"SideMetadataScope"],[3,"SideMetadataSpec"],[3,"SideMetadataContext"],[3,"SideMetadata"],[3,"EventCounter"],[3,"LongCounter"],[3,"SizeCounter"],[8,"Counter"],[8,"Diffable"],[3,"SharedStats"],[3,"Stats"],[3,"TreadMill"],[8,"GenericFreeList"],[3,"IntArrayFreeList"],[3,"RawMemoryFreeList"],[3,"SynchronizedCounter"],[3,"SynchronizedMutatorIterator"],[8,"ActivePlan"],[8,"Collection"],[8,"ObjectModel"],[8,"ReferenceGlue"],[8,"Scanning"],[8,"VMBinding"],[3,"EmptySpaceSFT"],[3,"NoBarrier"],[3,"ScheduleCollection"],[3,"EndOfGC"],[3,"DumpLinearScan"],[3,"GcHookWork"],[3,"PRAllocFail"],[3,"MonotoneNanoTime"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);