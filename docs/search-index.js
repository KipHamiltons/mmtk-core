var searchIndex = JSON.parse('{\
"mmtk":{"doc":"Memory Management ToolKit (MMTk) is a portable and high …","i":[[0,"util","mmtk","Utilities used by other modules, including allocators, …",null,null],[0,"macros","mmtk::util","",null,null],[0,"conversions","","",null,null],[5,"is_address_aligned","mmtk::util::conversions","",null,[[["address",3]]]],[5,"page_align_down","","",null,[[["address",3]],["address",3]]],[5,"is_page_aligned","","",null,[[["address",3]]]],[5,"chunk_align_up","","",null,[[["address",3]],["address",3]]],[5,"chunk_align_down","","",null,[[["address",3]],["address",3]]],[5,"mmap_chunk_align_up","","",null,[[["address",3]],["address",3]]],[5,"mmap_chunk_align_down","","",null,[[["address",3]],["address",3]]],[5,"bytes_to_chunks_up","","",null,[[]]],[5,"address_to_chunk_index","","",null,[[["address",3]]]],[5,"chunk_index_to_address","","",null,[[],["address",3]]],[5,"raw_align_up","","",null,[[]]],[5,"raw_align_down","","",null,[[]]],[5,"raw_is_aligned","","",null,[[]]],[5,"pages_to_bytes","","",null,[[]]],[5,"bytes_to_pages_up","","",null,[[]]],[5,"bytes_to_pages","","",null,[[]]],[0,"address","mmtk::util","",null,null],[6,"ByteSize","mmtk::util::address","size in bytes",null,null],[6,"ByteOffset","","offset in byte",null,null],[3,"Address","","Address represents an arbitrary address. This is designed …",null,null],[18,"ZERO","","",0,null],[18,"MAX","","",0,null],[11,"from_ptr","","creates Address from a pointer",0,[[],["address",3]]],[11,"from_ref","","",0,[[],["address",3]]],[11,"from_mut_ptr","","creates Address from a mutable pointer",0,[[],["address",3]]],[11,"zero","","creates a null Address (0)",0,[[],["address",3]]],[11,"max","","creates an Address of (usize::MAX)",0,[[],["address",3]]],[11,"from_usize","","creates an arbitrary Address",0,[[],["address",3]]],[11,"shift","","shifts the address by N T-typed objects (returns addr + N …",0,[[]]],[11,"get_extent","","",0,[[["address",3]],["bytesize",6]]],[11,"get_offset","","",0,[[["address",3]],["byteoffset",6]]],[11,"add","","",0,[[],["address",3]]],[11,"sub","","",0,[[],["address",3]]],[11,"load","","loads a value of type T from the address",0,[[],["copy",8]]],[11,"store","","stores a value of type T to the address",0,[[]]],[11,"atomic_load","","atomic operation: load",0,[[["ordering",4]]]],[11,"atomic_store","","atomic operation: store",0,[[["ordering",4]]]],[11,"compare_exchange","","atomic operation: compare and exchange usize",0,[[["ordering",4]],["result",4]]],[11,"is_zero","","is this address zero?",0,[[]]],[11,"align_up","","aligns up the address to the given alignment",0,[[["bytesize",6]],["address",3]]],[11,"align_down","","aligns down the address to the given alignment",0,[[["bytesize",6]],["address",3]]],[11,"is_aligned_to","","is this address aligned to the given alignment",0,[[]]],[11,"to_object_reference","","converts the Address into an ObjectReference",0,[[],["objectreference",3]]],[11,"to_ptr","","converts the Address to a pointer",0,[[]]],[11,"to_mut_ptr","","converts the Address to a mutable pointer",0,[[]]],[11,"as_usize","","converts the Address to a pointer-sized integer",0,[[]]],[11,"chunk_index","","returns the chunk index for this address",0,[[]]],[11,"is_mapped","","return true if the referenced memory is mapped",0,[[]]],[3,"ObjectReference","","ObjectReference represents address for an object. …",null,null],[11,"to_address","","converts the ObjectReference to an Address",1,[[],["address",3]]],[11,"is_null","","is this object reference null reference?",1,[[]]],[11,"value","","returns the ObjectReference",1,[[]]],[11,"is_live","","",1,[[]]],[11,"is_movable","","",1,[[]]],[11,"is_mapped","","",1,[[]]],[11,"is_sane","","",1,[[]]],[0,"alloc","mmtk::util","",null,null],[0,"allocator","mmtk::util::alloc","",null,null],[5,"align_allocation_no_fill","mmtk::util::alloc::allocator","",null,[[["address",3]],["address",3]]],[5,"align_allocation","","",null,[[["address",3]],["address",3]]],[5,"fill_alignment_gap","","",null,[[["address",3]]]],[5,"get_maximum_aligned_size","","",null,[[]]],[8,"Allocator","","",null,null],[10,"get_tls","","",2,[[],["vmthread",3]]],[10,"get_space","","",2,[[],["space",8]]],[10,"get_plan","","",2,[[],["plan",8]]],[10,"alloc","","",2,[[],["address",3]]],[11,"alloc_slow","","",2,[[],["address",3]]],[11,"alloc_slow_inline","","",2,[[],["address",3]]],[10,"alloc_slow_once","","",2,[[],["address",3]]],[11,"is","","Returns true if the trait object wraps an object of type …",2,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the …",2,[[["box",3]],[["result",4],["box",3],["box",3]]]],[11,"downcast_rc","","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …",2,[[["rc",3]],[["result",4],["rc",3],["rc",3]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object …",2,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the …",2,[[],["option",4]]],[0,"allocators","mmtk::util::alloc","",null,null],[3,"Allocators","mmtk::util::alloc::allocators","",null,null],[12,"bump_pointer","","",3,null],[12,"large_object","","",3,null],[12,"malloc","","",3,null],[11,"get_allocator","","SafetyThe selector needs to be valid, and points to an …",3,[[["allocatorselector",4]],["allocator",8]]],[11,"get_allocator_mut","","SafetyThe selector needs to be valid, and points to an …",3,[[["allocatorselector",4]],["allocator",8]]],[11,"new","","",3,[[["vmmutatorthread",3],["plan",8]]]],[4,"AllocatorSelector","","",null,null],[13,"BumpPointer","","",4,null],[13,"LargeObject","","",4,null],[13,"Malloc","","",4,null],[0,"dump_linear_scan","mmtk::util::alloc","",null,null],[3,"DumpLinearScan","mmtk::util::alloc::dump_linear_scan","",null,null],[0,"embedded_meta_data","mmtk::util::alloc","",null,null],[17,"LOG_BYTES_IN_REGION","mmtk::util::alloc::embedded_meta_data","",null,null],[17,"BYTES_IN_REGION","","",null,null],[17,"REGION_MASK","","",null,null],[17,"LOG_PAGES_IN_REGION","","",null,null],[17,"PAGES_IN_REGION","","",null,null],[5,"get_metadata_base","","",null,[[["address",3]],["address",3]]],[5,"get_metadata_offset","","",null,[[["address",3]]]],[0,"large_object_allocator","mmtk::util::alloc","",null,null],[3,"LargeObjectAllocator","mmtk::util::alloc::large_object_allocator","",null,null],[12,"tls","","",5,null],[11,"new","","",5,[[["largeobjectspace",3],["plan",8],["vmthread",3]]]],[0,"linear_scan","mmtk::util::alloc","",null,null],[8,"LinearScan","mmtk::util::alloc::linear_scan","",null,null],[10,"scan","","",6,[[["objectreference",3]]]],[0,"malloc_allocator","mmtk::util::alloc","",null,null],[3,"MallocAllocator","mmtk::util::alloc::malloc_allocator","",null,null],[12,"tls","","",7,null],[11,"new","","",7,[[["mallocspace",3],["plan",8],["vmthread",3]]]],[3,"BumpAllocator","mmtk::util::alloc","",null,null],[12,"tls","","",8,null],[0,"analysis","mmtk::util","",null,null],[0,"gc_count","mmtk::util::analysis","",null,null],[3,"GcCounter","mmtk::util::analysis::gc_count","Simple analysis routine that counts the number of …",null,null],[11,"new","","",9,[[["arc",3],["mutex",3]]]],[0,"obj_num","mmtk::util::analysis","",null,null],[3,"ObjectCounter","mmtk::util::analysis::obj_num","Simple analysis routine that counts the number of objects …",null,null],[11,"new","","",10,[[["arc",3],["mutex",3]]]],[0,"obj_size","mmtk::util::analysis","",null,null],[3,"PerSizeClassObjectCounter","mmtk::util::analysis::obj_size","This file implements an analysis routine that counts the …",null,null],[11,"new","","",11,[[]]],[8,"RtAnalysis","mmtk::util::analysis","This trait exposes hooks for developers to implement …",null,null],[11,"alloc_hook","","",12,[[]]],[11,"gc_hook","","",12,[[["mmtk",3]]]],[10,"set_running","","",12,[[]]],[3,"GcHookWork","","",null,null],[3,"AnalysisManager","","",null,null],[11,"new","","",13,[[["stats",3]]]],[11,"add_analysis_routine","","",13,[[["mutex",3],["arc",3]]]],[11,"alloc_hook","","",13,[[]]],[11,"gc_hook","","",13,[[["mmtk",3]]]],[0,"constants","mmtk::util","",null,null],[17,"INSTANCE_FIELD","mmtk::util::constants","Modes.",null,null],[17,"ARRAY_ELEMENT","","",null,null],[17,"LOG_BYTES_IN_BYTE","","",null,null],[17,"BYTES_IN_BYTE","","",null,null],[17,"LOG_BITS_IN_BYTE","","",null,null],[17,"BITS_IN_BYTE","","",null,null],[17,"LOG_BYTES_IN_MBYTE","","",null,null],[17,"BYTES_IN_MBYTE","","",null,null],[17,"LOG_BYTES_IN_KBYTE","","",null,null],[17,"BYTES_IN_KBYTE","","",null,null],[17,"SUPPORT_CARD_SCANNING","","",null,null],[17,"LOG_CARD_META_SIZE","","",null,null],[17,"LOG_CARD_UNITS","","",null,null],[17,"LOG_CARD_GRAIN","","",null,null],[17,"LOG_CARD_BYTES","","",null,null],[17,"LOG_CARD_META_BYTES","","",null,null],[17,"LOG_CARD_META_PAGES","","",null,null],[17,"CARD_META_PAGES_PER_REGION","","",null,null],[17,"CARD_MASK","","",null,null],[17,"LAZY_SWEEP","","Lazy sweeping - controlled from here because …",null,null],[17,"LOG_BYTES_IN_CHAR","","",null,null],[17,"BYTES_IN_CHAR","","",null,null],[17,"LOG_BITS_IN_CHAR","","",null,null],[17,"BITS_IN_CHAR","","",null,null],[17,"LOG_BYTES_IN_SHORT","","",null,null],[17,"BYTES_IN_SHORT","","",null,null],[17,"LOG_BITS_IN_SHORT","","",null,null],[17,"BITS_IN_SHORT","","",null,null],[17,"LOG_BYTES_IN_INT","","",null,null],[17,"BYTES_IN_INT","","",null,null],[17,"LOG_BITS_IN_INT","","",null,null],[17,"BITS_IN_INT","","",null,null],[17,"LOG_BYTES_IN_LONG","","",null,null],[17,"BYTES_IN_LONG","","",null,null],[17,"LOG_BITS_IN_LONG","","",null,null],[17,"BITS_IN_LONG","","",null,null],[17,"MAX_INT","","",null,null],[17,"MIN_INT","","",null,null],[17,"LOG_BYTES_IN_ADDRESS","","",null,null],[17,"BYTES_IN_ADDRESS","","",null,null],[17,"LOG_BITS_IN_ADDRESS","","",null,null],[17,"BITS_IN_ADDRESS","","",null,null],[17,"LOG_BYTES_IN_WORD","","",null,null],[17,"BYTES_IN_WORD","","",null,null],[17,"LOG_BITS_IN_WORD","","",null,null],[17,"BITS_IN_WORD","","",null,null],[17,"LOG_BYTES_IN_PAGE","","",null,null],[17,"BYTES_IN_PAGE","","",null,null],[17,"LOG_BITS_IN_PAGE","","",null,null],[17,"BITS_IN_PAGE","","",null,null],[17,"LOG_BYTES_IN_ADDRESS_SPACE","","",null,null],[17,"LOG_MIN_OBJECT_SIZE","","",null,null],[17,"MIN_OBJECT_SIZE","","",null,null],[17,"DEFAULT_STRESS_FACTOR","","",null,null],[0,"edge_logger","mmtk::util","This is a simple module to log edges and check for …",null,null],[5,"log_edge","mmtk::util::edge_logger","Logs an edge. Panics if the edge was already logged.",null,[[["address",3]]]],[5,"reset","","Reset the edge logger by clearing the hash-set of edges. …",null,[[]]],[0,"finalizable_processor","mmtk::util","",null,null],[3,"FinalizableProcessor","mmtk::util::finalizable_processor","A special processor for Finalizable objects.",null,null],[11,"new","","",14,[[]]],[11,"add","","",14,[[["objectreference",3]]]],[11,"scan","","",14,[[["vmworkerthread",3]]]],[11,"forward","","",14,[[]]],[11,"get_ready_object","","",14,[[],[["option",4],["objectreference",3]]]],[3,"Finalization","","",null,null],[11,"new","","",15,[[]]],[3,"ForwardFinalization","","",null,null],[11,"new","","",16,[[]]],[0,"forwarding_word","mmtk::util","",null,null],[5,"attempt_to_forward","mmtk::util::forwarding_word","",null,[[["objectreference",3]]]],[5,"spin_and_get_forwarded_object","","",null,[[["objectreference",3]],["objectreference",3]]],[5,"forward_object","","",null,[[["objectreference",3],["allocationsemantics",4]],["objectreference",3]]],[5,"set_forwarding_pointer","","",null,[[["objectreference",3]]]],[5,"is_forwarded","","",null,[[["objectreference",3]]]],[5,"is_forwarded_or_being_forwarded","","",null,[[["objectreference",3]]]],[5,"state_is_forwarded_or_being_forwarded","","",null,[[]]],[5,"state_is_being_forwarded","","",null,[[]]],[5,"clear_forwarding_bits","","",null,[[["objectreference",3]]]],[5,"read_forwarding_word","","",null,[[["objectreference",3]]]],[5,"write_forwarding_word","","",null,[[["objectreference",3]]]],[5,"compare_exchange_forwarding_word","","",null,[[["objectreference",3]]]],[0,"gc_byte","mmtk::util","",null,null],[17,"SIDE_GC_BYTE_SPEC","mmtk::util::gc_byte","",null,null],[5,"read_gc_byte","","Atomically reads the current value of an object\'s GC byte.",null,[[["objectreference",3]]]],[5,"write_gc_byte","","Atomically writes a new value to the GC byte of an object",null,[[["objectreference",3]]]],[5,"compare_exchange_gc_byte","","Atomically performs the compare-and-exchange operation on …",null,[[["objectreference",3]]]],[0,"generic_freelist","mmtk::util","",null,null],[17,"FAILURE","mmtk::util::generic_freelist","",null,null],[17,"MAX_HEADS","","",null,null],[17,"MAX_UNITS","","",null,null],[8,"GenericFreeList","","",null,null],[10,"head","","",17,[[]]],[10,"heads","","",17,[[]]],[10,"get_entry","","",17,[[]]],[10,"set_entry","","",17,[[]]],[11,"alloc","","",17,[[]]],[11,"alloc_from_unit","","",17,[[]]],[11,"free","","Free a previously allocated contiguous lump of units",17,[[]]],[11,"size","","",17,[[]]],[11,"initialize_heap","","",17,[[]]],[11,"add_to_free","","",17,[[]]],[11,"get_right","","",17,[[]]],[11,"set_sentinel","","",17,[[]]],[11,"get_size","","",17,[[]]],[11,"set_size","","",17,[[]]],[11,"get_free","","",17,[[]]],[11,"set_free","","",17,[[]]],[11,"get_next","","",17,[[]]],[11,"set_next","","",17,[[]]],[11,"get_prev","","",17,[[]]],[11,"set_prev","","",17,[[]]],[11,"get_left","","",17,[[]]],[11,"is_coalescable","","",17,[[]]],[11,"clear_uncoalescable","","",17,[[]]],[11,"set_uncoalescable","","",17,[[]]],[11,"is_multi","","",17,[[]]],[11,"is_free","","",17,[[]]],[11,"get_lo_entry","","",17,[[]]],[11,"get_hi_entry","","",17,[[]]],[11,"set_lo_entry","","",17,[[]]],[11,"set_hi_entry","","",17,[[]]],[11,"__alloc","","",17,[[]]],[11,"__split","","",17,[[]]],[11,"__coalesce","","",17,[[]]],[11,"__remove_from_free","","",17,[[]]],[0,"header_byte","mmtk::util","",null,null],[17,"TOTAL_BITS","mmtk::util::header_byte","",null,null],[3,"HeaderByte","","",null,null],[12,"needs_unlogged_bit","","",18,null],[12,"unlogged_bit_number","","",18,null],[12,"unlogged_bit","","",18,null],[12,"used_global_bits","","",18,null],[11,"new","","",18,[[["planconstraints",3]]]],[11,"mark_as_unlogged","","",18,[[["objectreference",3]]]],[11,"mark_as_logged","","",18,[[["objectreference",3]]]],[11,"is_unlogged","","",18,[[["objectreference",3]]]],[0,"heap","mmtk::util","",null,null],[0,"layout","mmtk::util::heap","",null,null],[0,"heap_parameters","mmtk::util::heap::layout","",null,null],[17,"LOG_MAX_SPACES","mmtk::util::heap::layout::heap_parameters","log_2 of the maximum number of spaces a Plan can support.",null,null],[17,"MAX_SPACES","","Maximum number of spaces a Plan can support.",null,null],[17,"LOG_SPACE_SIZE_64","","In a 64-bit addressing model, each space is the same …",null,null],[0,"vm_layout_constants","mmtk::util::heap::layout","",null,null],[17,"LOG_ADDRESS_SPACE","mmtk::util::heap::layout::vm_layout_constants","log_2 of the addressable virtual space ",null,null],[17,"LOG_BYTES_IN_CHUNK","","log_2 of the coarsest unit of address space allocation.",null,null],[17,"BYTES_IN_CHUNK","","Coarsest unit of address space allocation. ",null,null],[17,"PAGES_IN_CHUNK","","Coarsest unit of address space allocation, in pages ",null,null],[17,"LOG_MAX_CHUNKS","","log_2 of the maximum number of chunks we need to track.  …",null,null],[17,"MAX_CHUNKS","","Maximum number of chunks we need to track.  Only used in …",null,null],[17,"LOG_SPACE_EXTENT","","An upper bound on the extent of any space in the current …",null,null],[17,"MAX_SPACE_EXTENT","","An upper bound on the extent of any space in the current …",null,null],[17,"HEAP_START","","",null,null],[17,"HEAP_END","","",null,null],[17,"VM_SPACE_SIZE","","",null,null],[17,"AVAILABLE_START","","Lowest virtual address available for MMTk to manage.  The …",null,null],[17,"AVAILABLE_END","","Highest virtual address available for MMTk to manage.  …",null,null],[17,"AVAILABLE_BYTES","","Size of the address space available to the MMTk heap. ",null,null],[17,"LOG_MMAP_CHUNK_BYTES","","Granularity at which we map and unmap virtual address …",null,null],[17,"MMAP_CHUNK_BYTES","","",null,null],[17,"LOG_PAGES_IN_SPACE64","","log_2 of the number of pages in a 64-bit space ",null,null],[17,"PAGES_IN_SPACE64","","The number of pages in a 64-bit space ",null,null],[17,"SPACE_SHIFT_64","","",null,null],[17,"SPACE_MASK_64","","",null,null],[17,"SPACE_SIZE_64","","",null,null],[0,"mmapper","mmtk::util::heap::layout","",null,null],[8,"Mmapper","mmtk::util::heap::layout::mmapper","",null,null],[10,"eagerly_mmap_all_spaces","","Given an address array describing the regions of virtual …",19,[[]]],[10,"mark_as_mapped","","Mark a number of pages as mapped, without making any …",19,[[["address",3]]]],[10,"ensure_mapped","","Ensure that a range of pages is mmapped (or equivalent).  …",19,[[["sidemetadata",3],["address",3]],["result",6]]],[11,"map_metadata","","Map metadata memory for a given chunk",19,[[["sidemetadata",3],["address",3]],["result",6]]],[10,"is_mapped_address","","Is the page pointed to by this address mapped ? @param …",19,[[["address",3]]]],[10,"protect","","Mark a number of pages as inaccessible. @param start …",19,[[["address",3]]]],[0,"heap_layout","mmtk::util::heap::layout","",null,null],[6,"VMMap","mmtk::util::heap::layout::heap_layout","",null,null],[6,"Mmapper","","",null,null],[0,"map","mmtk::util::heap::layout","",null,null],[8,"Map","mmtk::util::heap::layout::map","",null,null],[16,"FreeList","","",20,null],[10,"new","","",20,[[]]],[10,"insert","","",20,[[["address",3],["spacedescriptor",3]]]],[10,"create_freelist","","",20,[[["commonfreelistpageresource",3]],["box",3]]],[10,"create_parent_freelist","","",20,[[["commonfreelistpageresource",3]],["box",3]]],[10,"allocate_contiguous_chunks","","",20,[[["address",3],["spacedescriptor",3]],["address",3]]],[10,"get_next_contiguous_region","","",20,[[["address",3]],["address",3]]],[10,"get_contiguous_region_chunks","","",20,[[["address",3]]]],[10,"get_contiguous_region_size","","",20,[[["address",3]]]],[10,"free_all_chunks","","",20,[[["address",3]]]],[10,"free_contiguous_chunks","","",20,[[["address",3]]]],[11,"boot","","",20,[[]]],[10,"finalize_static_space_map","","",20,[[["address",3]]]],[10,"is_finalized","","",20,[[]]],[10,"get_discontig_freelist_pr_ordinal","","",20,[[["commonfreelistpageresource",3]]]],[10,"get_descriptor_for_address","","",20,[[["address",3]],["spacedescriptor",3]]],[11,"get_chunk_index","","",20,[[["address",3]]]],[11,"address_for_chunk_index","","",20,[[],["address",3]]],[10,"add_to_cumulative_committed_pages","","",20,[[]]],[0,"map64","mmtk::util::heap::layout","",null,null],[3,"Map64","mmtk::util::heap::layout::map64","",null,null],[3,"FragmentedMapper","mmtk::util::heap::layout","",null,null],[0,"freelistpageresource","mmtk::util::heap","",null,null],[3,"CommonFreeListPageResource","mmtk::util::heap::freelistpageresource","",null,null],[11,"get_start","","",21,[[],["address",3]]],[11,"resize_freelist","","",21,[[["address",3]]]],[3,"FreeListPageResource","","",null,null],[11,"new_contiguous","","",22,[[["address",3],["vmmap",6]]]],[11,"new_discontiguous","","",22,[[["vmmap",6]]]],[11,"release_pages","","",22,[[["address",3]]]],[0,"monotonepageresource","mmtk::util::heap","",null,null],[3,"MonotonePageResource","mmtk::util::heap::monotonepageresource","",null,null],[4,"MonotonePageResourceConditional","","",null,null],[13,"Contiguous","","",23,null],[12,"start","mmtk::util::heap::monotonepageresource::MonotonePageResourceConditional","",24,null],[12,"zeroing_cursor","","Current frontier of zeroing, in a separate zeroing thread ",24,null],[12,"zeroing_sentinel","","Current limit of zeroing.  If zeroingCursor < …",24,null],[13,"Discontiguous","mmtk::util::heap::monotonepageresource","",23,null],[11,"new_contiguous","","",25,[[["address",3],["vmmap",6]]]],[11,"new_discontiguous","","",25,[[["vmmap",6]]]],[11,"reset","","SafetyTODO: I am not sure why this is unsafe.",25,[[]]],[0,"pageresource","mmtk::util::heap","",null,null],[8,"PageResource","mmtk::util::heap::pageresource","",null,null],[11,"get_new_pages","","Allocate pages from this resource. Simply bump the …",26,[[["spacedescriptor",3],["vmthread",3]],[["prallocfail",3],["prallocresult",3],["result",4]]]],[11,"reserve_pages","","",26,[[]]],[11,"clear_request","","",26,[[]]],[11,"update_zeroing_approach","","",26,[[]]],[11,"skip_concurrent_zeroing","","",26,[[]]],[11,"trigger_concurrent_zeroing","","",26,[[]]],[11,"concurrent_zeroing","","",26,[[]]],[10,"alloc_pages","","",26,[[["spacedescriptor",3],["vmthread",3]],[["prallocfail",3],["prallocresult",3],["result",4]]]],[10,"adjust_for_metadata","","",26,[[]]],[11,"commit_pages","","Commit pages to the page budget.  This is called after …",26,[[["vmthread",3]]]],[11,"reserved_pages","","",26,[[]]],[11,"committed_pages","","",26,[[]]],[10,"common","","",26,[[],["commonpageresource",3]]],[10,"common_mut","","",26,[[],["commonpageresource",3]]],[11,"vm_map","","",26,[[],["vmmap",6]]],[3,"PRAllocResult","","",null,null],[12,"start","","",27,null],[12,"pages","","",27,null],[12,"new_chunk","","",27,null],[3,"PRAllocFail","","",null,null],[3,"CommonPageResource","","",null,null],[12,"accounting","","",28,null],[12,"contiguous","","",28,null],[12,"growable","","",28,null],[11,"new","","",28,[[["vmmap",6]],["commonpageresource",3]]],[11,"grow_discontiguous_space","","Extend the virtual memory associated with a particular …",28,[[["spacedescriptor",3]],["address",3]]],[11,"release_discontiguous_chunks","","Release one or more contiguous chunks associated with a …",28,[[["address",3]]]],[11,"release_all_chunks","","",28,[[]]],[11,"get_head_discontiguous_region","","",28,[[],["address",3]]],[0,"space_descriptor","mmtk::util::heap","",null,null],[3,"SpaceDescriptor","mmtk::util::heap::space_descriptor","",null,null],[18,"UNINITIALIZED","","",29,null],[11,"create_descriptor_from_heap_range","","",29,[[["address",3]],["spacedescriptor",3]]],[11,"create_descriptor","","",29,[[],["spacedescriptor",3]]],[11,"is_empty","","",29,[[]]],[11,"is_contiguous","","",29,[[]]],[11,"is_contiguous_hi","","",29,[[]]],[11,"get_start","","",29,[[],["address",3]]],[11,"get_extent","","",29,[[]]],[11,"get_index","","",29,[[]]],[3,"PageAccounting","mmtk::util::heap","The struct is used for page usage. Both page resource and …",null,null],[3,"HeapMeta","","",null,null],[12,"heap_cursor","","",30,null],[12,"heap_limit","","",30,null],[12,"total_pages","","",30,null],[4,"VMRequest","","",null,null],[13,"RequestDiscontiguous","","",31,null],[13,"RequestFixed","","",31,null],[12,"start","mmtk::util::heap::VMRequest","",32,null],[12,"extent","","",32,null],[12,"top","","",32,null],[13,"RequestExtent","mmtk::util::heap","",31,null],[12,"extent","mmtk::util::heap::VMRequest","",33,null],[12,"top","","",33,null],[13,"RequestFraction","mmtk::util::heap","",31,null],[12,"frac","mmtk::util::heap::VMRequest","",34,null],[12,"top","","",34,null],[0,"int_array_freelist","mmtk::util","",null,null],[3,"IntArrayFreeList","mmtk::util::int_array_freelist","",null,null],[12,"head","","",35,null],[12,"heads","","",35,null],[12,"table","","",35,null],[11,"new","","",35,[[]]],[11,"from_parent","","",35,[[["intarrayfreelist",3]]]],[11,"resize_freelist","","",35,[[]]],[0,"logger","mmtk::util","",null,null],[5,"try_init","mmtk::util::logger","Attempt to init a env_logger for MMTk.",null,[[],[["setloggererror",3],["result",4]]]],[0,"malloc","mmtk::util","",null,null],[5,"calloc","mmtk::util::malloc","",null,[[]]],[5,"free","","",null,[[]]],[5,"malloc_usable_size","","",null,[[]]],[0,"memory","mmtk::util","",null,null],[5,"result_is_mapped","mmtk::util::memory","",null,[[["result",6]]]],[5,"zero","","",null,[[["address",3]]]],[5,"dzmmap","","Demand-zero mmap: This function mmaps the memory and …",null,[[["address",3]],["result",6]]],[5,"dzmmap_noreplace","","Demand-zero mmap (no replace): This function mmaps the …",null,[[["address",3]],["result",6]]],[5,"mmap_noreserve","","mmap with no swap space reserve: This function does not …",null,[[["address",3]],["result",6]]],[5,"mmap_fixed","","",null,[[["address",3],["c_int",6]],["result",6]]],[5,"munmap","","",null,[[["address",3]],["result",6]]],[5,"handle_mmap_error","","Properly handle errors from a mmap Result, including …",null,[[["error",3],["vmthread",3]]]],[5,"panic_if_unmapped","","Checks if the memory has already been mapped. If not, we …",null,[[["address",3]]]],[5,"munprotect","","",null,[[["address",3]],["result",6]]],[5,"mprotect","","",null,[[["address",3]],["result",6]]],[0,"opaque_pointer","mmtk::util","",null,null],[3,"OpaquePointer","mmtk::util::opaque_pointer","",null,null],[18,"UNINITIALIZED","","",36,null],[11,"from_address","","",36,[[["address",3]]]],[11,"is_null","","",36,[[]]],[3,"VMThread","","A VMThread is an opaque pointer that can uniquely …",null,null],[12,"0","","",37,null],[18,"UNINITIALIZED","","",37,null],[3,"VMMutatorThread","","A VMMutatorThread is a VMThread that associates with a …",null,null],[12,"0","","",38,null],[3,"VMWorkerThread","","A VMWorkerThread is a VMThread that is associates with a …",null,null],[12,"0","","",39,null],[0,"options","mmtk::util","",null,null],[4,"NurseryZeroingOptions","mmtk::util::options","",null,null],[13,"Temporal","","",40,null],[13,"Nontemporal","","",40,null],[13,"Concurrent","","",40,null],[13,"Adaptive","","",40,null],[4,"PlanSelector","","",null,null],[13,"NoGC","","",41,null],[13,"SemiSpace","","",41,null],[13,"GenCopy","","",41,null],[13,"MarkSweep","","",41,null],[3,"UnsafeOptionsWrapper","","",null,null],[11,"new","","",42,[[["options",3]],["unsafeoptionswrapper",3]]],[11,"process","","SafetyThis method is not thread safe, as internally it …",42,[[]]],[3,"Options","","",null,null],[12,"plan","","",43,null],[12,"threads","","",43,null],[12,"use_short_stack_scans","","",43,null],[12,"use_return_barrier","","",43,null],[12,"eager_complete_sweep","","",43,null],[12,"ignore_system_g_c","","",43,null],[12,"variable_size_heap","","",43,null],[12,"no_finalizer","","",43,null],[12,"no_reference_types","","",43,null],[12,"nursery_zeroing","","",43,null],[12,"verbose","","",43,null],[12,"stress_factor","","",43,null],[12,"analysis_factor","","",43,null],[12,"vm_space","","",43,null],[12,"vm_space_size","","",43,null],[11,"set_from_str","","",43,[[]]],[0,"raw_memory_freelist","mmtk::util","",null,null],[3,"RawMemoryFreeList","mmtk::util::raw_memory_freelist","",null,null],[12,"head","","",44,null],[12,"heads","","",44,null],[11,"default_block_size","","",44,[[]]],[11,"size_in_pages","","",44,[[]]],[11,"new","","",44,[[["address",3]]]],[11,"grow_freelist","","",44,[[]]],[11,"get_limit","","",44,[[],["address",3]]],[0,"reference_processor","mmtk::util","",null,null],[3,"ReferenceProcessors","mmtk::util::reference_processor","",null,null],[11,"new","","",45,[[]]],[11,"get","","",45,[[["semantics",4]],["referenceprocessor",3]]],[11,"clear","","",45,[[]]],[11,"add_soft_candidate","","",45,[[["objectreference",3]]]],[11,"add_weak_candidate","","",45,[[["objectreference",3]]]],[11,"add_phantom_candidate","","",45,[[["objectreference",3]]]],[11,"forward_refs","","",45,[[]]],[11,"scan_weak_refs","","",45,[[["vmworkerthread",3]]]],[11,"scan_soft_refs","","",45,[[["vmworkerthread",3]]]],[11,"scan_phantom_refs","","",45,[[["vmworkerthread",3]]]],[17,"TRACE","","",null,null],[17,"TRACE_UNREACHABLE","","",null,null],[17,"TRACE_DETAIL","","",null,null],[17,"TRACE_FORWARD","","",null,null],[3,"ReferenceProcessor","","",null,null],[4,"Semantics","","",null,null],[13,"SOFT","","",46,null],[13,"WEAK","","",46,null],[13,"PHANTOM","","",46,null],[11,"new","","",47,[[["semantics",4]]]],[11,"clear","","",47,[[]]],[11,"add_candidate","","",47,[[["objectreference",3]]]],[11,"forward","","",47,[[]]],[0,"sanity","mmtk::util","",null,null],[0,"memory_scan","mmtk::util::sanity","",null,null],[5,"scan_region","mmtk::util::sanity::memory_scan","",null,[[]]],[0,"sanity_checker","mmtk::util::sanity","",null,null],[3,"SanityChecker","mmtk::util::sanity::sanity_checker","",null,null],[11,"new","","",48,[[]]],[3,"ScheduleSanityGC","","",null,null],[11,"new","","",49,[[]]],[3,"SanityPrepare","","",null,null],[12,"plan","","",50,null],[11,"new","","",50,[[]]],[3,"SanityRelease","","",null,null],[12,"plan","","",51,null],[11,"new","","",51,[[]]],[3,"SanityGCProcessEdges","","",null,null],[0,"side_metadata","mmtk::util","This is a generic module to work with side metadata (vs. …",null,null],[17,"GLOBAL_SIDE_METADATA_BASE_ADDRESS","mmtk::util::side_metadata","",null,null],[17,"LOCAL_SIDE_METADATA_BASE_ADDRESS","","",null,null],[4,"SideMetadataScope","","",null,null],[13,"Global","","",52,null],[13,"PolicySpecific","","",52,null],[3,"SideMetadataSpec","","This struct stores the specification of a side metadata …",null,null],[12,"scope","","",53,null],[12,"offset","","",53,null],[12,"log_num_of_bits","","",53,null],[12,"log_min_obj_size","","",53,null],[3,"SideMetadataContext","","This struct stores all the side metadata specs for a …",null,null],[12,"global","","",54,null],[12,"local","","",54,null],[3,"SideMetadata","","",null,null],[5,"ensure_metadata_is_mapped","","",null,[[["sidemetadataspec",3],["address",3]]]],[5,"load_atomic","","",null,[[["sidemetadataspec",3],["address",3]]]],[5,"store_atomic","","",null,[[["sidemetadataspec",3],["address",3]]]],[5,"compare_exchange_atomic","","",null,[[["sidemetadataspec",3],["address",3]]]],[5,"fetch_add_atomic","","",null,[[["sidemetadataspec",3],["address",3]]]],[5,"fetch_sub_atomic","","",null,[[["sidemetadataspec",3],["address",3]]]],[5,"load","","Non-atomic load of metadata.",null,[[["sidemetadataspec",3],["address",3]]]],[5,"store","","Non-atomic store of metadata.",null,[[["sidemetadataspec",3],["address",3]]]],[5,"bzero_metadata","","Bulk-zero a specific metadata for a chunk.",null,[[["sidemetadataspec",3],["address",3]]]],[0,"statistics","mmtk::util","",null,null],[0,"counter","mmtk::util::statistics","",null,null],[3,"EventCounter","mmtk::util::statistics::counter","This file implements a simple event counter (counting …",null,null],[12,"implicitly_start","","",55,null],[3,"LongCounter","","",null,null],[12,"implicitly_start","","",56,null],[6,"Timer","","",null,null],[3,"SizeCounter","","",null,null],[8,"Counter","","",null,null],[10,"start","","",57,[[]]],[10,"stop","","",57,[[]]],[10,"phase_change","","",57,[[]]],[10,"print_count","","",57,[[]]],[10,"print_total","","",57,[[["option",4]]]],[10,"print_min","","",57,[[]]],[10,"print_max","","",57,[[]]],[10,"print_last","","",57,[[]]],[10,"merge_phases","","",57,[[]]],[10,"implicitly_start","","",57,[[]]],[10,"name","","",57,[[],["string",3]]],[8,"Diffable","","",null,null],[16,"Val","","",58,null],[10,"current_value","","",58,[[]]],[10,"diff","","",58,[[]]],[10,"print_diff","","",58,[[]]],[3,"MonotoneNanoTime","","",null,null],[0,"stats","mmtk::util::statistics","",null,null],[17,"MAX_PHASES","mmtk::util::statistics::stats","",null,null],[17,"MAX_COUNTERS","","",null,null],[3,"SharedStats","","",null,null],[11,"get_phase","","",59,[[]]],[11,"get_gathering_stats","","",59,[[]]],[3,"Stats","","",null,null],[12,"shared","","",60,null],[11,"new","","",60,[[]]],[11,"new_event_counter","","",60,[[],[["arc",3],["mutex",3]]]],[11,"new_size_counter","","",60,[[],[["sizecounter",3],["mutex",3]]]],[11,"new_timer","","",60,[[],[["mutex",3],["arc",3]]]],[11,"start_gc","","",60,[[]]],[11,"end_gc","","",60,[[]]],[11,"print_stats","","",60,[[["mmtk",3]]]],[11,"print_column_names","","",60,[[["hashmap",3]]]],[11,"start_all","","",60,[[]]],[11,"stop_all","","",60,[[["mmtk",3]]]],[11,"get_gathering_stats","","",60,[[]]],[6,"Timer","mmtk::util::statistics","",null,null],[0,"treadmill","mmtk::util","",null,null],[3,"TreadMill","mmtk::util::treadmill","",null,null],[11,"new","","",61,[[]]],[11,"add_to_treadmill","","",61,[[["address",3]]]],[11,"collect_nursery","","",61,[[],[["vec",3],["address",3]]]],[11,"collect","","",61,[[],[["vec",3],["address",3]]]],[11,"copy","","",61,[[["address",3]]]],[11,"to_space_empty","","",61,[[]]],[11,"from_space_empty","","",61,[[]]],[11,"nursery_empty","","",61,[[]]],[11,"flip","","",61,[[]]],[3,"SynchronizedCounter","mmtk::util","",null,null],[0,"plan","mmtk","GC algorithms from the MMTk suite.",null,null],[0,"barriers","mmtk::plan","Read/Write barrier implementations.",null,null],[4,"BarrierSelector","mmtk::plan::barriers","",null,null],[13,"NoBarrier","","",62,null],[13,"ObjectBarrier","","",62,null],[4,"WriteTarget","","For field writes in HotSpot, we cannot always get the …",null,null],[13,"Object","","",63,null],[13,"Slot","","",63,null],[8,"Barrier","","",null,null],[10,"flush","","",64,[[]]],[10,"post_write_barrier","","",64,[[["writetarget",4]]]],[3,"NoBarrier","","",null,null],[3,"ObjectRememberingBarrier","","",null,null],[11,"new","","",65,[[["sidemetadataspec",3],["mmtk",3]]]],[0,"controller_collector_context","mmtk::plan","The GC controller thread.",null,null],[3,"ControllerCollectorContext","mmtk::plan::controller_collector_context","",null,null],[11,"new","","",66,[[]]],[11,"init","","",66,[[["arc",3]]]],[11,"run","","",66,[[["vmworkerthread",3]]]],[11,"request","","",66,[[]]],[11,"clear_request","","",66,[[]]],[0,"global","mmtk::plan","The global part of a plan implementation.",null,null],[8,"CopyContext","mmtk::plan::global","A GC worker\'s context for copying GCs. Each GC plan …",null,null],[16,"VM","","",67,null],[10,"constraints","","",67,[[],["planconstraints",3]]],[10,"init","","",67,[[["vmworkerthread",3]]]],[10,"prepare","","",67,[[]]],[10,"release","","",67,[[]]],[10,"alloc_copy","","",67,[[["objectreference",3],["allocationsemantics",4]],["address",3]]],[11,"post_copy","","",67,[[["objectreference",3],["address",3],["allocationsemantics",4]]]],[11,"copy_check_allocator","","",67,[[["objectreference",3],["allocationsemantics",4]],["allocationsemantics",4]]],[3,"NoCopy","","",null,null],[11,"new","","",68,[[["mmtk",3]]]],[5,"create_mutator","","",null,[[["vmmutatorthread",3],["mmtk",3]],[["mutator",3],["box",3]]]],[5,"create_plan","","",null,[[["arc",3],["mmapper",6],["planselector",4],["vmmap",6],["unsafeoptionswrapper",3]],[["box",3],["plan",8]]]],[8,"Plan","","A plan describes the global core functionality for all …",null,null],[16,"VM","","",69,null],[10,"constraints","","",69,[[],["planconstraints",3]]],[10,"create_worker_local","","",69,[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",6]]],[10,"base","","",69,[[],["baseplan",3]]],[10,"schedule_collection","","",69,[[["mmtkscheduler",6]]]],[11,"common","","",69,[[],["commonplan",3]]],[11,"mmapper","","",69,[[],["mmapper",6]]],[11,"options","","",69,[[],["options",3]]],[10,"gc_init","","",69,[[["arc",3],["vmmap",6]]]],[10,"get_allocator_mapping","","",69,[[],["enummap",3]]],[11,"in_nursery","","",69,[[]]],[11,"enter_sanity","","",69,[[]]],[11,"leave_sanity","","",69,[[]]],[11,"is_in_sanity","","",69,[[]]],[11,"is_initialized","","",69,[[]]],[10,"prepare","","",69,[[["vmworkerthread",3]]]],[10,"release","","",69,[[["vmworkerthread",3]]]],[11,"poll","","",69,[[["space",8]]]],[11,"log_poll","","",69,[[["space",8]]]],[10,"collection_required","","This method controls the triggering of a GC. It is called …",69,[[["space",8]]]],[11,"get_pages_reserved","","",69,[[]]],[11,"get_total_pages","","",69,[[]]],[11,"get_pages_avail","","",69,[[]]],[11,"get_collection_reserve","","",69,[[]]],[10,"get_pages_used","","",69,[[]]],[11,"is_emergency_collection","","",69,[[]]],[11,"get_free_pages","","",69,[[]]],[11,"handle_user_collection_request","","",69,[[["vmmutatorthread",3]]]],[11,"reset_collection_trigger","","",69,[[]]],[11,"modify_check","","",69,[[["objectreference",3]]]],[11,"is","","Returns true if the trait object wraps an object of type …",69,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the …",69,[[["box",3]],[["result",4],["box",3],["box",3]]]],[11,"downcast_rc","","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …",69,[[["rc",3]],[["result",4],["rc",3],["rc",3]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object …",69,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the …",69,[[],["option",4]]],[4,"GcStatus","","",null,null],[13,"NotInGC","","",70,null],[13,"GcPrepare","","",70,null],[13,"GcProper","","",70,null],[3,"BasePlan","","BasePlan should contain all plan-related state and …",null,null],[12,"initialized","","",71,null],[12,"gc_status","","",71,null],[12,"last_stress_pages","","",71,null],[12,"stacks_prepared","","",71,null],[12,"emergency_collection","","",71,null],[12,"user_triggered_collection","","",71,null],[12,"allocation_success","","",71,null],[12,"max_collection_attempts","","",71,null],[12,"cur_collection_attempts","","",71,null],[12,"control_collector_context","","",71,null],[12,"stats","","",71,null],[12,"vm_map","","",71,null],[12,"options","","",71,null],[12,"heap","","",71,null],[12,"inside_sanity","","",71,null],[12,"scanned_stacks","","",71,null],[12,"mutator_iterator_lock","","",71,null],[12,"allocation_bytes","","",71,null],[12,"analysis_manager","","",71,null],[12,"code_space","","",71,null],[12,"ro_space","","",71,null],[12,"vm_space","","",71,null],[5,"create_vm_space","","",null,[[["vec",3],["sidemetadataspec",3],["mmapper",6],["heapmeta",3],["vmmap",6],["planconstraints",3]],[["vmbinding",8],["immortalspace",3]]]],[11,"new","","",71,[[["sidemetadataspec",3],["arc",3],["heapmeta",3],["unsafeoptionswrapper",3],["vec",3],["mmapper",6],["planconstraints",3],["vmmap",6]],["baseplan",3]]],[11,"gc_init","","",71,[[["vmmap",6],["arc",3]]]],[11,"get_pages_used","","",71,[[]]],[11,"trace_object","","",71,[[["objectreference",3]],["objectreference",3]]],[11,"prepare","","",71,[[["vmworkerthread",3]]]],[11,"release","","",71,[[["vmworkerthread",3]]]],[11,"set_collection_kind","","",71,[[]]],[11,"set_gc_status","","",71,[[["gcstatus",4]]]],[11,"stacks_prepared","","",71,[[]]],[11,"gc_in_progress","","",71,[[]]],[11,"gc_in_progress_proper","","",71,[[]]],[11,"increase_allocation_bytes_by","","",71,[[]]],[3,"CommonPlan","","CommonPlan is for representing state and features used by <em>…",null,null],[12,"immortal","","",72,null],[12,"los","","",72,null],[12,"base","","",72,null],[11,"new","","",72,[[["sidemetadataspec",3],["arc",3],["heapmeta",3],["unsafeoptionswrapper",3],["vec",3],["mmapper",6],["planconstraints",3],["vmmap",6]],["commonplan",3]]],[11,"gc_init","","",72,[[["vmmap",6],["arc",3]]]],[11,"get_pages_used","","",72,[[]]],[11,"trace_object","","",72,[[["objectreference",3]],["objectreference",3]]],[11,"prepare","","",72,[[["vmworkerthread",3]]]],[11,"release","","",72,[[["vmworkerthread",3]]]],[11,"schedule_common","","",72,[[["mmtkscheduler",6],["planconstraints",3]]]],[11,"stacks_prepared","","",72,[[]]],[11,"get_immortal","","",72,[[],["immortalspace",3]]],[11,"get_los","","",72,[[],["largeobjectspace",3]]],[4,"AllocationSemantics","","Allocation semantics that MMTk provides. Each allocation …",null,null],[13,"Default","","",73,null],[13,"Immortal","","",73,null],[13,"Los","","",73,null],[13,"Code","","",73,null],[13,"ReadOnly","","",73,null],[0,"mutator_context","mmtk::plan","Mutator context for each application thread.",null,null],[3,"MutatorConfig","mmtk::plan::mutator_context","",null,null],[12,"allocator_mapping","","Mapping between allocation semantics and allocator …",74,null],[12,"space_mapping","","Mapping between allocator selector and spaces. Each pair …",74,null],[12,"prepare_func","","Plan-specific code for mutator prepare. The …",74,null],[12,"release_func","","Plan-specific code for mutator release. The …",74,null],[3,"Mutator","","A mutator is a per-thread data structure that manages …",null,null],[12,"allocators","","",75,null],[12,"barrier","","",75,null],[12,"mutator_tls","","The mutator thread that is bound with this Mutator struct.",75,null],[12,"plan","","",75,null],[12,"config","","",75,null],[8,"MutatorContext","","Each GC plan should provide their implementation of a …",null,null],[10,"prepare","","",76,[[["vmworkerthread",3]]]],[10,"release","","",76,[[["vmworkerthread",3]]]],[10,"alloc","","",76,[[["allocationtype",4]],["address",3]]],[10,"post_alloc","","",76,[[["objectreference",3],["allocationtype",4]]]],[11,"flush_remembered_sets","","",76,[[]]],[11,"flush","","",76,[[]]],[10,"get_tls","","",76,[[],["vmmutatorthread",3]]],[10,"barrier","","",76,[[],["barrier",8]]],[11,"record_modified_node","","",76,[[["objectreference",3]]]],[0,"plan_constraints","mmtk::plan","Plan-specific constraints.",null,null],[3,"PlanConstraints","mmtk::plan::plan_constraints","This struct defines plan-specific constraints. Most of …",null,null],[12,"moves_objects","","",77,null],[12,"gc_header_bits","","",77,null],[12,"gc_header_words","","",77,null],[12,"num_specialized_scans","","",77,null],[12,"max_non_los_copy_bytes","","",77,null],[12,"needs_log_bit_in_header","","",77,null],[12,"needs_log_bit_in_header_num","","",77,null],[12,"barrier","","",77,null],[12,"needs_linear_scan","","",77,null],[12,"needs_concurrent_workers","","",77,null],[12,"generate_gc_trace","","",77,null],[12,"needs_forward_after_liveness","","",77,null],[11,"default","","",77,[[]]],[0,"tracelocal","mmtk::plan","Unsynchronized thread-local trace mechanism (superseded …",null,null],[8,"TraceLocal","mmtk::plan::tracelocal","This trait and its global counterpart implement the core …",null,null],[10,"process_roots","","",78,[[]]],[10,"process_root_edge","","",78,[[["address",3]]]],[10,"trace_object","","",78,[[["objectreference",3]],["objectreference",3]]],[10,"complete_trace","","",78,[[]]],[10,"release","","",78,[[]]],[10,"process_interior_edge","","",78,[[["objectreference",3],["address",3]]]],[11,"overwrite_reference_during_trace","","",78,[[]]],[10,"report_delayed_root_edge","","",78,[[["address",3]]]],[10,"will_not_move_in_current_collection","","",78,[[["objectreference",3]]]],[11,"get_forwarded_reference","","",78,[[["objectreference",3]],["objectreference",3]]],[11,"get_forwarded_referent","","",78,[[["objectreference",3]],["objectreference",3]]],[11,"retain_referent","","",78,[[["objectreference",3]],["objectreference",3]]],[0,"transitive_closure","mmtk::plan","The fundamental mechanism for performing a transitive …",null,null],[8,"TransitiveClosure","mmtk::plan::transitive_closure","This trait is the fundamental mechanism for performing a …",null,null],[10,"process_edge","","",79,[[["address",3]]]],[10,"process_node","","",79,[[["objectreference",3]]]],[0,"gencopy","mmtk::plan","Plan: generational copying",null,null],[3,"GenCopy","mmtk::plan::gencopy","",null,null],[12,"nursery","","",80,null],[12,"hi","","",80,null],[12,"copyspace0","","",80,null],[12,"copyspace1","","",80,null],[12,"common","","",80,null],[17,"ACTIVE_BARRIER","","Barrier overhead measurement:Set <code>FULL_NURSERY_GC</code> to <code>true</code>.…",null,null],[17,"FULL_NURSERY_GC","","Full heap collection as nursery GC.",null,null],[17,"NO_SLOW","","Force object barrier never enters the slow-path. If …",null,null],[17,"GENCOPY_CONSTRAINTS","","",null,null],[0,"marksweep","mmtk::plan","",null,null],[0,"mutator","mmtk::plan::marksweep","",null,null],[5,"ms_mutator_prepare","mmtk::plan::marksweep::mutator","",null,[[["vmworkerthread",3],["mutator",3]]]],[5,"ms_mutator_release","","",null,[[["vmworkerthread",3],["mutator",3]]]],[3,"ALLOCATOR_MAPPING","","",null,null],[5,"create_ms_mutator","","",null,[[["vmmutatorthread",3],["plan",8]],[["mutator",3],["vmbinding",8]]]],[3,"MarkSweep","mmtk::plan::marksweep","",null,null],[17,"MS_CONSTRAINTS","","",null,null],[0,"nogc","mmtk::plan","Plan: nogc (allocation-only)",null,null],[3,"NoGC","mmtk::plan::nogc","",null,null],[12,"base","","",81,null],[12,"nogc_space","","",81,null],[17,"NOGC_CONSTRAINTS","","",null,null],[0,"semispace","mmtk::plan","Plan: semispace",null,null],[3,"SemiSpace","mmtk::plan::semispace","",null,null],[12,"hi","","",82,null],[12,"copyspace0","","",82,null],[12,"copyspace1","","",82,null],[12,"common","","",82,null],[17,"SS_CONSTRAINTS","","",null,null],[0,"policy","mmtk","Memory policies that can be used for spaces.",null,null],[0,"space","mmtk::policy","This class defines and manages spaces.  Each policy is an …",null,null],[8,"SFT","mmtk::policy::space","Space Function Table (SFT).",null,null],[10,"name","","",83,[[]]],[10,"is_live","","",83,[[["objectreference",3]]]],[10,"is_movable","","",83,[[]]],[10,"is_sane","","",83,[[]]],[10,"initialize_header","","",83,[[["objectreference",3]]]],[3,"SFTMap","","",null,null],[11,"new","","",84,[[]]],[11,"get","","",84,[[["address",3]],["sft",8]]],[11,"update","","Update SFT map for the given address range. It should be …",84,[[["sft",8],["address",3]]]],[11,"clear","","",84,[[]]],[11,"is_in_space","","",84,[[["objectreference",3]]]],[8,"Space","","",null,null],[10,"as_space","","",85,[[],["space",8]]],[10,"as_sft","","",85,[[],["sft",8]]],[10,"get_page_resource","","",85,[[],["pageresource",8]]],[10,"init","","",85,[[["vmmap",6]]]],[11,"acquire","","",85,[[["vmthread",3]],["address",3]]],[11,"address_in_space","","",85,[[["address",3]]]],[11,"in_space","","",85,[[["objectreference",3]]]],[11,"grow_space","","This is called after we get result from page resources.  …",85,[[["address",3]]]],[11,"ensure_mapped","","Ensure this space is marked as mapped -- used when the …",85,[[]]],[11,"reserved_pages","","",85,[[]]],[11,"get_name","","",85,[[]]],[10,"common","","",85,[[],["commonspace",3]]],[10,"release_multiple_pages","","",85,[[["address",3]]]],[11,"print_vm_map","","",85,[[]]],[11,"local_side_metadata_specs","","",85,[[]]],[11,"is","","Returns true if the trait object wraps an object of type …",85,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the …",85,[[["box",3]],[["result",4],["box",3],["box",3]]]],[11,"downcast_rc","","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …",85,[[["rc",3]],[["result",4],["rc",3],["rc",3]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object …",85,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the …",85,[[],["option",4]]],[3,"CommonSpace","","",null,null],[12,"name","","",86,null],[12,"descriptor","","",86,null],[12,"vmrequest","","",86,null],[12,"contiguous","","",86,null],[12,"zeroed","","",86,null],[12,"start","","",86,null],[12,"extent","","",86,null],[12,"head_discontiguous_region","","",86,null],[12,"vm_map","","",86,null],[12,"mmapper","","",86,null],[12,"metadata","","",86,null],[3,"SpaceOptions","","",null,null],[12,"name","","",87,null],[12,"movable","","",87,null],[12,"immortal","","",87,null],[12,"zeroed","","",87,null],[12,"vmrequest","","",87,null],[12,"side_metadata_specs","","",87,null],[11,"new","","",86,[[["mmapper",6],["heapmeta",3],["vmmap",6],["spaceoptions",3]]]],[11,"init","","",86,[[["space",8]]]],[11,"vm_map","","",86,[[],["vmmap",6]]],[5,"required_chunks","","",null,[[]]],[0,"copyspace","mmtk::policy","",null,null],[3,"CopySpace","mmtk::policy::copyspace","",null,null],[11,"new","","",88,[[["vec",3],["sidemetadataspec",3],["vmrequest",4],["mmapper",6],["heapmeta",3],["vmmap",6]]]],[11,"prepare","","",88,[[]]],[11,"release","","",88,[[]]],[11,"trace_object","","",88,[[["objectreference",3],["allocationsemantics",4]],["objectreference",3]]],[11,"protect","","",88,[[]]],[11,"unprotect","","",88,[[]]],[0,"immortalspace","mmtk::policy","",null,null],[3,"ImmortalSpace","mmtk::policy::immortalspace","",null,null],[11,"new","","",89,[[["vec",3],["sidemetadataspec",3],["vmrequest",4],["mmapper",6],["heapmeta",3],["vmmap",6],["planconstraints",3]]]],[11,"prepare","","",89,[[]]],[11,"release","","",89,[[]]],[11,"trace_object","","",89,[[["objectreference",3]],["objectreference",3]]],[0,"largeobjectspace","mmtk::policy","",null,null],[3,"LargeObjectSpace","mmtk::policy::largeobjectspace","",null,null],[11,"new","","",90,[[["vec",3],["sidemetadataspec",3],["vmrequest",4],["mmapper",6],["heapmeta",3],["vmmap",6],["planconstraints",3]]]],[11,"prepare","","",90,[[]]],[11,"release","","",90,[[]]],[11,"trace_object","","",90,[[["objectreference",3]],["objectreference",3]]],[11,"allocate_pages","","",90,[[["vmthread",3]],["address",3]]],[0,"lockfreeimmortalspace","mmtk::policy","",null,null],[3,"LockFreeImmortalSpace","mmtk::policy::lockfreeimmortalspace","",null,null],[11,"new","","",91,[[["vec",3],["sidemetadataspec",3]]]],[0,"mallocspace","mmtk::policy","",null,null],[0,"metadata","mmtk::policy::mallocspace","",null,null],[3,"ACTIVE_CHUNKS","mmtk::policy::mallocspace::metadata","",null,null],[3,"ALLOC_MAP","","",null,null],[3,"MARK_MAP","","",null,null],[5,"is_meta_space_mapped","","",null,[[["address",3]]]],[5,"map_meta_space_for_chunk","","",null,[[["sidemetadata",3],["address",3]]]],[5,"is_alloced_by_malloc","","",null,[[["objectreference",3]]]],[5,"is_alloced","","",null,[[["objectreference",3]]]],[5,"is_alloced_object","","",null,[[["address",3]]]],[5,"is_marked","","",null,[[["objectreference",3]]]],[5,"set_alloc_bit","","",null,[[["objectreference",3]]]],[5,"set_mark_bit","","",null,[[["objectreference",3]]]],[5,"unset_alloc_bit","","",null,[[["objectreference",3]]]],[5,"unset_mark_bit","","",null,[[["objectreference",3]]]],[3,"MallocSpace","mmtk::policy::mallocspace","",null,null],[17,"NUMBER_OF_POLICIES_REQUIRING_SIDE_METADATA","mmtk::policy","",null,null],[0,"scheduler","mmtk","A general scheduler implementation. MMTk uses it to …",null,null],[0,"stat","mmtk::scheduler","",null,null],[3,"SchedulerStat","mmtk::scheduler::stat","",null,null],[11,"harness_stat","","",92,[[],[["hashmap",3],["string",3]]]],[11,"merge","","",92,[[["workerlocalstat",3]]]],[3,"WorkStat","","",null,null],[11,"end_of_work","","",93,[[["workerlocalstat",3]]]],[3,"WorkerLocalStat","","",null,null],[11,"is_enabled","","",94,[[]]],[11,"enable","","",94,[[]]],[11,"measure_work","","",94,[[["typeid",3]],["workstat",3]]],[0,"gc_work","mmtk::scheduler","",null,null],[3,"ScheduleCollection","mmtk::scheduler::gc_work","",null,null],[3,"Prepare","","The global GC Preparation Work This work packet invokes …",null,null],[12,"plan","","",95,null],[11,"new","","",95,[[]]],[3,"PrepareMutator","","The mutator GC Preparation Work",null,null],[12,"mutator","","",96,null],[11,"new","","",96,[[["mutator",3]]]],[3,"PrepareCollector","","The collector GC Preparation Work",null,null],[11,"new","","",97,[[]]],[3,"Release","","The global GC release Work This work packet invokes …",null,null],[12,"plan","","",98,null],[11,"new","","",98,[[]]],[3,"ReleaseMutator","","The mutator release Work",null,null],[12,"mutator","","",99,null],[11,"new","","",99,[[["mutator",3]]]],[3,"ReleaseCollector","","The collector release Work",null,null],[11,"new","","",100,[[]]],[3,"StopMutators","","Stop all mutators",null,null],[11,"new","","",101,[[]]],[3,"EndOfGC","","",null,null],[3,"ScanStackRoots","","",null,null],[11,"new","","",102,[[]]],[3,"ScanStackRoot","","",null,null],[12,"0","","",103,null],[3,"ScanVMSpecificRoots","","",null,null],[11,"new","","",104,[[]]],[3,"ProcessEdgesBase","","",null,null],[12,"edges","","",105,null],[12,"nodes","","",105,null],[11,"new","","",105,[[["vec",3],["address",3],["mmtk",3]]]],[11,"set_worker","","",105,[[["gcworker",6]]]],[11,"worker","","",105,[[],["gcworker",6]]],[11,"mmtk","","",105,[[],["mmtk",3]]],[11,"plan","","",105,[[],["plan",8]]],[8,"ProcessEdgesWork","","Scan & update a list of object slots",null,null],[16,"VM","","",106,null],[18,"CAPACITY","","",106,null],[18,"OVERWRITE_REFERENCE","","",106,null],[18,"SCAN_OBJECTS_IMMEDIATELY","","",106,null],[10,"new","","",106,[[["vec",3],["address",3],["mmtk",3]]]],[10,"trace_object","","",106,[[["objectreference",3]],["objectreference",3]]],[11,"process_node","","",106,[[["objectreference",3]]]],[11,"flush","","",106,[[]]],[11,"process_edge","","",106,[[["address",3]]]],[11,"process_edges","","",106,[[]]],[3,"ScanObjects","","Scan & update a list of object slots",null,null],[11,"new","","",107,[[["vec",3],["objectreference",3]]]],[3,"ProcessModBuf","","",null,null],[11,"new","","",108,[[["vec",3],["objectreference",3],["sidemetadataspec",3]]]],[8,"Context","mmtk::scheduler","The global context for the whole scheduling system. This …",null,null],[11,"spawn_worker","","",109,[[["worker",3],["vmthread",3]]]],[8,"WorkerLocal","","Thread-local data for each worker thread.",null,null],[11,"init","","",110,[[["vmworkerthread",3]]]],[6,"GCWorkerLocalPtr","","",null,null],[25,"GCWorkerLocal","","",null,null],[4,"CoordinatorMessage","","",null,null],[13,"Work","","",111,null],[13,"AllWorkerParked","","",111,null],[13,"BucketDrained","","",111,null],[3,"Scheduler","","",null,null],[12,"work_buckets","","",112,null],[12,"coordinator_work","","Work for the coordinator thread",112,null],[12,"worker_monitor","","Condition Variable for worker synchronization",112,null],[6,"MMTkScheduler","","",null,null],[8,"Work","","",null,null],[10,"do_work","","",113,[[["worker",3]]]],[11,"do_work_with_stat","","",113,[[["worker",3]]]],[8,"CoordinatorWork","","A special kind of work that will execute on the …",null,null],[8,"GCWork","","",null,null],[10,"do_work","","",114,[[["gcworker",6],["mmtk",3]]]],[4,"WorkBucketStage","","",null,null],[13,"Unconstrained","","",115,null],[13,"Prepare","","",115,null],[13,"Closure","","",115,null],[13,"RefClosure","","",115,null],[13,"RefForwarding","","",115,null],[13,"Release","","",115,null],[13,"Final","","",115,null],[3,"WorkerLocalPtr","","This struct will be accessed during trace_object(), which …",null,null],[3,"Worker","","",null,null],[12,"tls","","",116,null],[12,"ordinal","","",116,null],[12,"parked","","",116,null],[12,"local_work_bucket","","",116,null],[12,"sender","","",116,null],[12,"stat","","",116,null],[6,"GCWorker","","",null,null],[3,"WorkerGroup","","",null,null],[12,"workers","","",117,null],[0,"vm","mmtk","MMTk-to-VM interface: the VMBinding trait.",null,null],[8,"ActivePlan","mmtk::vm","VM-specific methods for the current plan.",null,null],[10,"global","","Return a reference to the current plan.",118,[[],["plan",8]]],[10,"is_mutator","","Return whether there is a mutator created and associated …",118,[[["vmthread",3]]]],[10,"mutator","","Return a <code>Mutator</code> reference for the thread.",118,[[["vmmutatorthread",3]],["mutator",3]]],[10,"reset_mutator_iterator","","Reset the mutator iterator so that <code>get_next_mutator()</code> …",118,[[]]],[10,"get_next_mutator","","Return the next mutator if there is any. This method …",118,[[],[["option",4],["mutator",3]]]],[11,"mutators","","A utility method to provide a thread-safe mutator …",118,[[],["synchronizedmutatoriterator",3]]],[10,"number_of_mutators","","Return the total count of mutators.",118,[[]]],[8,"Collection","","VM-specific methods for garbage collection.",null,null],[10,"stop_all_mutators","","Stop all the mutator threads. MMTk calls this method when …",119,[[["vmworkerthread",3]]]],[10,"resume_mutators","","Resume all the mutator threads, the opposite of the …",119,[[["vmworkerthread",3]]]],[10,"block_for_gc","","Block the current thread for GC. This is called when an …",119,[[["vmmutatorthread",3]]]],[10,"spawn_worker_thread","","Ask the VM to spawn a GC thread for MMTk. A GC thread may …",119,[[["gcworker",6],["option",4],["vmthread",3]]]],[10,"prepare_mutator","","Allow VM-specific behaviors for a mutator after all the …",119,[[["vmmutatorthread",3],["vmworkerthread",3]]]],[11,"out_of_memory","","Inform the VM for an out-of-memory error. The VM can …",119,[[["vmthread",3]]]],[11,"schedule_finalization","","Inform the VM to schedule finalization threads.",119,[[["vmworkerthread",3]]]],[8,"ObjectModel","","VM-specific methods for object model.",null,null],[18,"GC_BYTE_OFFSET","","The offset of the GC byte from the object reference, in …",120,null],[10,"copy","","Copy an object and return the address of the new object. …",120,[[["objectreference",3],["allocationsemantics",4]],["objectreference",3]]],[10,"copy_to","","Copy an object. This is required for delayed-copy …",120,[[["objectreference",3],["address",3]],["address",3]]],[10,"get_reference_when_copied_to","","Return the reference that an object will be referred to …",120,[[["objectreference",3],["address",3]],["objectreference",3]]],[10,"get_current_size","","Return the size used by an object.",120,[[["objectreference",3]]]],[10,"get_type_descriptor","","Get the type descriptor for an object.",120,[[["objectreference",3]]]],[10,"object_start_ref","","Return the lowest address of the storage associated with …",120,[[["objectreference",3]],["address",3]]],[10,"ref_to_address","","Return an address guaranteed to be inside the storage …",120,[[["objectreference",3]],["address",3]]],[10,"dump_object","","Dump debugging information for an object.",120,[[["objectreference",3]]]],[8,"ReferenceGlue","","VM-specific methods for reference processing.",null,null],[11,"clear_referent","","Weak and soft references always clear the referent before …",121,[[["objectreference",3]]]],[10,"get_referent","","Get the referent from a reference.",121,[[["objectreference",3]],["objectreference",3]]],[10,"set_referent","","Set the referent in a reference.",121,[[["objectreference",3]]]],[10,"process_reference","","Process a reference with the current semantics and return …",121,[[["objectreference",3],["vmworkerthread",3]],["objectreference",3]]],[8,"Scanning","","VM-specific methods for scanning roots/objects.",null,null],[18,"SCAN_MUTATORS_IN_SAFEPOINT","","Scan stack roots after all mutators are paused.",122,null],[18,"SINGLE_THREAD_MUTATOR_SCANNING","","Scan all the mutators within a single work packet.",122,null],[10,"scan_object","","Delegated scanning of a object, processing each pointer …",122,[[["objectreference",3],["vmworkerthread",3]]]],[10,"notify_initial_thread_scan_complete","","MMTk calls this method at the first time during a …",122,[[["vmworkerthread",3]]]],[10,"scan_objects","","Bulk scanning of objects, processing each pointer field …",122,[[["gcworker",6]]]],[10,"scan_thread_roots","","Scan all the mutators for roots.",122,[[]]],[10,"scan_thread_root","","Scan one mutator for roots.",122,[[["vmworkerthread",3],["mutator",3]]]],[10,"scan_vm_specific_roots","","Scan VM-specific roots. The creation of all root scan …",122,[[]]],[10,"supports_return_barrier","","Return whether the VM supports return barriers. This is …",122,[[]]],[8,"VMBinding","","The <code>VMBinding</code> trait associates with each trait, and …",null,null],[16,"VMObjectModel","","",123,null],[16,"VMScanning","","",123,null],[16,"VMCollection","","",123,null],[16,"VMActivePlan","","",123,null],[16,"VMReferenceGlue","","",123,null],[18,"ALIGNMENT_VALUE","","A value to fill in alignment gaps. This value can be used …",123,null],[18,"LOG_MIN_ALIGNMENT","","Allowed minimal alignment.",123,null],[18,"MIN_ALIGNMENT","","Allowed minimal alignment in bytes.",123,null],[18,"MAX_ALIGNMENT_SHIFT","","Allowed maximum alignment as shift by min alignment.    ",123,null],[18,"MAX_ALIGNMENT","","Allowed maximum alignment in bytes.",123,null],[18,"ALLOC_END_ALIGNMENT","","This value is used to assert if the cursor is reasonable …",123,null],[0,"memory_manager","mmtk","VM-to-MMTk interface: safe Rust APIs.",null,null],[5,"start_control_collector","mmtk::memory_manager","Run the main loop for the GC controller thread. This …",null,[[["vmworkerthread",3],["mmtk",3]]]],[5,"gc_init","","Initialize an MMTk instance. A VM should call this method …",null,[[["mmtk",3]]]],[5,"bind_mutator","","Request MMTk to create a mutator for the given thread. …",null,[[["vmmutatorthread",3],["mmtk",3]],[["mutator",3],["box",3]]]],[5,"destroy_mutator","","Reclaim a mutator that is no longer needed.",null,[[["mutator",3],["box",3]]]],[5,"flush_mutator","","Flush the mutator\'s local states.",null,[[["mutator",3]]]],[5,"alloc","","Allocate memory for an object. For performance reasons, a …",null,[[["allocationsemantics",4],["mutator",3]],["address",3]]],[5,"post_alloc","","Perform post-allocation actions, usually initializing …",null,[[["objectreference",3],["allocationsemantics",4],["mutator",3]]]],[5,"get_allocator_mapping","","Return an AllocatorSelector for the given allocation …",null,[[["mmtk",3],["allocationsemantics",4]],["allocatorselector",4]]],[5,"start_worker","","Run the main loop of a GC worker. This method does not …",null,[[["vmworkerthread",3],["gcworker",6],["mmtk",3]]]],[5,"enable_collection","","Allow MMTk to trigger garbage collection. A VM should …",null,[[["vmthread",3],["mmtk",3]]]],[5,"process","","Process MMTk run-time options.",null,[[["mmtk",3]]]],[5,"used_bytes","","Return used memory in bytes.",null,[[["mmtk",3]]]],[5,"free_bytes","","Return free memory in bytes.",null,[[["mmtk",3]]]],[5,"starting_heap_address","","Return the starting address of the heap. <em>Note that …",null,[[],["address",3]]],[5,"last_heap_address","","Return the ending address of the heap. <em>Note that …",null,[[],["address",3]]],[5,"total_bytes","","Return the total memory in bytes.",null,[[["mmtk",3]]]],[5,"handle_user_collection_request","","Trigger a garbage collection as requested by the user.",null,[[["vmmutatorthread",3],["mmtk",3]]]],[5,"is_live_object","","Is the object alive?",null,[[["objectreference",3]]]],[5,"is_mapped_object","","Is the object in the mapped memory? The runtime can use …",null,[[["objectreference",3]]]],[5,"is_mapped_address","","Is the address in the mapped memory? The runtime can use …",null,[[["address",3]]]],[5,"modify_check","","Check that if a garbage collection is in progress and if …",null,[[["objectreference",3],["mmtk",3]]]],[5,"add_weak_candidate","","Add a reference to the list of weak references.",null,[[["objectreference",3],["mmtk",3]]]],[5,"add_soft_candidate","","Add a reference to the list of soft references.",null,[[["objectreference",3],["mmtk",3]]]],[5,"add_phantom_candidate","","Add a reference to the list of phantom references.",null,[[["objectreference",3],["mmtk",3]]]],[5,"harness_begin","","Generic hook to allow benchmarks to be harnessed. We do a …",null,[[["vmmutatorthread",3],["mmtk",3]]]],[5,"harness_end","","Generic hook to allow benchmarks to be harnessed. We stop …",null,[[["mmtk",3]]]],[5,"add_finalizer","","Register a finalizable object. MMTk will retain the …",null,[[["objectreference",3],["mmtk",3]]]],[5,"get_finalized_object","","Get an object that is ready for finalization. After each …",null,[[["mmtk",3]],[["option",4],["objectreference",3]]]],[3,"MMTK","mmtk","An MMTk instance. MMTk allows mutiple instances to run …",null,null],[12,"plan","","",124,null],[12,"vm_map","","",124,null],[12,"mmapper","","",124,null],[12,"sftmap","","",124,null],[12,"reference_processors","","",124,null],[12,"finalizable_processor","","",124,null],[12,"options","","",124,null],[12,"scheduler","","",124,null],[12,"sanity_checker","","",124,null],[11,"from","mmtk::util::address","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"into_any","","",0,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",0,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",0,[[],["any",8]]],[11,"as_any_mut","","",0,[[],["any",8]]],[11,"into_any_arc","","",0,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"into_any","","",1,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",1,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",1,[[],["any",8]]],[11,"as_any_mut","","",1,[[],["any",8]]],[11,"into_any_arc","","",1,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::allocators","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"into_any","","",3,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",3,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",3,[[],["any",8]]],[11,"as_any_mut","","",3,[[],["any",8]]],[11,"into_any_arc","","",3,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"into_any","","",4,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",4,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",4,[[],["any",8]]],[11,"as_any_mut","","",4,[[],["any",8]]],[11,"into_any_arc","","",4,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"into_any","","",8,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",8,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",8,[[],["any",8]]],[11,"as_any_mut","","",8,[[],["any",8]]],[11,"into_any_arc","","",8,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::dump_linear_scan","",125,[[]]],[11,"into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"into_any","","",125,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",125,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",125,[[],["any",8]]],[11,"as_any_mut","","",125,[[],["any",8]]],[11,"into_any_arc","","",125,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::large_object_allocator","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"into_any","","",5,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",5,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",5,[[],["any",8]]],[11,"as_any_mut","","",5,[[],["any",8]]],[11,"into_any_arc","","",5,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::alloc::malloc_allocator","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"into_any","","",7,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",7,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",7,[[],["any",8]]],[11,"as_any_mut","","",7,[[],["any",8]]],[11,"into_any_arc","","",7,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::analysis::gc_count","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"into_any","","",9,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",9,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",9,[[],["any",8]]],[11,"as_any_mut","","",9,[[],["any",8]]],[11,"into_any_arc","","",9,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::analysis::obj_num","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"into_any","","",10,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",10,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",10,[[],["any",8]]],[11,"as_any_mut","","",10,[[],["any",8]]],[11,"into_any_arc","","",10,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::analysis::obj_size","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"into_any","","",11,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",11,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",11,[[],["any",8]]],[11,"as_any_mut","","",11,[[],["any",8]]],[11,"into_any_arc","","",11,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::analysis","",126,[[]]],[11,"into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"into_any","","",126,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",126,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",126,[[],["any",8]]],[11,"as_any_mut","","",126,[[],["any",8]]],[11,"into_any_arc","","",126,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"into_any","","",13,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",13,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",13,[[],["any",8]]],[11,"as_any_mut","","",13,[[],["any",8]]],[11,"into_any_arc","","",13,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::finalizable_processor","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"into_any","","",14,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",14,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",14,[[],["any",8]]],[11,"as_any_mut","","",14,[[],["any",8]]],[11,"into_any_arc","","",14,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"into_any","","",15,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",15,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",15,[[],["any",8]]],[11,"as_any_mut","","",15,[[],["any",8]]],[11,"into_any_arc","","",15,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"into_any","","",16,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",16,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",16,[[],["any",8]]],[11,"as_any_mut","","",16,[[],["any",8]]],[11,"into_any_arc","","",16,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::header_byte","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"into_any","","",18,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",18,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",18,[[],["any",8]]],[11,"as_any_mut","","",18,[[],["any",8]]],[11,"into_any_arc","","",18,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap","",127,[[]]],[11,"into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"into_any","","",127,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",127,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",127,[[],["any",8]]],[11,"as_any_mut","","",127,[[],["any",8]]],[11,"into_any_arc","","",127,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::layout","",128,[[]]],[11,"into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"into_any","","",128,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",128,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",128,[[],["any",8]]],[11,"as_any_mut","","",128,[[],["any",8]]],[11,"into_any_arc","","",128,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::layout::map64","",129,[[]]],[11,"into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"into_any","","",129,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",129,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",129,[[],["any",8]]],[11,"as_any_mut","","",129,[[],["any",8]]],[11,"into_any_arc","","",129,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::freelistpageresource","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"into_any","","",21,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",21,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",21,[[],["any",8]]],[11,"as_any_mut","","",21,[[],["any",8]]],[11,"into_any_arc","","",21,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"into_any","","",22,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",22,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",22,[[],["any",8]]],[11,"as_any_mut","","",22,[[],["any",8]]],[11,"into_any_arc","","",22,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"into_any","","",30,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",30,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",30,[[],["any",8]]],[11,"as_any_mut","","",30,[[],["any",8]]],[11,"into_any_arc","","",30,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::monotonepageresource","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"into_any","","",25,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",25,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",25,[[],["any",8]]],[11,"as_any_mut","","",25,[[],["any",8]]],[11,"into_any_arc","","",25,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"into_any","","",23,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",23,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",23,[[],["any",8]]],[11,"as_any_mut","","",23,[[],["any",8]]],[11,"into_any_arc","","",23,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::pageresource","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"into_any","","",27,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",27,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",27,[[],["any",8]]],[11,"as_any_mut","","",27,[[],["any",8]]],[11,"into_any_arc","","",27,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"into_any","","",130,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",130,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",130,[[],["any",8]]],[11,"as_any_mut","","",130,[[],["any",8]]],[11,"into_any_arc","","",130,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"into_any","","",28,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",28,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",28,[[],["any",8]]],[11,"as_any_mut","","",28,[[],["any",8]]],[11,"into_any_arc","","",28,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap::space_descriptor","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"into_any","","",29,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",29,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",29,[[],["any",8]]],[11,"as_any_mut","","",29,[[],["any",8]]],[11,"into_any_arc","","",29,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::heap","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"into_any","","",31,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",31,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",31,[[],["any",8]]],[11,"as_any_mut","","",31,[[],["any",8]]],[11,"into_any_arc","","",31,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::int_array_freelist","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"into_any","","",35,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",35,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",35,[[],["any",8]]],[11,"as_any_mut","","",35,[[],["any",8]]],[11,"into_any_arc","","",35,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::opaque_pointer","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"into_any","","",36,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",36,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",36,[[],["any",8]]],[11,"as_any_mut","","",36,[[],["any",8]]],[11,"into_any_arc","","",36,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"into_any","","",37,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",37,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",37,[[],["any",8]]],[11,"as_any_mut","","",37,[[],["any",8]]],[11,"into_any_arc","","",37,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"into_any","","",38,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",38,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",38,[[],["any",8]]],[11,"as_any_mut","","",38,[[],["any",8]]],[11,"into_any_arc","","",38,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"into_any","","",39,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",39,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",39,[[],["any",8]]],[11,"as_any_mut","","",39,[[],["any",8]]],[11,"into_any_arc","","",39,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::options","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"into_any","","",40,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",40,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",40,[[],["any",8]]],[11,"as_any_mut","","",40,[[],["any",8]]],[11,"into_any_arc","","",40,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"into_any","","",41,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",41,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",41,[[],["any",8]]],[11,"as_any_mut","","",41,[[],["any",8]]],[11,"into_any_arc","","",41,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"into_any","","",42,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",42,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",42,[[],["any",8]]],[11,"as_any_mut","","",42,[[],["any",8]]],[11,"into_any_arc","","",42,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"into_any","","",43,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",43,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",43,[[],["any",8]]],[11,"as_any_mut","","",43,[[],["any",8]]],[11,"into_any_arc","","",43,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::raw_memory_freelist","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"into_any","","",44,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",44,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",44,[[],["any",8]]],[11,"as_any_mut","","",44,[[],["any",8]]],[11,"into_any_arc","","",44,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::reference_processor","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"into_any","","",45,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",45,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",45,[[],["any",8]]],[11,"as_any_mut","","",45,[[],["any",8]]],[11,"into_any_arc","","",45,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"into_any","","",47,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",47,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",47,[[],["any",8]]],[11,"as_any_mut","","",47,[[],["any",8]]],[11,"into_any_arc","","",47,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"into_any","","",46,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",46,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",46,[[],["any",8]]],[11,"as_any_mut","","",46,[[],["any",8]]],[11,"into_any_arc","","",46,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::sanity::sanity_checker","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"into_any","","",48,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",48,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",48,[[],["any",8]]],[11,"as_any_mut","","",48,[[],["any",8]]],[11,"into_any_arc","","",48,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"into_any","","",49,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",49,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",49,[[],["any",8]]],[11,"as_any_mut","","",49,[[],["any",8]]],[11,"into_any_arc","","",49,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"into_any","","",50,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",50,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",50,[[],["any",8]]],[11,"as_any_mut","","",50,[[],["any",8]]],[11,"into_any_arc","","",50,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"into_any","","",51,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",51,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",51,[[],["any",8]]],[11,"as_any_mut","","",51,[[],["any",8]]],[11,"into_any_arc","","",51,[[["arc",3]],[["arc",3],["any",8]]]],[11,"process_edge","","",131,[[["address",3]]]],[11,"process_node","","",131,[[["objectreference",3]]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"into_any","","",131,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",131,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",131,[[],["any",8]]],[11,"as_any_mut","","",131,[[],["any",8]]],[11,"from","mmtk::util::side_metadata","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"into_any","","",52,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",52,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",52,[[],["any",8]]],[11,"as_any_mut","","",52,[[],["any",8]]],[11,"into_any_arc","","",52,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"into_any","","",53,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",53,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",53,[[],["any",8]]],[11,"as_any_mut","","",53,[[],["any",8]]],[11,"into_any_arc","","",53,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"into_any","","",54,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",54,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",54,[[],["any",8]]],[11,"as_any_mut","","",54,[[],["any",8]]],[11,"into_any_arc","","",54,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"into_any","","",132,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",132,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",132,[[],["any",8]]],[11,"as_any_mut","","",132,[[],["any",8]]],[11,"into_any_arc","","",132,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::statistics::counter","",55,[[]]],[11,"into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"into_any","","",55,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",55,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",55,[[],["any",8]]],[11,"as_any_mut","","",55,[[],["any",8]]],[11,"into_any_arc","","",55,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"into_any","","",56,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",56,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",56,[[],["any",8]]],[11,"as_any_mut","","",56,[[],["any",8]]],[11,"into_any_arc","","",56,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"into_any","","",133,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",133,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",133,[[],["any",8]]],[11,"as_any_mut","","",133,[[],["any",8]]],[11,"into_any_arc","","",133,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"into_any","","",134,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",134,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",134,[[],["any",8]]],[11,"as_any_mut","","",134,[[],["any",8]]],[11,"into_any_arc","","",134,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::statistics::stats","",59,[[]]],[11,"into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"into_any","","",59,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",59,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",59,[[],["any",8]]],[11,"as_any_mut","","",59,[[],["any",8]]],[11,"into_any_arc","","",59,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"into_any","","",60,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",60,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",60,[[],["any",8]]],[11,"as_any_mut","","",60,[[],["any",8]]],[11,"into_any_arc","","",60,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util","",135,[[]]],[11,"into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"into_any","","",135,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",135,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",135,[[],["any",8]]],[11,"as_any_mut","","",135,[[],["any",8]]],[11,"into_any_arc","","",135,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::util::treadmill","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"into_any","","",61,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",61,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",61,[[],["any",8]]],[11,"as_any_mut","","",61,[[],["any",8]]],[11,"into_any_arc","","",61,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk","",124,[[]]],[11,"into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"into_any","","",124,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",124,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",124,[[],["any",8]]],[11,"as_any_mut","","",124,[[],["any",8]]],[11,"from","mmtk::plan::barriers","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"into_any","","",62,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",62,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",62,[[],["any",8]]],[11,"as_any_mut","","",62,[[],["any",8]]],[11,"into_any_arc","","",62,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"into_any","","",63,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",63,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",63,[[],["any",8]]],[11,"as_any_mut","","",63,[[],["any",8]]],[11,"into_any_arc","","",63,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"into_any","","",136,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",136,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",136,[[],["any",8]]],[11,"as_any_mut","","",136,[[],["any",8]]],[11,"into_any_arc","","",136,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"into_any","","",65,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",65,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",65,[[],["any",8]]],[11,"as_any_mut","","",65,[[],["any",8]]],[11,"into_any_arc","","",65,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::controller_collector_context","",66,[[]]],[11,"into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"into_any","","",66,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",66,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",66,[[],["any",8]]],[11,"as_any_mut","","",66,[[],["any",8]]],[11,"into_any_arc","","",66,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::global","",68,[[]]],[11,"into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"into_any","","",68,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",68,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",68,[[],["any",8]]],[11,"as_any_mut","","",68,[[],["any",8]]],[11,"into_any_arc","","",68,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"into_any","","",70,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",70,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",70,[[],["any",8]]],[11,"as_any_mut","","",70,[[],["any",8]]],[11,"into_any_arc","","",70,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"into_any","","",71,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",71,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",71,[[],["any",8]]],[11,"as_any_mut","","",71,[[],["any",8]]],[11,"into_any_arc","","",71,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"into_any","","",72,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",72,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",72,[[],["any",8]]],[11,"as_any_mut","","",72,[[],["any",8]]],[11,"into_any_arc","","",72,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"into_any","","",73,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",73,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",73,[[],["any",8]]],[11,"as_any_mut","","",73,[[],["any",8]]],[11,"into_any_arc","","",73,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::mutator_context","",74,[[]]],[11,"into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"into_any","","",74,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",74,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",74,[[],["any",8]]],[11,"as_any_mut","","",74,[[],["any",8]]],[11,"into_any_arc","","",74,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"into_any","","",75,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",75,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",75,[[],["any",8]]],[11,"as_any_mut","","",75,[[],["any",8]]],[11,"into_any_arc","","",75,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::plan_constraints","",77,[[]]],[11,"into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"into_any","","",77,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",77,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",77,[[],["any",8]]],[11,"as_any_mut","","",77,[[],["any",8]]],[11,"into_any_arc","","",77,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::gencopy","",80,[[]]],[11,"into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"into_any","","",80,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",80,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",80,[[],["any",8]]],[11,"as_any_mut","","",80,[[],["any",8]]],[11,"into_any_arc","","",80,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::marksweep","",137,[[]]],[11,"into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"into_any","","",137,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",137,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",137,[[],["any",8]]],[11,"as_any_mut","","",137,[[],["any",8]]],[11,"into_any_arc","","",137,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::marksweep::mutator","",138,[[]]],[11,"into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"into_any","","",138,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",138,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",138,[[],["any",8]]],[11,"as_any_mut","","",138,[[],["any",8]]],[11,"into_any_arc","","",138,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::nogc","",81,[[]]],[11,"into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"into_any","","",81,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",81,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",81,[[],["any",8]]],[11,"as_any_mut","","",81,[[],["any",8]]],[11,"into_any_arc","","",81,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::plan::semispace","",82,[[]]],[11,"into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"into_any","","",82,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",82,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",82,[[],["any",8]]],[11,"as_any_mut","","",82,[[],["any",8]]],[11,"into_any_arc","","",82,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::space","",84,[[]]],[11,"into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"into_any","","",84,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",84,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",84,[[],["any",8]]],[11,"as_any_mut","","",84,[[],["any",8]]],[11,"into_any_arc","","",84,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"into_any","","",86,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",86,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",86,[[],["any",8]]],[11,"as_any_mut","","",86,[[],["any",8]]],[11,"into_any_arc","","",86,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"into_any","","",87,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",87,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",87,[[],["any",8]]],[11,"as_any_mut","","",87,[[],["any",8]]],[11,"into_any_arc","","",87,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::copyspace","",88,[[]]],[11,"into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"into_any","","",88,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",88,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",88,[[],["any",8]]],[11,"as_any_mut","","",88,[[],["any",8]]],[11,"into_any_arc","","",88,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::immortalspace","",89,[[]]],[11,"into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"into_any","","",89,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",89,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",89,[[],["any",8]]],[11,"as_any_mut","","",89,[[],["any",8]]],[11,"into_any_arc","","",89,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::largeobjectspace","",90,[[]]],[11,"into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"into_any","","",90,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",90,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",90,[[],["any",8]]],[11,"as_any_mut","","",90,[[],["any",8]]],[11,"into_any_arc","","",90,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::lockfreeimmortalspace","",91,[[]]],[11,"into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"into_any","","",91,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",91,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",91,[[],["any",8]]],[11,"as_any_mut","","",91,[[],["any",8]]],[11,"into_any_arc","","",91,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::mallocspace","",139,[[]]],[11,"into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"into_any","","",139,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",139,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",139,[[],["any",8]]],[11,"as_any_mut","","",139,[[],["any",8]]],[11,"into_any_arc","","",139,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::policy::mallocspace::metadata","",140,[[]]],[11,"into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"into_any","","",140,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",140,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",140,[[],["any",8]]],[11,"as_any_mut","","",140,[[],["any",8]]],[11,"into_any_arc","","",140,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"into_any","","",141,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",141,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",141,[[],["any",8]]],[11,"as_any_mut","","",141,[[],["any",8]]],[11,"into_any_arc","","",141,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"into_any","","",142,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",142,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",142,[[],["any",8]]],[11,"as_any_mut","","",142,[[],["any",8]]],[11,"into_any_arc","","",142,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler","",111,[[]]],[11,"into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"into_any","","",111,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",111,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",111,[[],["any",8]]],[11,"as_any_mut","","",111,[[],["any",8]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"into_any","","",112,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",112,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",112,[[],["any",8]]],[11,"as_any_mut","","",112,[[],["any",8]]],[11,"into_any_arc","","",112,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler::stat","",92,[[]]],[11,"into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"into_any","","",92,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",92,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",92,[[],["any",8]]],[11,"as_any_mut","","",92,[[],["any",8]]],[11,"into_any_arc","","",92,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"into_any","","",93,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",93,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",93,[[],["any",8]]],[11,"as_any_mut","","",93,[[],["any",8]]],[11,"into_any_arc","","",93,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"into_any","","",94,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",94,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",94,[[],["any",8]]],[11,"as_any_mut","","",94,[[],["any",8]]],[11,"into_any_arc","","",94,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"into_any","","",115,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",115,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",115,[[],["any",8]]],[11,"as_any_mut","","",115,[[],["any",8]]],[11,"into_any_arc","","",115,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"into_any","","",143,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",143,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",143,[[],["any",8]]],[11,"as_any_mut","","",143,[[],["any",8]]],[11,"into_any_arc","","",143,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"into_any","","",116,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",116,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",116,[[],["any",8]]],[11,"as_any_mut","","",116,[[],["any",8]]],[11,"into_any_arc","","",116,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"into_any","","",117,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",117,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",117,[[],["any",8]]],[11,"as_any_mut","","",117,[[],["any",8]]],[11,"into_any_arc","","",117,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","mmtk::scheduler::gc_work","",144,[[]]],[11,"into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"into_any","","",144,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",144,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",144,[[],["any",8]]],[11,"as_any_mut","","",144,[[],["any",8]]],[11,"into_any_arc","","",144,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"into_any","","",95,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",95,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",95,[[],["any",8]]],[11,"as_any_mut","","",95,[[],["any",8]]],[11,"into_any_arc","","",95,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"into_any","","",96,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",96,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",96,[[],["any",8]]],[11,"as_any_mut","","",96,[[],["any",8]]],[11,"into_any_arc","","",96,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"into_any","","",97,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",97,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",97,[[],["any",8]]],[11,"as_any_mut","","",97,[[],["any",8]]],[11,"into_any_arc","","",97,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"into_any","","",98,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",98,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",98,[[],["any",8]]],[11,"as_any_mut","","",98,[[],["any",8]]],[11,"into_any_arc","","",98,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"into_any","","",99,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",99,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",99,[[],["any",8]]],[11,"as_any_mut","","",99,[[],["any",8]]],[11,"into_any_arc","","",99,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"into_any","","",100,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",100,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",100,[[],["any",8]]],[11,"as_any_mut","","",100,[[],["any",8]]],[11,"into_any_arc","","",100,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"into_any","","",101,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",101,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",101,[[],["any",8]]],[11,"as_any_mut","","",101,[[],["any",8]]],[11,"into_any_arc","","",101,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"into_any","","",145,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",145,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",145,[[],["any",8]]],[11,"as_any_mut","","",145,[[],["any",8]]],[11,"into_any_arc","","",145,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"into_any","","",102,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",102,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",102,[[],["any",8]]],[11,"as_any_mut","","",102,[[],["any",8]]],[11,"into_any_arc","","",102,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"into_any","","",103,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",103,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",103,[[],["any",8]]],[11,"as_any_mut","","",103,[[],["any",8]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"into_any","","",104,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",104,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",104,[[],["any",8]]],[11,"as_any_mut","","",104,[[],["any",8]]],[11,"into_any_arc","","",104,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"into_any","","",105,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",105,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",105,[[],["any",8]]],[11,"as_any_mut","","",105,[[],["any",8]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"into_any","","",107,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",107,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",107,[[],["any",8]]],[11,"as_any_mut","","",107,[[],["any",8]]],[11,"into_any_arc","","",107,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"into_any","","",108,[[["box",3],["global",3]],[["global",3],["box",3],["any",8]]]],[11,"into_any_rc","","",108,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",108,[[],["any",8]]],[11,"as_any_mut","","",108,[[],["any",8]]],[11,"into_any_arc","","",108,[[["arc",3]],[["arc",3],["any",8]]]],[11,"get_space","mmtk::util::alloc","",8,[[],["space",8]]],[11,"get_plan","","",8,[[],["plan",8]]],[11,"alloc","","",8,[[],["address",3]]],[11,"alloc_slow_once","","",8,[[],["address",3]]],[11,"get_tls","","",8,[[],["vmthread",3]]],[11,"get_tls","mmtk::util::alloc::large_object_allocator","",5,[[],["vmthread",3]]],[11,"get_plan","","",5,[[],["plan",8]]],[11,"get_space","","",5,[[],["space",8]]],[11,"alloc","","",5,[[],["address",3]]],[11,"alloc_slow","","",5,[[],["address",3]]],[11,"alloc_slow_once","","",5,[[],["address",3]]],[11,"get_space","mmtk::util::alloc::malloc_allocator","",7,[[],["space",8]]],[11,"get_plan","","",7,[[],["plan",8]]],[11,"alloc","","",7,[[],["address",3]]],[11,"get_tls","","",7,[[],["vmthread",3]]],[11,"alloc_slow_once","","",7,[[],["address",3]]],[11,"scan","mmtk::util::alloc::dump_linear_scan","",125,[[["objectreference",3]]]],[11,"gc_hook","mmtk::util::analysis::gc_count","",9,[[["mmtk",3]]]],[11,"set_running","","",9,[[]]],[11,"alloc_hook","mmtk::util::analysis::obj_num","",10,[[]]],[11,"set_running","","",10,[[]]],[11,"alloc_hook","mmtk::util::analysis::obj_size","",11,[[]]],[11,"set_running","","",11,[[]]],[11,"head","mmtk::util::int_array_freelist","",35,[[]]],[11,"heads","","",35,[[]]],[11,"get_entry","","",35,[[]]],[11,"set_entry","","",35,[[]]],[11,"head","mmtk::util::raw_memory_freelist","",44,[[]]],[11,"heads","","",44,[[]]],[11,"get_entry","","",44,[[]]],[11,"set_entry","","",44,[[]]],[11,"alloc","","",44,[[]]],[11,"eagerly_mmap_all_spaces","mmtk::util::heap::layout","",128,[[]]],[11,"mark_as_mapped","","",128,[[["address",3]]]],[11,"ensure_mapped","","",128,[[["sidemetadata",3],["address",3]],["result",6]]],[11,"is_mapped_address","","Return {@code true} if the given address has been mmapped",128,[[["address",3]]]],[11,"protect","","",128,[[["address",3]]]],[11,"new","mmtk::util::heap::layout::map64","",129,[[]]],[11,"insert","","",129,[[["address",3],["spacedescriptor",3]]]],[11,"create_freelist","","",129,[[["commonfreelistpageresource",3]],["box",3]]],[11,"create_parent_freelist","","",129,[[["commonfreelistpageresource",3]],["box",3]]],[11,"allocate_contiguous_chunks","","",129,[[["address",3],["spacedescriptor",3]],["address",3]]],[11,"get_next_contiguous_region","","",129,[[["address",3]],["address",3]]],[11,"get_contiguous_region_chunks","","",129,[[["address",3]]]],[11,"get_contiguous_region_size","","",129,[[["address",3]]]],[11,"free_all_chunks","","",129,[[["address",3]]]],[11,"free_contiguous_chunks","","",129,[[["address",3]]]],[11,"boot","","",129,[[]]],[11,"finalize_static_space_map","","",129,[[["address",3]]]],[11,"is_finalized","","",129,[[]]],[11,"get_discontig_freelist_pr_ordinal","","",129,[[["commonfreelistpageresource",3]]]],[11,"get_descriptor_for_address","","",129,[[["address",3]],["spacedescriptor",3]]],[11,"add_to_cumulative_committed_pages","","",129,[[]]],[11,"common","mmtk::util::heap::freelistpageresource","",22,[[],["commonpageresource",3]]],[11,"common_mut","","",22,[[],["commonpageresource",3]]],[11,"alloc_pages","","",22,[[["spacedescriptor",3],["vmthread",3]],[["prallocfail",3],["prallocresult",3],["result",4]]]],[11,"adjust_for_metadata","","",22,[[]]],[11,"common","mmtk::util::heap::monotonepageresource","",25,[[],["commonpageresource",3]]],[11,"common_mut","","",25,[[],["commonpageresource",3]]],[11,"reserve_pages","","",25,[[]]],[11,"alloc_pages","","",25,[[["spacedescriptor",3],["vmthread",3]],[["prallocfail",3],["prallocresult",3],["result",4]]]],[11,"adjust_for_metadata","","",25,[[]]],[11,"start","mmtk::util::statistics::counter","",55,[[]]],[11,"stop","","",55,[[]]],[11,"phase_change","","The phase has changed (from GC to mutator or mutator to …",55,[[]]],[11,"print_count","","",55,[[]]],[11,"print_total","","",55,[[["option",4]]]],[11,"print_min","","",55,[[]]],[11,"print_max","","",55,[[]]],[11,"print_last","","",55,[[]]],[11,"merge_phases","","",55,[[]]],[11,"implicitly_start","","",55,[[]]],[11,"name","","",55,[[],["string",3]]],[11,"start","","",56,[[]]],[11,"stop","","",56,[[]]],[11,"phase_change","","",56,[[]]],[11,"print_count","","",56,[[]]],[11,"print_total","","",56,[[["option",4]]]],[11,"print_min","","",56,[[]]],[11,"print_max","","",56,[[]]],[11,"print_last","","",56,[[]]],[11,"merge_phases","","",56,[[]]],[11,"implicitly_start","","",56,[[]]],[11,"name","","",56,[[],["string",3]]],[11,"current_value","","",134,[[],["instant",3]]],[11,"diff","","",134,[[["instant",3]]]],[11,"print_diff","","",134,[[]]],[11,"flush","mmtk::plan::barriers","",136,[[]]],[11,"post_write_barrier","","",136,[[["writetarget",4]]]],[11,"flush","","",65,[[]]],[11,"post_write_barrier","","",65,[[["writetarget",4]]]],[11,"init","mmtk::plan::global","",68,[[["vmworkerthread",3]]]],[11,"constraints","","",68,[[],["planconstraints",3]]],[11,"prepare","","",68,[[]]],[11,"release","","",68,[[]]],[11,"alloc_copy","","",68,[[["objectreference",3],["allocationsemantics",4]],["address",3]]],[11,"constraints","mmtk::plan::gencopy","",80,[[],["planconstraints",3]]],[11,"create_worker_local","","",80,[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",6]]],[11,"collection_required","","",80,[[["space",8]]]],[11,"gc_init","","",80,[[["vmmap",6],["arc",3]]]],[11,"schedule_collection","","",80,[[["mmtkscheduler",6]]]],[11,"get_allocator_mapping","","",80,[[],["enummap",3]]],[11,"prepare","","",80,[[["vmworkerthread",3]]]],[11,"release","","",80,[[["vmworkerthread",3]]]],[11,"get_collection_reserve","","",80,[[]]],[11,"get_pages_used","","",80,[[]]],[11,"base","","",80,[[],["baseplan",3]]],[11,"common","","",80,[[],["commonplan",3]]],[11,"in_nursery","","",80,[[]]],[11,"gc_init","mmtk::plan::marksweep","",137,[[["vmmap",6],["arc",3]]]],[11,"schedule_collection","","",137,[[["mmtkscheduler",6]]]],[11,"get_allocator_mapping","","",137,[[],["enummap",3]]],[11,"prepare","","",137,[[["vmworkerthread",3]]]],[11,"release","","",137,[[["vmworkerthread",3]]]],[11,"collection_required","","",137,[[["space",8]]]],[11,"get_collection_reserve","","",137,[[]]],[11,"get_pages_used","","",137,[[]]],[11,"base","","",137,[[],["baseplan",3]]],[11,"common","","",137,[[],["commonplan",3]]],[11,"constraints","","",137,[[],["planconstraints",3]]],[11,"create_worker_local","","",137,[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",6]]],[11,"constraints","mmtk::plan::nogc","",81,[[],["planconstraints",3]]],[11,"create_worker_local","","",81,[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",6]]],[11,"gc_init","","",81,[[["vmmap",6],["arc",3]]]],[11,"collection_required","","",81,[[["space",8]]]],[11,"base","","",81,[[],["baseplan",3]]],[11,"prepare","","",81,[[["vmworkerthread",3]]]],[11,"release","","",81,[[["vmworkerthread",3]]]],[11,"get_allocator_mapping","","",81,[[],["enummap",3]]],[11,"schedule_collection","","",81,[[["mmtkscheduler",6]]]],[11,"get_pages_used","","",81,[[]]],[11,"handle_user_collection_request","","",81,[[["vmmutatorthread",3]]]],[11,"constraints","mmtk::plan::semispace","",82,[[],["planconstraints",3]]],[11,"create_worker_local","","",82,[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",6]]],[11,"gc_init","","",82,[[["vmmap",6],["arc",3]]]],[11,"schedule_collection","","",82,[[["mmtkscheduler",6]]]],[11,"get_allocator_mapping","","",82,[[],["enummap",3]]],[11,"prepare","","",82,[[["vmworkerthread",3]]]],[11,"release","","",82,[[["vmworkerthread",3]]]],[11,"collection_required","","",82,[[["space",8]]]],[11,"get_collection_reserve","","",82,[[]]],[11,"get_pages_used","","",82,[[]]],[11,"base","","",82,[[],["baseplan",3]]],[11,"common","","",82,[[],["commonplan",3]]],[11,"prepare","mmtk::plan::mutator_context","",75,[[["vmworkerthread",3]]]],[11,"release","","",75,[[["vmworkerthread",3]]]],[11,"alloc","","",75,[[["allocationtype",4]],["address",3]]],[11,"post_alloc","","",75,[[["objectreference",3],["allocationtype",4]]]],[11,"get_tls","","",75,[[],["vmmutatorthread",3]]],[11,"barrier","","",75,[[],["barrier",8]]],[11,"name","mmtk::policy::copyspace","",88,[[]]],[11,"is_live","","",88,[[["objectreference",3]]]],[11,"is_movable","","",88,[[]]],[11,"is_sane","","",88,[[]]],[11,"initialize_header","","",88,[[["objectreference",3]]]],[11,"name","mmtk::policy::immortalspace","",89,[[]]],[11,"is_live","","",89,[[["objectreference",3]]]],[11,"is_movable","","",89,[[]]],[11,"is_sane","","",89,[[]]],[11,"initialize_header","","",89,[[["objectreference",3]]]],[11,"name","mmtk::policy::largeobjectspace","",90,[[]]],[11,"is_live","","",90,[[["objectreference",3]]]],[11,"is_movable","","",90,[[]]],[11,"is_sane","","",90,[[]]],[11,"initialize_header","","",90,[[["objectreference",3]]]],[11,"name","mmtk::policy::lockfreeimmortalspace","",91,[[]]],[11,"is_live","","",91,[[["objectreference",3]]]],[11,"is_movable","","",91,[[]]],[11,"is_sane","","",91,[[]]],[11,"initialize_header","","",91,[[["objectreference",3]]]],[11,"name","mmtk::policy::mallocspace","",139,[[]]],[11,"is_live","","",139,[[["objectreference",3]]]],[11,"is_movable","","",139,[[]]],[11,"is_sane","","",139,[[]]],[11,"initialize_header","","",139,[[["objectreference",3]]]],[11,"as_space","mmtk::policy::copyspace","",88,[[],["space",8]]],[11,"as_sft","","",88,[[],["sft",8]]],[11,"get_page_resource","","",88,[[],["pageresource",8]]],[11,"common","","",88,[[],["commonspace",3]]],[11,"init","","",88,[[["vmmap",6]]]],[11,"release_multiple_pages","","",88,[[["address",3]]]],[11,"as_space","mmtk::policy::immortalspace","",89,[[],["space",8]]],[11,"as_sft","","",89,[[],["sft",8]]],[11,"get_page_resource","","",89,[[],["pageresource",8]]],[11,"common","","",89,[[],["commonspace",3]]],[11,"init","","",89,[[["vmmap",6]]]],[11,"release_multiple_pages","","",89,[[["address",3]]]],[11,"as_space","mmtk::policy::largeobjectspace","",90,[[],["space",8]]],[11,"as_sft","","",90,[[],["sft",8]]],[11,"get_page_resource","","",90,[[],["pageresource",8]]],[11,"init","","",90,[[["vmmap",6]]]],[11,"common","","",90,[[],["commonspace",3]]],[11,"release_multiple_pages","","",90,[[["address",3]]]],[11,"as_space","mmtk::policy::lockfreeimmortalspace","",91,[[],["space",8]]],[11,"as_sft","","",91,[[],["sft",8]]],[11,"get_page_resource","","",91,[[],["pageresource",8]]],[11,"common","","",91,[[],["commonspace",3]]],[11,"release_multiple_pages","","",91,[[["address",3]]]],[11,"init","","",91,[[["vmmap",6]]]],[11,"reserved_pages","","",91,[[]]],[11,"acquire","","",91,[[["vmthread",3]],["address",3]]],[11,"as_space","mmtk::policy::mallocspace","",139,[[],["space",8]]],[11,"as_sft","","",139,[[],["sft",8]]],[11,"get_page_resource","","",139,[[],["pageresource",8]]],[11,"common","","",139,[[],["commonspace",3]]],[11,"init","","",139,[[["vmmap",6]]]],[11,"release_multiple_pages","","",139,[[["address",3]]]],[11,"in_space","","",139,[[["objectreference",3]]]],[11,"address_in_space","","",139,[[["address",3]]]],[11,"get_name","","",139,[[]]],[11,"reserved_pages","","",139,[[]]],[11,"spawn_worker","mmtk","",124,[[["gcworker",6],["vmthread",3]]]],[11,"init","mmtk::plan::global","",68,[[["vmworkerthread",3]]]],[11,"do_work","mmtk::util::analysis","",126,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","mmtk::util::finalizable_processor","",15,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",16,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","mmtk::util::sanity::sanity_checker","",49,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",50,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",51,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","mmtk::scheduler::gc_work","",144,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",95,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",96,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",97,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",98,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",99,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",100,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",101,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",145,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",102,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",103,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",104,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",107,[[["gcworker",6],["mmtk",3]]]],[11,"do_work","","",108,[[["gcworker",6],["mmtk",3]]]],[11,"new","mmtk::util::sanity::sanity_checker","",131,[[["vec",3],["address",3],["mmtk",3]]]],[11,"trace_object","","",131,[[["objectreference",3]],["objectreference",3]]],[11,"clone","mmtk::util::address","",0,[[],["address",3]]],[11,"clone","","",1,[[],["objectreference",3]]],[11,"clone","mmtk::util::alloc::allocators","",4,[[],["allocatorselector",4]]],[11,"clone","mmtk::util::heap::space_descriptor","",29,[[],["spacedescriptor",3]]],[11,"clone","mmtk::util::heap","",31,[[],["vmrequest",4]]],[11,"clone","mmtk::util::opaque_pointer","",36,[[],["opaquepointer",3]]],[11,"clone","","",37,[[],["vmthread",3]]],[11,"clone","","",38,[[],["vmmutatorthread",3]]],[11,"clone","","",39,[[],["vmworkerthread",3]]],[11,"clone","mmtk::util::options","",40,[[],["nurseryzeroingoptions",4]]],[11,"clone","","",41,[[],["planselector",4]]],[11,"clone","mmtk::util::side_metadata","",52,[[],["sidemetadatascope",4]]],[11,"clone","","",53,[[],["sidemetadataspec",3]]],[11,"clone","mmtk::plan::barriers","",62,[[],["barrierselector",4]]],[11,"clone","mmtk::plan::global","",73,[[],["allocationsemantics",4]]],[11,"clone","mmtk::scheduler","",115,[[],["workbucketstage",4]]],[11,"clone","","",143,[[],["workerlocalptr",3]]],[11,"default","mmtk::util::analysis::obj_size","",11,[[],["persizeclassobjectcounter",3]]],[11,"default","mmtk::util::analysis","",126,[[],["gchookwork",3]]],[11,"default","","",13,[[],["analysismanager",3]]],[11,"default","mmtk::util::finalizable_processor","",14,[[],["finalizableprocessor",3]]],[11,"default","","",15,[[],["finalization",3]]],[11,"default","","",16,[[],["forwardfinalization",3]]],[11,"default","mmtk::util::heap","",127,[[]]],[11,"default","mmtk::util::heap::layout","",128,[[]]],[11,"default","mmtk::util::heap::layout::map64","",129,[[]]],[11,"default","mmtk::util::opaque_pointer","",36,[[]]],[11,"default","mmtk::util::options","",43,[[]]],[11,"default","mmtk::util::reference_processor","",45,[[]]],[11,"default","mmtk::util::sanity::sanity_checker","",48,[[]]],[11,"default","mmtk::util::statistics::stats","",60,[[]]],[11,"default","mmtk::util::treadmill","",61,[[]]],[11,"default","mmtk","",124,[[]]],[11,"default","mmtk::plan::controller_collector_context","",66,[[]]],[11,"default","mmtk::policy::space","",84,[[],["sftmap",3]]],[11,"default","mmtk::scheduler::stat","",92,[[],["schedulerstat",3]]],[11,"default","","",94,[[],["workerlocalstat",3]]],[11,"default","mmtk::scheduler::gc_work","",97,[[],["preparecollector",3]]],[11,"default","","",100,[[],["releasecollector",3]]],[11,"default","","",101,[[],["stopmutators",3]]],[11,"default","","",145,[[],["endofgc",3]]],[11,"default","","",102,[[],["scanstackroots",3]]],[11,"default","","",104,[[],["scanvmspecificroots",3]]],[11,"cmp","mmtk::util::address","",0,[[["address",3]],["ordering",4]]],[11,"eq","","",0,[[["address",3]]]],[11,"ne","","",0,[[["address",3]]]],[11,"eq","","",1,[[["objectreference",3]]]],[11,"ne","","",1,[[["objectreference",3]]]],[11,"eq","mmtk::util::heap::space_descriptor","",29,[[["spacedescriptor",3]]]],[11,"ne","","",29,[[["spacedescriptor",3]]]],[11,"eq","mmtk::util::opaque_pointer","",36,[[["opaquepointer",3]]]],[11,"ne","","",36,[[["opaquepointer",3]]]],[11,"eq","","",37,[[["vmthread",3]]]],[11,"ne","","",37,[[["vmthread",3]]]],[11,"eq","","",38,[[["vmmutatorthread",3]]]],[11,"ne","","",38,[[["vmmutatorthread",3]]]],[11,"eq","","",39,[[["vmworkerthread",3]]]],[11,"ne","","",39,[[["vmworkerthread",3]]]],[11,"eq","mmtk::util::reference_processor","",46,[[["semantics",4]]]],[11,"eq","mmtk::plan::barriers","",62,[[["barrierselector",4]]]],[11,"eq","mmtk::plan::global","",70,[[["gcstatus",4]]]],[11,"eq","mmtk::scheduler","",115,[[["workbucketstage",4]]]],[11,"partial_cmp","mmtk::util::address","",0,[[["address",3]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["address",3]]]],[11,"le","","",0,[[["address",3]]]],[11,"gt","","",0,[[["address",3]]]],[11,"ge","","",0,[[["address",3]]]],[11,"partial_cmp","","",1,[[["objectreference",3]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["objectreference",3]]]],[11,"le","","",1,[[["objectreference",3]]]],[11,"gt","","",1,[[["objectreference",3]]]],[11,"ge","","",1,[[["objectreference",3]]]],[11,"deref","mmtk::util::heap::freelistpageresource","",22,[[],["commonfreelistpageresource",3]]],[11,"deref","mmtk::util::options","",42,[[],["options",3]]],[11,"deref","mmtk::util::sanity::sanity_checker","",131,[[]]],[11,"deref","mmtk::plan::marksweep::mutator","",138,[[],["enummap",3]]],[11,"deref","mmtk::policy::mallocspace::metadata","",140,[[],["rwlock",3]]],[11,"deref","","",141,[[],["rwlock",3]]],[11,"deref","","",142,[[],["rwlock",3]]],[11,"deref_mut","mmtk::util::heap::freelistpageresource","",22,[[],["commonfreelistpageresource",3]]],[11,"deref_mut","mmtk::util::sanity::sanity_checker","",131,[[]]],[11,"fmt","mmtk::util::address","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::alloc::allocators","",4,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap::layout","",128,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap::space_descriptor","",29,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::heap","",31,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::int_array_freelist","",35,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::opaque_pointer","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::options","",41,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::raw_memory_freelist","",44,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::reference_processor","",46,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::statistics::counter","",56,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::treadmill","",61,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::plan::barriers","",62,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::plan::global","",73,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::scheduler","",115,[[["formatter",3]],["result",6]]],[11,"fmt","mmtk::util::address","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"sub","","",0,[[["bytesize",6]],["address",3]]],[11,"sub","","",0,[[["address",3]],["bytesize",6]]],[11,"add","","",0,[[["bytesize",6]],["address",3]]],[11,"add","","",0,[[["byteoffset",6]],["address",3]]],[11,"add_assign","","",0,[[["bytesize",6]]]],[11,"add_assign","","",0,[[["byteoffset",6]]]],[11,"sub_assign","","",0,[[["bytesize",6]]]],[11,"bitand","","",0,[[]]],[11,"bitand","","",0,[[]]],[11,"bitor","","",0,[[]]],[11,"bitor","","",0,[[]]],[11,"shl","","",0,[[]]],[11,"shr","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"from_str","mmtk::util::options","",40,[[],["result",4]]],[11,"from_str","","",41,[[],["result",4]]],[11,"fmt","mmtk::util::address","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"initialize","mmtk::plan::marksweep::mutator","",138,[[]]],[11,"initialize","mmtk::policy::mallocspace::metadata","",140,[[]]],[11,"initialize","","",141,[[]]],[11,"initialize","","",142,[[]]],[11,"slice","mmtk::plan::global","",73,[[]]],[11,"slice_mut","","",73,[[]]],[11,"from_usize","","",73,[[]]],[11,"to_usize","","",73,[[]]],[11,"from_function","","",73,[[["fnmut",8]]]],[11,"slice","mmtk::scheduler","",115,[[]]],[11,"slice_mut","","",115,[[]]],[11,"from_usize","","",115,[[]]],[11,"to_usize","","",115,[[]]],[11,"from_function","","",115,[[["fnmut",8]]]],[11,"set_limit","mmtk::util::alloc","",8,[[["address",3]]]],[11,"reset","","",8,[[]]],[11,"rebind","","",8,[[["space",8]]]],[11,"new","","",8,[[["space",8],["plan",8],["vmthread",3]]]],[11,"new","mmtk::util::heap","",127,[[]]],[11,"reserve_and_commit","","Inform of both reserving and committing a certain number …",127,[[]]],[11,"reserve","","Inform of reserving a certain number of pages. Usually …",127,[[]]],[11,"clear_reserved","","Inform of clearing some reserved pages. This is used when …",127,[[]]],[11,"commit","","Inform of successfully committing a certain number of …",127,[[]]],[11,"release","","Inform of releasing a certain number of pages. The number …",127,[[]]],[11,"reset","","Set both reserved and committed pages to zero. This is …",127,[[]]],[11,"get_reserved_pages","","",127,[[]]],[11,"get_committed_pages","","",127,[[]]],[11,"new","mmtk::util::heap::layout","",128,[[]]],[11,"new","mmtk::util::heap","",30,[[["address",3]]]],[11,"reserve","","",30,[[],["address",3]]],[11,"get_discontig_start","","",30,[[],["address",3]]],[11,"get_discontig_end","","",30,[[],["address",3]]],[11,"get_total_pages","","",30,[[]]],[11,"is_discontiguous","","",31,[[]]],[11,"common64bit","","",31,[[]]],[11,"discontiguous","","",31,[[]]],[11,"fixed_size","","",31,[[]]],[11,"fraction","","",31,[[]]],[11,"high_fixed_size","","",31,[[]]],[11,"fixed_extent","","",31,[[]]],[11,"is_global","mmtk::util::side_metadata","",52,[[]]],[11,"new_global_specs","","",54,[[],[["vec",3],["sidemetadataspec",3]]]],[11,"new","","",132,[[["sidemetadatacontext",3]],["sidemetadata",3]]],[11,"reserved_pages","","",132,[[]]],[11,"try_map_metadata_space","","Tries to map the required metadata space and returns <code>true</code> …",132,[[["address",3]],["result",6]]],[11,"try_map_metadata_address_range","","Tries to map the required metadata address range, without …",132,[[["address",3]],["result",6]]],[11,"ensure_unmap_metadata_space","","Unmap the corresponding metadata space or panic.",132,[[["address",3]]]],[11,"new","mmtk::util::statistics::counter","",55,[[["string",3],["arc",3],["sharedstats",3]]]],[11,"inc","","Increment the event counter",55,[[]]],[11,"inc_by","","Increment the event counter by provided value",55,[[]]],[11,"print_current","","",55,[[]]],[11,"new","","",56,[[["string",3],["arc",3],["sharedstats",3]]]],[11,"new","","",133,[[["arc",3],["mutex",3]]]],[11,"inc","","Increment the event counter by provided value",133,[[]]],[11,"start","","Start this counter",133,[[]]],[11,"stop","","Stop this counter",133,[[]]],[11,"print_current_units","","Print current (mid-phase) units",133,[[]]],[11,"print_current_volume","","Print (mid-phase) volume",133,[[]]],[11,"print_units","","Print units",133,[[]]],[11,"print_volume","","Print volume",133,[[]]],[11,"new","mmtk::util","",135,[[]]],[11,"reset","","",135,[[]]],[11,"increment","","",135,[[]]],[11,"peek","","",135,[[]]],[11,"new","mmtk","",124,[[]]],[11,"harness_begin","","",124,[[["vmmutatorthread",3]]]],[11,"harness_end","","",124,[[]]],[11,"new","mmtk::plan::gencopy","",80,[[["arc",3],["mmapper",6],["vmmap",6],["unsafeoptionswrapper",3]]]],[11,"tospace","","",80,[[],["copyspace",3]]],[11,"fromspace","","",80,[[],["copyspace",3]]],[11,"new","mmtk::plan::marksweep","",137,[[["arc",3],["mmapper",6],["vmmap",6],["unsafeoptionswrapper",3]]]],[11,"ms_space","","",137,[[],["mallocspace",3]]],[11,"new","mmtk::plan::nogc","",81,[[["arc",3],["mmapper",6],["vmmap",6],["unsafeoptionswrapper",3]]]],[11,"new","mmtk::plan::semispace","",82,[[["arc",3],["mmapper",6],["vmmap",6],["unsafeoptionswrapper",3]]]],[11,"tospace","","",82,[[],["copyspace",3]]],[11,"fromspace","","",82,[[],["copyspace",3]]],[11,"new","mmtk::policy::mallocspace","",139,[[["vec",3],["sidemetadataspec",3]]]],[11,"alloc","","",139,[[["vmthread",3]],["address",3]]],[11,"free","","",139,[[["address",3]]]],[11,"trace_object","","",139,[[["objectreference",3]],["objectreference",3]]],[11,"release_all_chunks","","",139,[[]]],[11,"spawn_worker","mmtk::scheduler","",109,[[["worker",3],["vmthread",3]]]],[11,"init","","",110,[[["vmworkerthread",3]]]],[11,"new","","",112,[[],["arc",3]]],[11,"num_workers","","",112,[[]]],[11,"initialize","","",112,[[["arc",3],["vmthread",3]]]],[11,"initialize_worker","","",112,[[["vmworkerthread",3],["arc",3]]]],[11,"set_initializer","","",112,[[["option",4],["coordinatorwork",8]]]],[11,"set_finalizer","","",112,[[["option",4],["coordinatorwork",8]]]],[11,"worker_group","","",112,[[],[["workergroup",3],["arc",3]]]],[11,"wait_for_completion","","Drain the message queue and execute coordinator work. …",112,[[]]],[11,"deactivate_all","","",112,[[]]],[11,"reset_state","","",112,[[]]],[11,"add_coordinator_work","","",112,[[["worker",3]]]],[11,"poll","","Get a scheduable work. Called by workers",112,[[["worker",3]],[["work",8],["box",3]]]],[11,"enable_stat","","",112,[[]]],[11,"statistics","","",112,[[],[["hashmap",3],["string",3]]]],[11,"notify_mutators_paused","","",112,[[["mmtk",3]]]],[11,"notify_mutators_paused","","",146,[[["mmtk",3]]]],[11,"do_work_with_stat","","",113,[[["worker",3]]]],[18,"UNINITIALIZED","","",143,null],[11,"new","","",143,[[["workerlocal",8]]]],[11,"as_type","","SafetyThe user needs to guarantee that the type supplied …",143,[[]]],[11,"new","","",116,[[["weak",3],["scheduler",3],["sender",3],["coordinatormessage",4]]]],[11,"add_work","","",116,[[["workbucketstage",4]]]],[11,"is_parked","","",116,[[]]],[11,"is_coordinator","","",116,[[]]],[11,"scheduler","","",116,[[],["scheduler",3]]],[11,"local","","SafetyThe user needs to guarantee that the type supplied …",116,[[]]],[11,"set_local","","",116,[[["workerlocalptr",3]]]],[11,"init","","",116,[[["vmworkerthread",3]]]],[11,"do_work","","",116,[[]]],[11,"run","","",116,[[]]],[11,"new","","",117,[[["weak",3],["scheduler",3],["sender",3],["coordinatormessage",4]],["arc",3]]],[11,"worker_count","","",117,[[]]],[11,"parked_workers","","",117,[[]]],[11,"all_parked","","",117,[[]]],[11,"spawn_workers","","",117,[[["vmthread",3]]]],[11,"mutators","mmtk::vm","A utility method to provide a thread-safe mutator …",118,[[],["synchronizedmutatoriterator",3]]],[11,"out_of_memory","","Inform the VM for an out-of-memory error. The VM can …",119,[[["vmthread",3]]]],[11,"schedule_finalization","","Inform the VM to schedule finalization threads.",119,[[["vmworkerthread",3]]]],[18,"GC_BYTE_OFFSET","","The offset of the GC byte from the object reference, in …",120,null],[11,"clear_referent","","Weak and soft references always clear the referent before …",121,[[["objectreference",3]]]],[18,"SCAN_MUTATORS_IN_SAFEPOINT","","Scan stack roots after all mutators are paused.",122,null],[18,"SINGLE_THREAD_MUTATOR_SCANNING","","Scan all the mutators within a single work packet.",122,null]],"p":[[3,"Address"],[3,"ObjectReference"],[8,"Allocator"],[3,"Allocators"],[4,"AllocatorSelector"],[3,"LargeObjectAllocator"],[8,"LinearScan"],[3,"MallocAllocator"],[3,"BumpAllocator"],[3,"GcCounter"],[3,"ObjectCounter"],[3,"PerSizeClassObjectCounter"],[8,"RtAnalysis"],[3,"AnalysisManager"],[3,"FinalizableProcessor"],[3,"Finalization"],[3,"ForwardFinalization"],[8,"GenericFreeList"],[3,"HeaderByte"],[8,"Mmapper"],[8,"Map"],[3,"CommonFreeListPageResource"],[3,"FreeListPageResource"],[4,"MonotonePageResourceConditional"],[13,"Contiguous"],[3,"MonotonePageResource"],[8,"PageResource"],[3,"PRAllocResult"],[3,"CommonPageResource"],[3,"SpaceDescriptor"],[3,"HeapMeta"],[4,"VMRequest"],[13,"RequestFixed"],[13,"RequestExtent"],[13,"RequestFraction"],[3,"IntArrayFreeList"],[3,"OpaquePointer"],[3,"VMThread"],[3,"VMMutatorThread"],[3,"VMWorkerThread"],[4,"NurseryZeroingOptions"],[4,"PlanSelector"],[3,"UnsafeOptionsWrapper"],[3,"Options"],[3,"RawMemoryFreeList"],[3,"ReferenceProcessors"],[4,"Semantics"],[3,"ReferenceProcessor"],[3,"SanityChecker"],[3,"ScheduleSanityGC"],[3,"SanityPrepare"],[3,"SanityRelease"],[4,"SideMetadataScope"],[3,"SideMetadataSpec"],[3,"SideMetadataContext"],[3,"EventCounter"],[3,"LongCounter"],[8,"Counter"],[8,"Diffable"],[3,"SharedStats"],[3,"Stats"],[3,"TreadMill"],[4,"BarrierSelector"],[4,"WriteTarget"],[8,"Barrier"],[3,"ObjectRememberingBarrier"],[3,"ControllerCollectorContext"],[8,"CopyContext"],[3,"NoCopy"],[8,"Plan"],[4,"GcStatus"],[3,"BasePlan"],[3,"CommonPlan"],[4,"AllocationSemantics"],[3,"MutatorConfig"],[3,"Mutator"],[8,"MutatorContext"],[3,"PlanConstraints"],[8,"TraceLocal"],[8,"TransitiveClosure"],[3,"GenCopy"],[3,"NoGC"],[3,"SemiSpace"],[8,"SFT"],[3,"SFTMap"],[8,"Space"],[3,"CommonSpace"],[3,"SpaceOptions"],[3,"CopySpace"],[3,"ImmortalSpace"],[3,"LargeObjectSpace"],[3,"LockFreeImmortalSpace"],[3,"SchedulerStat"],[3,"WorkStat"],[3,"WorkerLocalStat"],[3,"Prepare"],[3,"PrepareMutator"],[3,"PrepareCollector"],[3,"Release"],[3,"ReleaseMutator"],[3,"ReleaseCollector"],[3,"StopMutators"],[3,"ScanStackRoots"],[3,"ScanStackRoot"],[3,"ScanVMSpecificRoots"],[3,"ProcessEdgesBase"],[8,"ProcessEdgesWork"],[3,"ScanObjects"],[3,"ProcessModBuf"],[8,"Context"],[8,"WorkerLocal"],[4,"CoordinatorMessage"],[3,"Scheduler"],[8,"Work"],[8,"GCWork"],[4,"WorkBucketStage"],[3,"Worker"],[3,"WorkerGroup"],[8,"ActivePlan"],[8,"Collection"],[8,"ObjectModel"],[8,"ReferenceGlue"],[8,"Scanning"],[8,"VMBinding"],[3,"MMTK"],[3,"DumpLinearScan"],[3,"GcHookWork"],[3,"PageAccounting"],[3,"FragmentedMapper"],[3,"Map64"],[3,"PRAllocFail"],[3,"SanityGCProcessEdges"],[3,"SideMetadata"],[3,"SizeCounter"],[3,"MonotoneNanoTime"],[3,"SynchronizedCounter"],[3,"NoBarrier"],[3,"MarkSweep"],[3,"ALLOCATOR_MAPPING"],[3,"MallocSpace"],[3,"ACTIVE_CHUNKS"],[3,"ALLOC_MAP"],[3,"MARK_MAP"],[3,"WorkerLocalPtr"],[3,"ScheduleCollection"],[3,"EndOfGC"],[6,"MMTkScheduler"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);