var searchIndex = JSON.parse('{\
"mmtk":{"doc":"Memory Management ToolKit (MMTk) is a portable and high â€¦","t":[4,4,13,8,13,13,13,13,3,3,8,13,13,8,13,8,8,16,16,10,10,12,10,12,10,10,10,12,10,10,10,12,10,10,10,10,10,12,0,0,12,12,0,12,12,0,10,10,10,10,10,10,10,10,10,12,10,10,10,10,10,12,10,0,12,10,0,0,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,4,4,13,8,13,17,17,13,13,13,17,3,8,17,13,13,3,17,8,3,13,17,8,8,16,16,10,10,12,10,12,12,0,10,12,10,10,12,10,10,0,10,12,12,10,12,0,10,10,10,0,0,10,0,12,12,12,12,12,0,12,12,12,12,12,0,12,0,12,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,0,0,10,12,8,4,3,13,13,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,12,12,11,12,11,11,11,11,11,11,11,17,17,17,17,0,0,5,0,0,5,0,0,0,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,17,17,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,5,11,11,5,5,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,0,0,0,3,3,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,3,12,11,11,11,11,5,11,11,5,5,11,11,11,11,11,11,11,11,12,4,3,13,3,8,13,13,13,4,13,13,13,3,13,8,13,16,16,10,11,12,12,12,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,10,10,11,12,11,11,11,5,5,5,10,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,12,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,10,10,11,11,11,10,10,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,0,0,0,13,13,3,3,4,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,5,11,11,5,5,11,11,11,11,11,11,11,11,0,0,0,3,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,3,12,11,11,11,11,5,11,11,11,11,11,11,11,5,5,11,11,11,3,3,8,6,10,11,12,12,11,11,11,11,10,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,10,11,10,11,12,11,11,11,10,11,12,12,11,11,11,11,11,11,0,0,17,3,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,12,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,0,0,0,3,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,17,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,3,12,11,11,11,11,5,11,11,11,11,11,11,11,5,5,11,11,11,17,3,11,11,12,11,11,11,11,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,0,0,0,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,17,17,3,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,5,11,11,11,11,11,11,11,5,5,11,11,11,8,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,11,10,10,3,8,11,11,11,11,12,11,11,11,11,11,11,12,11,10,11,10,11,11,11,11,12,0,0,0,0,0,0,0,3,17,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,0,0,0,0,0,14,5,12,18,3,3,4,18,18,18,18,18,18,18,18,18,18,13,18,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,18,13,18,18,3,3,4,13,18,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,3,6,18,18,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,3,18,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,12,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,18,18,3,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,17,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,17,3,17,17,17,11,11,11,11,11,11,11,11,11,12,11,11,5,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,12,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,12,11,11,12,11,11,11,11,0,0,17,3,12,12,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,12,17,17,3,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,5,5,5,5,5,3,17,17,17,7,3,8,3,8,3,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,12,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,5,11,10,11,12,12,12,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,10,11,11,12,12,12,12,11,10,11,12,12,12,12,11,11,12,11,10,5,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,8,13,8,3,13,8,13,13,13,3,13,16,4,10,0,12,12,12,12,12,10,12,12,0,12,12,0,12,12,10,0,0,0,0,12,12,12,12,12,12,12,18,18,3,18,18,3,3,3,3,8,3,3,3,3,3,18,18,3,3,3,3,3,3,16,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,12,12,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,8,8,10,11,11,12,13,18,13,13,3,13,13,13,13,3,4,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,3,8,3,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,12,11,11,11,12,10,11,11,12,10,11,12,10,11,11,11,12,11,11,11,11,11,11,3,8,3,17,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,12,12,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,12,3,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,3,6,6,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,4,3,13,13,13,3,13,3,10,10,0,0,0,12,0,0,5,10,10,10,0,0,12,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,8,5,5,10,11,11,11,11,10,11,11,11,11,5,5,10,10,10,11,4,3,13,13,13,17,17,17,17,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,17,17,17,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,5,5,3,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,12,12,12,12,11,11,12,12,11,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,8,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,17,17,5,5,5,5,5,5,5,5,5,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,10,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,14,12,11,11,12,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,12,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,17,17,17,8,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,3,3,17,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,0,0,0,0,0,0,0,3,17,17,17,17,17,17,17,17,17,17,17,17,6,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,6,6,17,17,17,16,8,10,11,10,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,3,17,11,11,11,11,12,11,11,11,11,11,12,11,12,11,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,8,13,13,13,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,13,3,4,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,8,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,17,7,17,17,17,17,17,17,17,17,17,3,17,17,17,17,17,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,12,11,11,11,12,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,4,13,5,5,5,0,0,5,0,0,5,12,12,13,4,13,11,11,11,11,11,11,5,5,11,5,5,11,11,11,11,11,11,11,5,5,11,11,11,11,12,12,17,17,3,17,17,11,11,12,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,5,11,12,5,11,11,11,11,17,17,17,17,17,17,3,3,19,3,3,12,5,5,0,12,5,5,5,0,12,12,0,12,5,5,12,12,12,5,12,12,12,0,0,12,12,5,5,17,17,17,17,17,17,17,17,17,17,17,3,3,19,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,12,5,11,11,5,5,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,5,12,12,12,11,12,11,11,11,12,11,12,11,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,13,3,7,4,3,3,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,5,11,5,5,5,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,12,3,18,18,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,17,17,13,13,13,13,17,13,13,4,3,13,3,4,13,13,3,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,14,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,17,17,17,3,11,11,11,12,11,11,11,12,11,11,11,11,11,12,11,11,11,12,11,12,12,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,17,13,3,3,3,13,4,17,17,17,17,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,0,0,5,3,3,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,8,8,3,16,11,11,11,11,10,11,10,11,0,11,10,11,11,11,11,0,10,10,10,10,10,11,10,10,10,10,0,10,10,11,11,11,3,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,3,6,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,12,11,12,12,11,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,17,17,3,3,11,11,11,11,11,11,11,11,12,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,11,12,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,12,18,18,8,8,18,18,18,18,8,8,8,16,8,16,3,3,3,3,3,16,16,16,0,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,0,10,10,10,10,10,10,10,0,10,10,10,10,10,8,3,12,11,11,11,11,11,10,10,11,11,11,11,11,10,10,11,11,11,10,12,10,12,11,11,11,18,18,8,10,11,11,10,11,11,10,11,11,10,10,11,11,18,18,18,18,18,18,18,18,18,18,8,10,10,10,10,10,10,10,10,10,10,10,10,0,10,12,12,12,12,12,18,18,18,18,18,18,18,18,18,18,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,10,10,10,18,18,18,18,8,10,10,10,10,10,10,10],"n":["AllocationSemantics","BarrierSelector","Code","CopyContext","Default","Immortal","LargeCode","Los","MMTK","Mutator","MutatorContext","NoBarrier","ObjectBarrier","Plan","ReadOnly","TraceLocal","TransitiveClosure","VM","VM","alloc","alloc_copy","allocators","barrier","barrier","base","collection_required","complete_trace","config","constraints","constraints","create_worker_local","finalizable_processor","gc_init","get_allocator_mapping","get_pages_used","get_tls","init","inside_harness","memory_manager","mmtk","mutator_tls","options","plan","plan","plan","policy","post_alloc","prepare","prepare","prepare","process_edge","process_interior_edge","process_node","process_root_edge","process_roots","reference_processors","release","release","release","release","report_delayed_root_edge","sanity_checker","schedule_collection","scheduler","scheduler","trace_object","util","vm","will_not_move_in_current_collection","add_finalizer","add_phantom_candidate","add_soft_candidate","add_weak_candidate","add_work_packet","add_work_packets","alloc","bind_mutator","destroy_mutator","enable_collection","flush_mutator","free_bytes","gc_init","get_allocator_mapping","get_finalized_object","handle_user_collection_request","harness_begin","harness_end","is_live_object","is_mapped_address","is_mapped_object","last_heap_address","modify_check","num_of_workers","on_closure_end","post_alloc","process","start_control_collector","start_worker","starting_heap_address","total_bytes","used_bytes","MMAPPER","MMTK","SFT_MAP","VM_MAP","__private_field","__private_field","__private_field","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","finalizable_processor","from","from","from","from","get_plan","harness_begin","harness_end","initialize","initialize","initialize","inside_harness","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","options","plan","reference_processors","sanity_checker","scheduler","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AllocationSemantics","BarrierSelector","Code","CopyContext","Default","GENCOPY_CONSTRAINTS","IMMIX_CONSTRAINTS","Immortal","LargeCode","Los","MS_CONSTRAINTS","Mutator","MutatorContext","NOGC_CONSTRAINTS","NoBarrier","ObjectBarrier","ObjectsClosure","PP_CONSTRAINTS","Plan","PlanConstraints","ReadOnly","SS_CONSTRAINTS","TraceLocal","TransitiveClosure","VM","VM","alloc","alloc_copy","allocators","barrier","barrier","barrier","barriers","base","buffer","collection_required","complete_trace","config","constraints","constraints","controller_collector_context","create_worker_local","gc_header_bits","gc_header_words","gc_init","generate_gc_trace","generational","get_allocator_mapping","get_pages_used","get_tls","global","immix","init","marksweep","max_non_los_copy_bytes","max_non_los_default_alloc_bytes","may_trace_duplicate_edges","mmtk","moves_objects","mutator_context","mutator_tls","needs_concurrent_workers","needs_forward_after_liveness","needs_linear_scan","needs_log_bit","nogc","num_specialized_scans","pageprotect","plan","plan_constraints","post_alloc","prepare","prepare","prepare","process_edge","process_interior_edge","process_node","process_root_edge","process_roots","release","release","release","release","report_delayed_root_edge","schedule_collection","semispace","trace_object","tracelocal","transitive_closure","will_not_move_in_current_collection","worker","Barrier","BarrierSelector","NoBarrier","NoBarrier","Object","ObjectBarrier","ObjectRememberingBarrier","Slot","WriteTarget","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","enqueue_node","eq","flush","flush","flush","fmt","from","from","from","from","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","log_object","meta","mmtk","modbuf","new","post_write_barrier","post_write_barrier","post_write_barrier","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","ControllerCollectorContext","RequestSync","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clear_request","default","from","from","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","last_request_count","new","phantom","request","request_condvar","request_count","request_flag","request_sync","run","scheduler","try_from","try_from","try_into","try_into","type_id","type_id","wait_for_request","ACTIVE_BARRIER","FULL_NURSERY_GC","GEN_CONSTRAINTS","NO_SLOW","copying","gc_work","generational_post_copy","global","immix","new_generational_global_metadata_specs","gc_work","global","mutator","GenCopyCopyContext","GenCopyMatureProcessEdges","alloc_copy","as_any","as_any","as_any_mut","as_any_mut","base","borrow","borrow","borrow_mut","borrow_mut","constraints","deref","deref_mut","from","from","gencopy","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","new","new","plan","plan","post_copy","prepare","release","ss","trace_object","try_from","try_from","try_into","try_into","type_id","type_id","ALLOC_SS","GENCOPY_CONSTRAINTS","GenCopy","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","constraints","copyspace0","copyspace1","create_worker_local","from","fromspace","gc_init","gen","generational","get_allocator_mapping","get_collection_reserve","get_pages_avail","get_pages_used","hi","into","into_any","into_any_arc","into_any_rc","is_current_gc_nursery","new","prepare","release","request_full_heap_collection","schedule_collection","tospace","try_from","try_into","type_id","ALLOCATOR_MAPPING","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_gencopy_mutator","deref","from","gencopy_mutator_prepare","gencopy_mutator_release","initialize","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","GenNurseryProcessEdges","as_any","as_any_mut","base","borrow","borrow_mut","deref","deref_mut","from","gen","into","into_any","into_any_rc","new","process_edge","trace_object","try_from","try_into","type_id","Gen","as_any","as_any_mut","borrow","borrow_mut","collection_required","common","from","gc_full_heap","gc_init","get_collection_reserve","get_pages_used","into","into_any","into_any_arc","into_any_rc","is_current_gc_nursery","new","next_gc_full_heap","nursery","prepare","release","request_full_heap_collection","set_next_gc_full_heap","should_next_gc_be_full_heap","trace_object_full_heap","trace_object_nursery","try_from","try_into","type_id","verify_side_metadata_sanity","gc_work","global","mutator","GenImmixCopyContext","GenImmixMatureProcessEdges","alloc_copy","as_any","as_any","as_any_mut","as_any_mut","base","borrow","borrow","borrow_mut","borrow_mut","constraints","copy","defrag_copy","deref","deref_mut","flush","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","new","new","plan","plan","post_copy","prepare","release","trace_object","try_from","try_from","try_into","try_into","type_id","type_id","GENIMMIX_CONSTRAINTS","GenImmix","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","constraints","create_worker_local","from","gc_init","gen","generational","get_allocator_mapping","get_collection_reserve","get_pages_avail","get_pages_used","immix","into","into_any","into_any_arc","into_any_rc","is_current_gc_nursery","last_gc_was_defrag","new","prepare","release","request_full_heap_collection","schedule_collection","try_from","try_into","type_id","ALLOCATOR_MAPPING","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_genimmix_mutator","deref","from","genimmix_mutator_prepare","genimmix_mutator_release","initialize","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","0","AllocationSemantics","BasePlan","Code","CommonPlan","CopyContext","Default","GcPrepare","GcProper","GcStatus","Immortal","LargeCode","Los","NoCopy","NotInGC","Plan","ReadOnly","VM","VM","alloc_copy","alloc_copy","allocation_bytes","allocation_success","analysis_manager","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","base","base","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","code_lo_space","code_space","collection_required","collection_required","common","common","common","constraints","constraints","constraints","control_collector_context","copy_check_allocator","copy_check_allocator","copy_check_allocator","create_mutator","create_plan","create_vm_space","create_worker_local","cur_collection_attempts","determine_collection_attempts","downcast","downcast_mut","downcast_rc","downcast_ref","emergency_collection","enter_sanity","enter_sanity","enter_sanity","eq","eq","fmt","force_full_heap_collection","from","from","from","from","from","from_function","from_usize","gc_in_progress","gc_in_progress_proper","gc_init","gc_init","gc_init","gc_status","generational","generational","generational","get_allocator_mapping","get_collection_reserve","get_collection_reserve","get_collection_reserve","get_free_pages","get_free_pages","get_free_pages","get_immortal","get_los","get_pages_avail","get_pages_avail","get_pages_avail","get_pages_reserved","get_pages_reserved","get_pages_reserved","get_pages_used","get_pages_used","get_pages_used","get_total_pages","get_total_pages","get_total_pages","handle_user_collection_request","handle_user_collection_request","handle_user_collection_request","heap","immortal","increase_allocation_bytes_by","init","init","init","initialized","inside_sanity","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is","is_current_gc_nursery","is_current_gc_nursery","is_current_gc_nursery","is_emergency_collection","is_emergency_collection","is_emergency_collection","is_in_sanity","is_in_sanity","is_in_sanity","is_initialized","is_initialized","is_initialized","is_internal_triggered_collection","is_user_triggered_collection","last_collection_was_exhaustive","last_stress_pages","leave_sanity","leave_sanity","leave_sanity","log_poll","log_poll","log_poll","los","max_collection_attempts","mmapper","mmapper","mmapper","mmapper","modify_check","modify_check","modify_check","mutator_iterator_lock","new","new","new","options","options","options","options","poll","poll","poll","post_copy","post_copy","post_copy","prepare","prepare","prepare","prepare","prepare","release","release","release","release","release","reset_collection_trigger","reset_collection_trigger","reset_collection_trigger","ro_space","scanned_stacks","schedule_collection","schedule_common","set_collection_kind","set_gc_status","slice","slice_mut","stacks_prepared","stacks_prepared","stacks_prepared","stats","stress_test_gc_required","to_owned","to_usize","trace_object","trace_object","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","user_triggered_collection","verify_side_metadata_sanity","verify_side_metadata_sanity","vm_map","vm_space","gc_work","global","mutator","Defrag","Fast","ImmixCopyContext","ImmixProcessEdges","TraceKind","alloc_copy","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","constraints","deref","deref_mut","eq","fast_process_edge","fast_trace_object","flush","fmt","from","from","from","immix","immix","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","new","plan","post_copy","prepare","process_edges","release","to_owned","trace_object","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ALLOC_IMMIX","IMMIX_CONSTRAINTS","Immix","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","common","constraints","create_worker_local","from","gc_init","get_allocator_mapping","get_collection_reserve","get_pages_used","immix_space","into","into_any","into_any_arc","into_any_rc","new","prepare","release","schedule_collection","try_from","try_into","type_id","ALLOCATOR_MAPPING","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_immix_mutator","deref","from","immix_mutator_prepare","immix_mutator_release","initialize","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","gc_work","global","mutator","MSProcessEdges","MSSweepChunk","MSSweepChunks","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunk","deref","deref_mut","do_work","do_work","from","from","from","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","ms","new","new","plan","plan","trace_object","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","MS_CONSTRAINTS","MarkSweep","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","common","constraints","create_worker_local","from","gc_init","get_allocator_mapping","get_collection_reserve","get_pages_used","into","into_any","into_any_arc","into_any_rc","ms","ms_space","new","prepare","release","schedule_collection","try_from","try_into","type_id","ALLOCATOR_MAPPING","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_ms_mutator","deref","from","initialize","into","into_any","into_any_arc","into_any_rc","ms_mutator_prepare","ms_mutator_release","try_from","try_into","type_id","Mutator","MutatorConfig","MutatorContext","SpaceMapping","alloc","alloc","allocator_mapping","allocators","as_any","as_any","as_any_mut","as_any_mut","barrier","barrier","barrier","borrow","borrow","borrow_mut","borrow_mut","config","flush","flush","flush","flush_remembered_sets","flush_remembered_sets","flush_remembered_sets","from","from","get_tls","get_tls","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","mutator_tls","plan","post_alloc","post_alloc","prepare","prepare","prepare_func","record_modified_node","record_modified_node","record_modified_node","release","release","release_func","space_mapping","try_from","try_from","try_into","try_into","type_id","type_id","global","mutator","NOGC_CONSTRAINTS","NoGC","as_any","as_any_mut","base","base","borrow","borrow_mut","collection_required","constraints","create_worker_local","from","gc_init","get_allocator_mapping","get_pages_used","handle_user_collection_request","into","into_any","into_any_arc","into_any_rc","new","nogc_space","prepare","release","schedule_collection","try_from","try_into","type_id","ALLOCATOR_MAPPING","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_nogc_mutator","deref","from","initialize","into","into_any","into_any_arc","into_any_rc","nogc_mutator_noop","try_from","try_into","type_id","gc_work","global","mutator","PPProcessEdges","as_any","as_any_mut","base","borrow","borrow_mut","deref","deref_mut","from","into","into_any","into_any_rc","new","plan","trace_object","try_from","try_into","type_id","CONSTRAINTS","PageProtect","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","common","constraints","create_worker_local","from","gc_init","get_allocator_mapping","get_collection_reserve","get_pages_used","into","into_any","into_any_arc","into_any_rc","new","prepare","release","schedule_collection","space","try_from","try_into","type_id","ALLOCATOR_MAPPING","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_pp_mutator","deref","from","initialize","into","into_any","into_any_arc","into_any_rc","pp_mutator_prepare","pp_mutator_release","try_from","try_into","type_id","MAX_NON_LOS_ALLOC_BYTES_COPYING_PLAN","PlanConstraints","as_any","as_any_mut","barrier","borrow","borrow_mut","default","from","gc_header_bits","gc_header_words","generate_gc_trace","into","into_any","into_any_arc","into_any_rc","max_non_los_copy_bytes","max_non_los_default_alloc_bytes","may_trace_duplicate_edges","moves_objects","needs_concurrent_workers","needs_forward_after_liveness","needs_linear_scan","needs_log_bit","num_specialized_scans","try_from","try_into","type_id","gc_work","global","mutator","SSCopyContext","SSProcessEdges","alloc_copy","as_any","as_any","as_any_mut","as_any_mut","base","borrow","borrow","borrow_mut","borrow_mut","constraints","deref","deref_mut","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","new","new","plan","plan","post_copy","prepare","release","ss","ss","trace_object","try_from","try_from","try_into","try_into","type_id","type_id","ALLOC_SS","SS_CONSTRAINTS","SemiSpace","as_any","as_any_mut","base","borrow","borrow_mut","collection_required","common","common","constraints","copyspace0","copyspace1","create_worker_local","from","fromspace","gc_init","get_allocator_mapping","get_collection_reserve","get_pages_used","hi","into","into_any","into_any_arc","into_any_rc","new","prepare","release","schedule_collection","tospace","try_from","try_into","type_id","ALLOCATOR_MAPPING","__private_field","as_any","as_any_mut","borrow","borrow_mut","create_ss_mutator","deref","from","initialize","into","into_any","into_any_arc","into_any_rc","ss_mutator_prepare","ss_mutator_release","try_from","try_into","type_id","TraceLocal","complete_trace","get_forwarded_reference","get_forwarded_reference","get_forwarded_reference","get_forwarded_referent","get_forwarded_referent","get_forwarded_referent","overwrite_reference_during_trace","overwrite_reference_during_trace","overwrite_reference_during_trace","process_interior_edge","process_root_edge","process_roots","release","report_delayed_root_edge","retain_referent","retain_referent","retain_referent","trace_object","will_not_move_in_current_collection","ObjectsClosure","TransitiveClosure","as_any","as_any_mut","borrow","borrow_mut","buffer","drop","from","into","into_any","into_any_arc","into_any_rc","mmtk","new","process_edge","process_edge","process_node","process_node","try_from","try_into","type_id","worker","copyspace","immix","immortalspace","largeobjectspace","lockfreeimmortalspace","mallocspace","space","CopySpace","META_DATA_PAGES_PER_REGION","as_any","as_any_mut","as_sft","as_space","borrow","borrow_mut","common","common","from","from_space","from_space","get_forwarded_object","get_page_resource","init","initialize_object_metadata","into","into_any","into_any_arc","into_any_rc","is_live","is_movable","is_sane","name","new","pr","prepare","protect","release","release_multiple_pages","reset_alloc_bit","trace_object","try_from","try_into","type_id","unprotect","BLOCK_ONLY","DEFRAG","IMMIX_LOCAL_SIDE_METADATA_BASE_OFFSET","LAST_LOCAL_SIDE_METADATA","MARK_LINE_AT_SCAN_TIME","MAX_IMMIX_OBJECT_SIZE","block","chunk","defrag","immixspace","line","validate","validate_features","0","BYTES","Block","BlockList","BlockState","DEFRAG_SOURCE_STATE","DEFRAG_STATE_TABLE","LINES","LOG_BYTES","LOG_LINES","LOG_PAGES","MARK_MARKED","MARK_TABLE","MARK_UNALLOCATED","MARK_UNMARKED","Marked","PAGES","Reusable","Unallocated","Unmarked","align","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","backward","backward_checked","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunk","clone","clone","clone_into","clone_into","containing","default","deinit","end","eq","eq","fmt","fmt","forward","forward_checked","from","from","from","from","from","get_blocks","get_holes","get_state","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_defrag_source","is_reusable","len","line_mark_table","lines","ne","ne","partial_cmp","pop","push","queue","reset","set_as_defrag_source","set_holes","set_state","start","steps_between","sweep","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unavailable_lines","0","ALLOC_TABLE","Allocated","BLOCKS","BYTES","Chunk","ChunkMap","ChunkState","Free","LOG_BLOCKS","LOG_BYTES","SweepChunk","ZERO","align","all_chunks","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","backward","backward_checked","blocks","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","chunk_range","clone","clone","clone_into","clone_into","do_work","eq","eq","fmt","fmt","forward","forward_checked","from","from","from","from","from","generate_sweep_tasks","generate_tasks","get","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","ne","new","partial_cmp","set","space","start","steps_between","sweep","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","DEFRAG_HEADROOM_PERCENT","DEFRAG_LINE_REUSE_RATIO","DEFRAG_STRESS","Defrag","Histogram","MIN_SPILL_THRESHOLD","NUM_BINS","add_completed_mark_histogram","as_any","as_any_mut","available_clean_pages_for_defrag","borrow","borrow_mut","decide_whether_to_defrag","default","defrag_headroom_pages","defrag_space_exhausted","defrag_spill_threshold","establish_defrag_spill_threshold","fmt","from","get_available_lines","in_defrag","in_defrag_collection","into","into_any","into_any_arc","into_any_rc","mark_histograms","new_histogram","notify_new_clean_block","prepare","release","space_exhausted","try_from","try_into","type_id","ImmixSpace","MARKED_STATE","PrepareBlockState","ScanObjectsAndMarkLines","UNMARKED_STATE","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_sft","as_space","attempt_mark","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","chunk","chunk_map","common","common","concurrent","decide_whether_to_defrag","defrag","defrag_headroom_pages","defrag_threshold","do_work","do_work","fast_trace_object","from","from","from","get_clean_block","get_next_available_lines","get_page_resource","get_reusable_block","immix_space","in_defrag","init","initialize_object_metadata","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_live","is_marked","is_movable","is_pinned","is_sane","line_mark_state","line_unavail_state","mark_lines","mark_state","name","new","new","pr","prepare","release","release_block","release_multiple_pages","reset_object_mark","reusable_blocks","scheduler","scheduler","side_metadata_specs","space","trace_object","trace_object_with_opportunistic_copy","trace_object_without_moving","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","BYTES","LOG_BYTES","Line","MARK_TABLE","MAX_MARK_STATE","RESET_MARK_STATE","align","as_any","as_any_mut","backward","backward_checked","block","borrow","borrow_mut","clone","clone_into","eq","fmt","forward","forward_checked","from","from","get_index_within_block","into","into_any","into_any_arc","into_any_rc","is_aligned","is_marked","mark","mark_lines_for_object","ne","partial_cmp","start","steps_between","to_owned","try_from","try_into","type_id","GC_MARK_BIT_MASK","ImmortalSpace","META_DATA_PAGES_PER_REGION","as_any","as_any_mut","as_sft","as_space","borrow","borrow_mut","common","common","from","get_page_resource","init","initialize_object_metadata","into","into_any","into_any_arc","into_any_rc","is_live","is_movable","is_reachable","is_sane","mark_state","name","new","pr","prepare","release","release_multiple_pages","test_and_mark","trace_object","try_from","try_into","type_id","LOS_BIT_MASK","LargeObjectSpace","MARK_BIT","NURSERY_BIT","PAGE_MASK","allocate_pages","as_any","as_any_mut","as_sft","as_space","borrow","borrow_mut","clear_nursery","common","common","from","get_page_resource","get_super_page","in_nursery_gc","init","initialize_object_metadata","into","into_any","into_any_arc","into_any_rc","is_in_nursery","is_live","is_movable","is_sane","mark_state","name","new","pr","prepare","release","release_multiple_pages","sweep_large_pages","test_and_mark","test_mark_bit","trace_object","treadmill","try_from","try_into","type_id","LockFreeImmortalSpace","acquire","as_any","as_any_mut","as_sft","as_space","borrow","borrow_mut","common","cursor","from","get_name","get_page_resource","init","initialize_object_metadata","into","into_any","into_any_arc","into_any_rc","is_live","is_movable","is_sane","limit","metadata","name","name","new","phantom","release_multiple_pages","reserved_pages","slow_path_zeroing","try_from","try_into","type_id","verify_side_metadata_sanity","global","metadata","ASSERT_ALLOCATION","MallocSpace","active_bytes","active_mem","address_in_space","alloc","as_any","as_any_mut","as_sft","as_space","borrow","borrow_mut","chunk_addr_max","chunk_addr_min","common","completed_work_packets","free","from","get_name","get_page_resource","in_space","init","initialize_object_metadata","into","into_any","into_any_arc","into_any_rc","is_live","is_movable","is_sane","map_metadata_and_update_bound","metadata","name","new","phantom","release_multiple_pages","reserved_pages","sweep_chunk","sweep_chunk_mark_in_header","sweep_chunk_mark_on_side","total_work_packets","trace_object","try_from","try_into","type_id","verify_side_metadata_sanity","work_live_bytes","ACTIVE_CHUNK_METADATA_SPEC","ACTIVE_PAGE_METADATA_SPEC","CHUNK_MAP_LOCK","CHUNK_METADATA","MAX_METADATA_ADDRESS","__private_field","__private_field","__private_field","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","from","from","from","initialize","initialize","initialize","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_alloced","is_alloced_by_malloc","is_alloced_object","is_alloced_object_unsafe","is_chunk_mapped","is_chunk_marked","is_chunk_marked_unsafe","is_marked","is_meta_space_mapped","is_meta_space_mapped_for_address","is_page_marked","is_page_marked_unsafe","load128","map_active_chunk_metadata","map_meta_space","set_alloc_bit","set_chunk_mark","set_mark_bit","set_page_mark","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unset_alloc_bit","unset_alloc_bit_unsafe","unset_chunk_mark_unsafe","unset_mark_bit","unset_page_mark_unsafe","CommonSpace","DEBUG_SFT","DEBUG_SPACE","EMPTY_SFT_NAME","EMPTY_SPACE_SFT","EmptySpaceSFT","SFT","SFTMap","Space","SpaceOptions","acquire","address_in_space","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_sft","as_space","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","common","contiguous","default","descriptor","downcast","downcast_mut","downcast_rc","downcast_ref","ensure_mapped","extent","fmt","from","from","from","from","get","get_forwarded_object","get_frac_available","get_name","get_page_resource","grow_space","head_discontiguous_region","immortal","immortal","in_space","init","init","initialize_object_metadata","initialize_object_metadata","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is","is_in_space","is_live","is_live","is_movable","is_movable","is_reachable","is_sane","is_sane","log_update","metadata","mmapper","movable","movable","mut_self","name","name","name","name","needs_log_bit","needs_log_bit","new","new","p","print_vm_map","release_multiple_pages","required_chunks","reserved_pages","set","sft","side_metadata_specs","start","trace_sft_map","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","verify_side_metadata_sanity","vm_map","vm_map","vmrequest","vmrequest","zeroed","zeroed","0","Closure","CoordinatorWork","Final","GCWork","GCWorker","Prepare","ProcessEdgesWork","RefClosure","RefForwarding","Release","ScanStackRoot","Unconstrained","VM","WorkBucketStage","do_work","gc_work","is_coordinator","local","local_work_bucket","local_work_buffer","mmtk","new","ordinal","parked","scheduler","scheduler","sender","stat","stat","tls","trace_object","work","work_bucket","work_counter","worker","0","0","0","0","0","0","0","CAPACITY","CAPACITY","EndOfGC","OVERWRITE_REFERENCE","OVERWRITE_REFERENCE","Prepare","PrepareCollector","PrepareMutator","ProcessEdgesBase","ProcessEdgesWork","ProcessModBuf","ProcessWeakRefs","Release","ReleaseCollector","ReleaseMutator","SCAN_OBJECTS_IMMEDIATELY","SCAN_OBJECTS_IMMEDIATELY","ScanObjects","ScanStackRoot","ScanStackRoots","ScanVMSpecificRoots","ScheduleCollection","StopMutators","VM","_p","_p","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","concurrent","default","default","default","default","default","default","default","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","do_work","edges","flush","flush","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","meta","mmtk","mmtk","modbuf","mutator","mutator","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_scan_work","new_scan_work","nodes","phantom","phantom","plan","plan","plan","pop_nodes","process_edge","process_edge","process_edges","process_edges","process_node","process_node","set_worker","trace_object","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","worker","worker","AllWorkerParked","BucketDrained","CoordinatorMessage","GCWorkScheduler","Work","add_coordinator_work","all_buckets_empty","are_buckets_drained","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","channel","closure_end","coordinator_work","coordinator_worker","deactivate_all","enable_stat","finalizer","from","from","initialize","initialize_worker","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","mmtk","new","notify_mutators_paused","num_workers","on_closure_end","poll","poll_slow","pop_scheduable_work","process_coordinator_work","reset_state","set_finalizer","set_initializer","startup","statistics","try_from","try_from","try_into","try_into","type_id","type_id","update_buckets","wait_for_completion","work_buckets","worker_group","worker_group","worker_monitor","0","SchedulerStat","WorkStat","WorkerLocalStat","_phantom","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","counter_set","default","default","enable","enabled","end_of_work","from","from","from","harness_stat","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_enabled","measure_work","merge","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","work_counters","work_counters","work_counts","work_counts","work_id_name_map","work_id_name_map","work_name","CoordinatorWork","GCWork","do_work","do_work_with_stat","do_work_with_stat","0","Closure","DEFAULT_PRIORITY","Final","Prepare","PrioritizedWork","RefClosure","RefForwarding","Release","Unconstrained","WorkBucket","WorkBucketStage","WorkUID","activate","active","add","add_with_priority","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bulk_add","bulk_add_with_priority","can_open","clone","clone","clone_into","clone_into","cmp","deactivate","eq","eq","eq","fmt","from","from","from","from","from_function","from_usize","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_activated","is_drained","is_empty","monitor","ne","new","new","new","notify_all_workers","notify_one_worker","partial_cmp","poll","priority","queue","set_open_condition","slice","slice_mut","to_owned","to_owned","to_usize","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","work","work_uid","WorkCounter","WorkCounterBase","WorkCounterClone","WorkDuration","as_any","as_any","as_any_mut","as_any_mut","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_box","clone_into","clone_into","default","fmt","fmt","from","from","get_base","get_base","get_base_mut","get_base_mut","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","max","merge","merge_inplace","merge_val","min","name","name","new","running","start","start","start_value","stop","stop","to_owned","to_owned","total","try_from","try_from","try_into","try_into","type_id","type_id","GCWorker","GCWorkerLocal","GCWorkerLocalPtr","LOCALLY_CACHED_WORKS","UNINITIALIZED","WorkerGroup","add_work","all_parked","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_type","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","data","do_work","flush","from","from","from","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_coordinator","is_coordinator","is_parked","local","local","local_work_bucket","local_work_buffer","mmtk","new","new","new","ordinal","parked","parked_workers","run","scheduler","scheduler","sender","set_local","spawn_workers","stat","tls","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","worker_count","workers","SynchronizedCounter","address","alloc","alloc_bit","analysis","constants","conversions","count","edge_logger","finalizable_processor","generic_freelist","heap","int_array_freelist","logger","malloc","memory","metadata","object_forwarding","opaque_pointer","options","raw_memory_freelist","reference_processor","rust_util","sanity","statistics","synchronized_counter","treadmill","0","0","Address","ByteOffset","ByteSize","MAX","ObjectReference","ZERO","add","add","add","add_assign","add_assign","align_down","align_up","as_any","as_any","as_any_mut","as_any_mut","as_usize","atomic_load","atomic_store","bitand","bitand","bitor","bitor","borrow","borrow","borrow_mut","borrow_mut","chunk_index","clone","clone","clone_into","clone_into","cmp","compare_exchange","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_mut_ptr","from_ptr","from_ref","from_usize","get_extent","get_forwarded_object","get_offset","hash","hash","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_aligned_to","is_live","is_mapped","is_mapped","is_movable","is_null","is_reachable","is_sane","is_zero","load","max","ne","ne","partial_cmp","partial_cmp","saturating_sub","shift","shl","shr","store","sub","sub","sub","sub_assign","to_address","to_mut_ptr","to_object_reference","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","zero","Allocator","AllocatorSelector","BumpAllocator","BumpPointer","Immix","LargeObject","LargeObjectAllocator","Malloc","MallocAllocator","alloc","alloc_slow_once","allocator","allocators","bumpallocator","cursor","dump_linear_scan","embedded_meta_data","fill_alignment_gap","get_plan","get_space","get_tls","immix_allocator","large_object_allocator","limit","linear_scan","malloc_allocator","plan","plan","plan","space","space","space","tls","tls","tls","0","0","0","0","Allocator","align_allocation","align_allocation_no_fill","alloc","alloc_slow","alloc_slow","alloc_slow_inline","alloc_slow_inline","alloc_slow_once","downcast","downcast_mut","downcast_rc","downcast_ref","fill_alignment_gap","get_maximum_aligned_size","get_plan","get_space","get_tls","is","AllocatorSelector","Allocators","BumpPointer","Immix","LargeObject","MAX_BUMP_ALLOCATORS","MAX_IMMIX_ALLOCATORS","MAX_LARGE_OBJECT_ALLOCATORS","MAX_MALLOC_ALLOCATORS","Malloc","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","bump_pointer","clone","clone_into","fmt","from","from","get_allocator","get_allocator_mut","immix","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","large_object","malloc","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","BLOCK_MASK","BLOCK_SIZE","BYTES_IN_PAGE","BumpAllocator","acquire_block","alloc","alloc_slow_once","alloc_slow_once_stress_test","as_any","as_any_mut","borrow","borrow_mut","cursor","from","get_plan","get_space","get_tls","into","into_any","into_any_arc","into_any_rc","limit","new","plan","rebind","reset","set_limit","space","tls","try_from","try_into","type_id","DumpLinearScan","as_any","as_any_mut","borrow","borrow_mut","from","into","into_any","into_any_arc","into_any_rc","scan","try_from","try_into","type_id","BYTES_IN_REGION","LOG_BYTES_IN_REGION","LOG_PAGES_IN_REGION","PAGES_IN_REGION","REGION_MASK","get_metadata_base","get_metadata_offset","ImmixAllocator","acquire_recyclable_block","acquire_recyclable_lines","alloc","alloc_slow_hot","alloc_slow_once","as_any","as_any_mut","borrow","borrow_mut","copy","cursor","from","get_plan","get_space","get_tls","hot","immix_space","into","into_any","into_any_arc","into_any_rc","large_cursor","large_limit","limit","line","new","overflow_alloc","plan","request_for_large","reset","space","tls","try_from","try_into","type_id","LargeObjectAllocator","alloc","alloc_slow","alloc_slow_once","as_any","as_any_mut","borrow","borrow_mut","from","get_plan","get_space","get_tls","into","into_any","into_any_arc","into_any_rc","new","plan","space","tls","try_from","try_into","type_id","LinearScan","scan","MallocAllocator","alloc","alloc_slow_once","as_any","as_any_mut","borrow","borrow_mut","from","get_plan","get_space","get_tls","into","into_any","into_any_arc","into_any_rc","new","plan","space","tls","try_from","try_into","type_id","ALLOC_SIDE_METADATA_ADDR","ALLOC_SIDE_METADATA_SPEC","bzero_alloc_bit","is_alloced","is_alloced_object","is_alloced_object_unsafe","map_meta_space_for_chunk","set_alloc_bit","unset_addr_alloc_bit","unset_alloc_bit","unset_alloc_bit_unsafe","AnalysisManager","GcHookWork","RtAnalysis","add_analysis_routine","alloc_hook","alloc_hook","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","default","default","do_work","from","from","gc_count","gc_hook","gc_hook","initialize_routines","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","obj_num","obj_size","routines","set_running","try_from","try_from","try_into","try_into","type_id","type_id","GcCounter","as_any","as_any_mut","borrow","borrow_mut","counter","from","gc_hook","into","into_any","into_any_arc","into_any_rc","new","running","set_running","try_from","try_into","type_id","ObjectCounter","alloc_hook","as_any","as_any_mut","borrow","borrow_mut","counter","from","into","into_any","into_any_arc","into_any_rc","new","running","set_running","try_from","try_into","type_id","PerSizeClassObjectCounter","alloc_hook","as_any","as_any_mut","borrow","borrow_mut","default","from","into","into_any","into_any_arc","into_any_rc","new","new_ctr","running","set_running","size_class","size_classes","try_from","try_into","type_id","ARRAY_ELEMENT","BITS_IN_ADDRESS","BITS_IN_BYTE","BITS_IN_CHAR","BITS_IN_INT","BITS_IN_LONG","BITS_IN_PAGE","BITS_IN_SHORT","BITS_IN_WORD","BYTES_IN_ADDRESS","BYTES_IN_BYTE","BYTES_IN_CHAR","BYTES_IN_INT","BYTES_IN_KBYTE","BYTES_IN_LONG","BYTES_IN_MBYTE","BYTES_IN_PAGE","BYTES_IN_SHORT","BYTES_IN_WORD","CARD_MASK","CARD_META_PAGES_PER_REGION","DEFAULT_STRESS_FACTOR","INSTANCE_FIELD","LAZY_SWEEP","LOG_BITS_IN_ADDRESS","LOG_BITS_IN_BYTE","LOG_BITS_IN_CHAR","LOG_BITS_IN_INT","LOG_BITS_IN_LONG","LOG_BITS_IN_PAGE","LOG_BITS_IN_SHORT","LOG_BITS_IN_WORD","LOG_BYTES_IN_ADDRESS","LOG_BYTES_IN_ADDRESS_SPACE","LOG_BYTES_IN_BYTE","LOG_BYTES_IN_CHAR","LOG_BYTES_IN_INT","LOG_BYTES_IN_KBYTE","LOG_BYTES_IN_LONG","LOG_BYTES_IN_MBYTE","LOG_BYTES_IN_PAGE","LOG_BYTES_IN_SHORT","LOG_BYTES_IN_WORD","LOG_CARD_BYTES","LOG_CARD_GRAIN","LOG_CARD_META_BYTES","LOG_CARD_META_PAGES","LOG_CARD_META_SIZE","LOG_CARD_UNITS","LOG_MIN_OBJECT_SIZE","MAX_INT","MIN_INT","MIN_OBJECT_SIZE","SUPPORT_CARD_SCANNING","address_to_chunk_index","bytes_to_chunks_up","bytes_to_pages","bytes_to_pages_up","chunk_align_down","chunk_align_up","chunk_index_to_address","is_address_aligned","is_page_aligned","mmap_chunk_align_down","mmap_chunk_align_up","page_align_down","pages_to_bytes","raw_align_down","raw_align_up","raw_is_aligned","EDGE_LOG","__private_field","as_any","as_any_mut","borrow","borrow_mut","deref","from","initialize","into","into_any","into_any_arc","into_any_rc","log_edge","reset","should_check_duplicate_edges","try_from","try_into","type_id","0","0","FinalizableProcessor","Finalization","ForwardFinalization","add","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","candidates","default","default","default","do_work","do_work","forward","from","from","from","get_forwarded_finalizable","get_ready_object","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","new","new","nursery_index","ready_for_finalize","return_for_finalize","scan","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","COALESC_MASK","FAILURE","FREE_MASK","GenericFreeList","MAX_HEADS","MAX_UNITS","MULTI_MASK","NEXT_MASK","PREV_MASK","SIZE_MASK","TOTAL_BITS","UNIT_BITS","__alloc","__coalesce","__remove_from_free","__split","add_to_free","alloc","alloc_from_unit","clear_uncoalescable","free","get_entry","get_free","get_hi_entry","get_left","get_lo_entry","get_next","get_prev","get_right","get_size","head","heads","initialize_heap","is_coalescable","is_free","is_multi","set_entry","set_free","set_hi_entry","set_lo_entry","set_next","set_prev","set_sentinel","set_size","set_uncoalescable","size","accounting","freelistpageresource","heap_meta","layout","monotonepageresource","pageresource","space_descriptor","vmrequest","PageAccounting","as_any","as_any_mut","borrow","borrow_mut","clear_reserved","commit","committed","default","from","get_committed_pages","get_reserved_pages","into","into_any","into_any_arc","into_any_rc","new","release","reserve","reserve_and_commit","reserved","reset","try_from","try_into","type_id","CommonFreeListPageResource","FreeListPageResource","FreeListPageResourceSync","UNINITIALIZED_WATER_MARK","_p","adjust_for_metadata","alloc_pages","allocate_contiguous_chunks","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","common","common","common_flpr","common_mut","deref","deref_mut","free_contiguous_chunk","free_list","from","from","from","get_start","highwater_mark","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","meta_data_pages_per_region","mprotect","munprotect","new_contiguous","new_discontiguous","pages_currently_on_freelist","protect_memory_on_release","release_free_chunks","release_pages","reserve_metadata","resize_freelist","start","sync","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HeapMeta","as_any","as_any_mut","borrow","borrow_mut","from","get_discontig_end","get_discontig_start","get_total_pages","heap_cursor","heap_limit","into","into_any","into_any_arc","into_any_rc","new","reserve","total_pages","try_from","try_into","type_id","fragmented_mapper","heap_layout","heap_parameters","map","map64","mmapper","vm_layout_constants","FragmentedMapper","HASH_MASK","LOG_MAPPABLE_BYTES","LOG_MAX_SLABS","LOG_MMAP_CHUNKS_PER_SLAB","LOG_MMAP_SLAB_BYTES","LOG_SLAB_TABLE_SIZE","MAX_SLABS","MMAP_NUM_CHUNKS","MMAP_SLAB_EXTENT","MMAP_SLAB_MASK","SENTINEL","SLAB_TABLE_SIZE","Slab","as_any","as_any_mut","borrow","borrow_mut","chunk_index","chunk_index_to_address","commit_free_slab","default","eagerly_mmap_all_spaces","ensure_mapped","fmt","free_slab_index","free_slabs","from","get_or_allocate_slab_table","get_or_optionally_allocate_slab_table","hash","into","into_any","into_any_arc","into_any_rc","is_mapped_address","lock","mark_as_mapped","mut_self","new","new_slab","protect","quarantine_address_range","slab_align_down","slab_limit","slab_map","slab_table","slab_table","slab_table_for","try_from","try_into","type_id","Mmapper","VMMap","LOG_MAX_SPACES","LOG_SPACE_SIZE_64","MAX_SPACES","FreeList","Map","add_to_cumulative_committed_pages","address_for_chunk_index","allocate_contiguous_chunks","boot","create_freelist","create_parent_freelist","finalize_static_space_map","free_all_chunks","free_contiguous_chunks","get_chunk_index","get_contiguous_region_chunks","get_contiguous_region_size","get_descriptor_for_address","get_discontig_freelist_pr_ordinal","get_next_contiguous_region","insert","is_finalized","new","Map64","NON_MAP_FRACTION","add_to_cumulative_committed_pages","allocate_contiguous_chunks","as_any","as_any_mut","base_address","boot","borrow","borrow_mut","create_freelist","create_parent_freelist","cumulative_committed_pages","default","descriptor_map","finalize_static_space_map","finalized","fl_map","fl_page_resources","free_all_chunks","free_contiguous_chunks","from","get_contiguous_region_chunks","get_contiguous_region_size","get_descriptor_for_address","get_discontig_freelist_pr_ordinal","get_next_contiguous_region","high_water","insert","into","into_any","into_any_arc","into_any_rc","is_finalized","is_space_start","mut_self","new","space_index","try_from","try_into","type_id","MapState","Mapped","Mmapper","Protected","Quarantined","Unmapped","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","eagerly_mmap_all_spaces","ensure_mapped","eq","fmt","from","into","into_any","into_any_arc","into_any_rc","is_mapped_address","mark_as_mapped","protect","quarantine_address_range","to_owned","transition_to_mapped","transition_to_protected","transition_to_quarantined","try_from","try_into","type_id","AVAILABLE_BYTES","AVAILABLE_END","AVAILABLE_START","BYTES_IN_CHUNK","HEAP_END","HEAP_START","LOG_ADDRESS_SPACE","LOG_BYTES_IN_CHUNK","LOG_MAX_CHUNKS","LOG_MMAP_CHUNK_BYTES","LOG_PAGES_IN_SPACE64","LOG_SPACE_EXTENT","MAX_CHUNKS","MAX_SPACE_EXTENT","MMAP_CHUNK_BYTES","PAGES_IN_CHUNK","PAGES_IN_SPACE64","SPACE_MASK_64","SPACE_SHIFT_64","SPACE_SIZE_64","VM_SPACE_SIZE","Contiguous","Discontiguous","MonotonePageResource","MonotonePageResourceConditional","MonotonePageResourceSync","_p","adjust_for_metadata","alloc_pages","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","common","common","common_mut","conditional","current_chunk","cursor","cursor","from","from","from","get_current_chunk","get_region_start","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","log_chunk_fields","meta_data_pages_per_region","move_to_next_chunk","new_contiguous","new_discontiguous","release_pages","release_pages_extent","reserve_pages","reset","sentinel","sync","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","start","zeroing_cursor","zeroing_sentinel","CommonPageResource","PRAllocFail","PRAllocResult","PageResource","accounting","adjust_for_metadata","alloc_pages","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear_request","commit_pages","committed_pages","common","common_mut","concurrent_zeroing","contiguous","from","from","from","get_head_discontiguous_region","get_new_pages","grow_discontiguous_space","growable","head_discontiguous_region","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","new_chunk","pages","release_all_chunks","release_discontiguous_chunks","reserve_pages","reserved_pages","skip_concurrent_zeroing","start","trigger_concurrent_zeroing","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_zeroing_approach","vm_map","vm_map","0","BASE_EXPONENT","DISCONTIGUOUS_SPACE_INDEX","DISCONTIG_INDEX_INCREMENT","EXPONENT_BITS","EXPONENT_SHIFT","INDEX_MASK","INDEX_SHIFT","MANTISSA_BITS","MANTISSA_SHIFT","SIZE_BITS","SIZE_SHIFT","SpaceDescriptor","TYPE_BITS","TYPE_CONTIGUOUS","TYPE_CONTIGUOUS_HI","TYPE_MASK","TYPE_SHARED","UNINITIALIZED","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","create_descriptor","create_descriptor_from_heap_range","eq","fmt","from","get_extent","get_index","get_start","into","into_any","into_any_arc","into_any_rc","is_contiguous","is_contiguous_hi","is_empty","ne","to_owned","try_from","try_into","type_id","Discontiguous","Extent","Fixed","Fraction","VMRequest","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","common64bit","discontiguous","fixed_extent","fixed_size","fmt","fraction","from","high_fixed_size","into","into_any","into_any_arc","into_any_rc","is_discontiguous","to_owned","try_from","try_into","type_id","extent","extent","frac","start","top","top","top","IntArrayFreeList","as_any","as_any_mut","borrow","borrow_mut","fmt","from","from_parent","get_entry","head","head","heads","heads","into","into_any","into_any_arc","into_any_rc","new","parent","resize_freelist","set_entry","table","table","table_mut","try_from","try_into","type_id","try_init","calloc","free","malloc_usable_size","dzmmap","dzmmap_noreplace","get_process_memory_maps","handle_mmap_error","mmap_fixed","mmap_noreserve","mprotect","munmap","munprotect","panic_if_unmapped","result_is_mapped","wrap_libc_call","zero","InHeader","MetadataSpec","OnSide","compare_exchange_metadata","fetch_add_metadata","fetch_sub_metadata","global","header_metadata","load_metadata","log_bit","side_metadata","store_metadata","0","0","InHeader","MetadataSpec","OnSide","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","compare_exchange_metadata","extract_side_metadata","extract_side_spec","fetch_add_metadata","fetch_sub_metadata","fmt","from","into","into_any","into_any_arc","into_any_rc","is_on_side","load_metadata","store_metadata","to_owned","try_from","try_into","type_id","0","0","BITS_IN_U32","BIT_IN_U16","HeaderMetadataSpec","LOG_BITS_IN_U16","LOG_BITS_IN_U32","as_any","as_any_mut","bit_offset","borrow","borrow_mut","clone","clone_into","compare_exchange_metadata","eq","fetch_add_metadata","fetch_sub_metadata","fmt","from","hash","into","into_any","into_any_arc","into_any_rc","load_metadata","ne","num_of_bits","store_metadata","to_owned","try_from","try_into","type_id","ALLOC_SIDE_METADATA_ADDR","GLOBAL_SIDE_METADATA_BASE_ADDRESS","GLOBAL_SIDE_METADATA_VM_BASE_ADDRESS","GLOBAL_SIDE_METADATA_VM_BASE_OFFSET","LOCAL_SIDE_METADATA_VM_BASE_OFFSET","LOG_MAX_GLOBAL_SIDE_METADATA_SIZE","MetadataByteArrayRef","SideMetadataContext","SideMetadataOffset","SideMetadataSanity","SideMetadataSpec","addr","bzero_metadata","compare_exchange_atomic","constants","data","ensure_metadata_is_mapped","fetch_add_atomic","fetch_sub_atomic","global","global","heap_range_start","helpers","is_global","load","load_atomic","local","log_bytes_in_region","log_num_of_bits","metadata_address_range_size","name","offset","rel_offset","sanity","side_metadata_tests","spec","specs_sanity_map","store","store_atomic","ALLOC_SIDE_METADATA_ADDR","GLOBAL_SIDE_METADATA_BASE_ADDRESS","GLOBAL_SIDE_METADATA_BASE_OFFSET","GLOBAL_SIDE_METADATA_VM_BASE_ADDRESS","GLOBAL_SIDE_METADATA_VM_BASE_OFFSET","LOCAL_SIDE_METADATA_BASE_ADDRESS","LOCAL_SIDE_METADATA_BASE_OFFSET","LOCAL_SIDE_METADATA_VM_BASE_OFFSET","LOG_GLOBAL_SIDE_METADATA_WORST_CASE_RATIO","LOG_LOCAL_SIDE_METADATA_WORST_CASE_RATIO","LOG_MAX_GLOBAL_SIDE_METADATA_SIZE","MetadataByteArrayRef","SideMetadataContext","SideMetadataOffset","SideMetadataSpec","addr","addr","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bzero_metadata","calculate_reserved_pages","clone","clone","clone_into","clone_into","compare_exchange_atomic","data","ensure_metadata_is_mapped","eq","eq","fetch_add_atomic","fetch_sub_atomic","fmt","from","from","from","from","get","get_absolute_offset","get_local_specs","get_rel_offset","global","hash","hash","heap_range_start","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_absolute_offset","is_global","is_rel_offset","layout_after","len","load","load_atomic","local","log_bytes_in_region","log_num_of_bits","map_metadata_internal","name","ne","new","new_global_specs","offset","rel","rel_offset","reset","spec","store","store_atomic","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_map_metadata_address_range","try_map_metadata_space","type_id","type_id","type_id","type_id","addr_rshift","address_to_contiguous_meta_address","address_to_meta_address","meta_byte_lshift","meta_byte_mask","metadata_address_range_size","try_mmap_contiguous_metadata_space","Add","CONTENT_SANITY_MAP","GLOBAL_META_NAME","MathOp","SANITY_LOCK","SideMetadataSanity","Sub","__private_field","__private_field","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","do_math","from","from","from","from","get_all_specs","initialize","initialize","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","specs_sanity_map","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify_add","verify_bzero","verify_global_specs","verify_global_specs_total_size","verify_load","verify_local_specs","verify_local_specs_size","verify_metadata_context","verify_no_overlap_contiguous","verify_store","verify_sub","BEING_FORWARDED","FORWARDED","FORWARDING_BITS","FORWARDING_MASK","FORWARDING_NOT_TRIGGERED_YET","FORWARDING_POINTER_MASK","attempt_to_forward","clear_forwarding_bits","forward_object","forwarding_bits_offset_in_forwarding_pointer","get_forwarding_status","is_being_forwarded","is_forwarded","is_forwarded_or_being_forwarded","read_forwarding_pointer","spin_and_get_forwarded_object","state_is_being_forwarded","state_is_forwarded_or_being_forwarded","write_forwarding_pointer","0","0","0","0","OpaquePointer","UNINITIALIZED","UNINITIALIZED","VMMutatorThread","VMThread","VMWorkerThread","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_address","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_null","ne","ne","ne","ne","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","Adaptive","Concurrent","DEFAULT_MAX_NURSERY","DEFAULT_MIN_NURSERY","GenCopy","GenImmix","Immix","MarkSweep","NURSERY_SIZE","NoGC","Nontemporal","NurseryZeroingOptions","Options","PageProtect","PerfEventOptions","PlanSelector","SemiSpace","Temporal","UnsafeOptionsWrapper","always_valid","analysis_factor","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","eager_complete_sweep","eq","events","fmt","fmt","fmt","from","from","from","from","from","from_str","from_str","from_str","full_heap_system_gc","ignore_system_g_c","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","max_nursery","min_nursery","ne","new","no_finalizer","no_reference_types","nursery_zeroing","options","parse_perf_events","phase_perf_events","plan","process","set_from_camelcase_str","set_from_str","stress_factor","threads","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","use_return_barrier","use_short_stack_scans","variable_size_heap","vm_space_size","work_perf_events","LOG_BYTES_IN_ENTRY","LOG_BYTES_IN_UNIT","LOG_ENTRY_BITS","RawMemoryFreeList","alloc","as_any","as_any_mut","base","borrow","borrow_mut","current_capacity","current_units","default_block_size","fmt","from","get_entry","get_limit","grain","grow_freelist","grow_list_by_blocks","head","head","heads","heads","high_water","into","into_any","into_any_arc","into_any_rc","limit","max_units","mmap","new","pages_per_block","raise_high_water","set_entry","size_in_pages","try_from","try_into","type_id","units_in_first_block","units_per_block","INITIAL_SIZE","PHANTOM","ReferenceProcessor","ReferenceProcessorSync","ReferenceProcessors","SOFT","Semantics","TRACE","TRACE_DETAIL","TRACE_FORWARD","TRACE_UNREACHABLE","WEAK","add_candidate","add_phantom_candidate","add_soft_candidate","add_weak_candidate","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","default","eq","fmt","forward","forward_refs","from","from","from","from","get","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","new","nursery_index","phantom","references","retain_referent","scan","scan_phantom_refs","scan_soft_refs","scan_weak_refs","semantics","soft","sync","sync","sync_mut","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unforwarded_references","weak","min_of_usize","memory_scan","sanity_checker","scan_region","SanityChecker","SanityGCProcessEdges","SanityPrepare","SanityRelease","ScheduleSanityGC","_p","_p","_p","_plan","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","base","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref_mut","do_work","do_work","do_work","from","from","from","from","from","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","new","new","new","new","plan","plan","refs","trace_object","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","counter","stats","Counter","Diffable","MonotoneNanoTime","Val","as_any","as_any_mut","borrow","borrow_mut","current_value","current_value","diff","diff","event_counter","from","implicitly_start","into","into_any","into_any_arc","into_any_rc","long_counter","merge_phases","name","phase_change","print_count","print_diff","print_diff","print_last","print_max","print_min","print_total","size_counter","start","stop","try_from","try_into","type_id","EventCounter","as_any","as_any_mut","borrow","borrow_mut","count","current_count","from","implicitly_start","implicitly_start","inc","inc_by","into","into_any","into_any_arc","into_any_rc","merge_phases","merge_phases","name","name","new","phase_change","print_count","print_current","print_last","print_max","print_min","print_total","print_value","running","start","stats","stop","try_from","try_into","type_id","LongCounter","Timer","as_any","as_any_mut","borrow","borrow_mut","count","diffable","fmt","from","implicitly_start","implicitly_start","into","into_any","into_any_arc","into_any_rc","merge_phases","merge_phases","name","name","new","phase_change","print_count","print_last","print_max","print_min","print_total","print_value","running","start","start_value","stats","stop","total_count","try_from","try_into","type_id","SizeCounter","as_any","as_any_mut","borrow","borrow_mut","from","inc","into","into_any","into_any_arc","into_any_rc","new","print_current_units","print_current_volume","print_units","print_volume","start","stop","try_from","try_into","type_id","units","volume","MAX_COUNTERS","MAX_PHASES","SharedStats","Stats","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","counters","end_gc","exceeded_phase_limit","from","from","gathering_stats","gc_count","get_gathering_stats","get_gathering_stats","get_phase","get_phase","increment_phase","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","new_event_counter","new_size_counter","new_timer","phase","print_column_names","print_stats","set_gathering_stats","shared","start_all","start_gc","stop_all","stop_all_counters","total_time","try_from","try_from","try_into","try_into","type_id","type_id","SynchronizedCounter","as_any","as_any_mut","borrow","borrow_mut","count","from","increment","into","into_any","into_any_arc","into_any_rc","new","peek","reset","try_from","try_into","type_id","TreadMill","add_to_treadmill","alloc_nursery","as_any","as_any_mut","borrow","borrow_mut","collect","collect_nursery","collect_nursery","copy","default","flip","fmt","from","from_space","from_space_empty","into","into_any","into_any_arc","into_any_rc","new","nursery_empty","to_space","to_space_empty","try_from","try_into","type_id","0","0","0","0","0","ALIGNMENT_VALUE","ALLOC_END_ALIGNMENT","ActivePlan","Collection","LOG_MIN_ALIGNMENT","MAX_ALIGNMENT","MAX_ALIGNMENT_SHIFT","MIN_ALIGNMENT","ObjectModel","ReferenceGlue","Scanning","VMActivePlan","VMBinding","VMCollection","VMGlobalLogBitSpec","VMLocalForwardingBitsSpec","VMLocalForwardingPointerSpec","VMLocalLOSMarkNurserySpec","VMLocalMarkBitSpec","VMObjectModel","VMReferenceGlue","VMScanning","active_plan","block_for_gc","collection","compare_exchange_metadata","copy","copy_to","dump_object","fetch_add_metadata","fetch_sub_metadata","get_current_size","get_next_mutator","get_reference_when_copied_to","get_referent","get_type_descriptor","global","is_mutator","load_metadata","mutator","notify_initial_thread_scan_complete","number_of_mutators","object_model","object_start_ref","prepare_mutator","process_reference","ref_to_address","reference_glue","reset_mutator_iterator","resume_mutators","scan_object","scan_objects","scan_thread_root","scan_thread_roots","scan_vm_specific_roots","scanning","set_referent","spawn_worker_thread","stop_all_mutators","store_metadata","supports_return_barrier","ActivePlan","SynchronizedMutatorIterator","_guard","as_any","as_any_mut","borrow","borrow_mut","from","get_next_mutator","global","into","into_any","into_any_arc","into_any_rc","into_iter","is_mutator","mutator","mutators","mutators","next","number_of_mutators","phantom","reset_mutator_iterator","start","try_from","try_into","type_id","COORDINATOR_ONLY_STW","COORDINATOR_ONLY_STW","Collection","block_for_gc","out_of_memory","out_of_memory","prepare_mutator","process_weak_refs","process_weak_refs","resume_mutators","schedule_finalization","schedule_finalization","spawn_worker_thread","stop_all_mutators","vm_release","vm_release","GLOBAL_LOG_BIT_SPEC","GLOBAL_LOG_BIT_SPEC","LOCAL_FORWARDING_BITS_SPEC","LOCAL_FORWARDING_BITS_SPEC","LOCAL_FORWARDING_POINTER_SPEC","LOCAL_FORWARDING_POINTER_SPEC","LOCAL_LOS_MARK_NURSERY_SPEC","LOCAL_LOS_MARK_NURSERY_SPEC","LOCAL_MARK_BIT_SPEC","LOCAL_MARK_BIT_SPEC","ObjectModel","compare_exchange_metadata","copy","copy_to","dump_object","fetch_add_metadata","fetch_sub_metadata","get_current_size","get_reference_when_copied_to","get_type_descriptor","load_metadata","object_start_ref","ref_to_address","specs","store_metadata","0","0","0","0","0","IS_GLOBAL","IS_GLOBAL","IS_GLOBAL","IS_GLOBAL","IS_GLOBAL","LOG_NUM_BITS","LOG_NUM_BITS","LOG_NUM_BITS","LOG_NUM_BITS","LOG_NUM_BITS","VMGlobalLogBitSpec","VMLocalForwardingBitsSpec","VMLocalForwardingPointerSpec","VMLocalLOSMarkNurserySpec","VMLocalMarkBitSpec","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_spec","as_spec","as_spec","as_spec","as_spec","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_vm_metadata_spec","deref","deref","deref","deref","deref","from","from","from","from","from","in_header","in_header","in_header","in_header","in_header","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","mark_as_unlogged","num_bits","num_bits","num_bits","num_bits","num_bits","side_after","side_after","side_after","side_after","side_after","side_first","side_first","side_first","side_first","side_first","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ReferenceGlue","clear_referent","clear_referent","get_referent","process_reference","set_referent","SCAN_MUTATORS_IN_SAFEPOINT","SCAN_MUTATORS_IN_SAFEPOINT","SINGLE_THREAD_MUTATOR_SCANNING","SINGLE_THREAD_MUTATOR_SCANNING","Scanning","notify_initial_thread_scan_complete","scan_object","scan_objects","scan_thread_root","scan_thread_roots","scan_vm_specific_roots","supports_return_barrier"],"q":["mmtk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::memory_manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::mmtk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::barriers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::barriers::WriteTarget","","mmtk::plan::controller_collector_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational","","","","","","","","","","mmtk::plan::generational::copying","","","mmtk::plan::generational::copying::gc_work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::copying::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::copying::mutator","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::gc_work","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::immix","","","mmtk::plan::generational::immix::gc_work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::immix::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::generational::immix::mutator","","","","","","","","","","","","","","","","","","","mmtk::plan::globalmmtk::plan::immix","","","mmtk::plan::immix::gc_work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::immix::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::immix::mutator","","","","","","","","","","","","","","","","","","","mmtk::plan::marksweep","","","mmtk::plan::marksweep::gc_work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::marksweep::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::marksweep::mutator","","","","","","","","","","","","","","","","","","","mmtk::plan::mutator_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::nogc","","mmtk::plan::nogc::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::nogc::mutator","","","","","","","","","","","","","","","","","","mmtk::plan::pageprotect","","","mmtk::plan::pageprotect::gc_work","","","","","","","","","","","","","","","","","","mmtk::plan::pageprotect::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::pageprotect::mutator","","","","","","","","","","","","","","","","","","","mmtk::plan::plan_constraints","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::semispace","","","mmtk::plan::semispace::gc_work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::semispace::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::plan::semispace::mutator","","","","","","","","","","","","","","","","","","","mmtk::plan::tracelocal","","","","","","","","","","","","","","","","","","","","","mmtk::plan::transitive_closure","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy","","","","","","","mmtk::policy::copyspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immix","","","","","","","","","","","","","mmtk::policy::immix::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immix::block::BlockState","mmtk::policy::immix::chunk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immix::defrag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immix::immixspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immix::line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::immortalspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::largeobjectspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::lockfreeimmortalspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::mallocspace","","mmtk::policy::mallocspace::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::mallocspace::metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::policy::space","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::gc_workmmtk::scheduler::scheduler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::scheduler::CoordinatorMessage","mmtk::scheduler::stat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::work","","","","","mmtk::scheduler::work_bucket","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::work_counter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::scheduler::worker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::AllocatorSelector","","","","mmtk::util::alloc::allocator","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::allocators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::allocators::AllocatorSelector","","","","mmtk::util::alloc::bumpallocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::dump_linear_scan","","","","","","","","","","","","","","mmtk::util::alloc::embedded_meta_data","","","","","","","mmtk::util::alloc::immix_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::large_object_allocator","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc::linear_scan","","mmtk::util::alloc::malloc_allocator","","","","","","","","","","","","","","","","","","","","","","mmtk::util::alloc_bit","","","","","","","","","","","mmtk::util::analysis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::analysis::gc_count","","","","","","","","","","","","","","","","","","mmtk::util::analysis::obj_num","","","","","","","","","","","","","","","","","","mmtk::util::analysis::obj_size","","","","","","","","","","","","","","","","","","","","","mmtk::util::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::conversions","","","","","","","","","","","","","","","","mmtk::util::edge_logger","","","","","","","","","","","","","","","","","","","mmtk::util::finalizable_processor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::generic_freelist","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap","","","","","","","","mmtk::util::heap::accounting","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::freelistpageresource","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::heap_meta","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::layout","","","","","","","mmtk::util::heap::layout::fragmented_mapper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::layout::heap_layout","","mmtk::util::heap::layout::heap_parameters","","","mmtk::util::heap::layout::map","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::layout::map64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::layout::mmapper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::layout::vm_layout_constants","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::monotonepageresource","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::monotonepageresource::MonotonePageResourceConditional","","","mmtk::util::heap::pageresource","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::space_descriptor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::vmrequest","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::heap::vmrequest::VMRequest","","","","","","","mmtk::util::int_array_freelist","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::logger","mmtk::util::malloc","","","mmtk::util::memory","","","","","","","","","","","","","mmtk::util::metadata","","","","","","","","","","","","mmtk::util::metadata::MetadataSpec","","mmtk::util::metadata::global","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::metadata::global::MetadataSpec","","mmtk::util::metadata::header_metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::metadata::side_metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::metadata::side_metadata::constants","","","","","","","","","","","mmtk::util::metadata::side_metadata::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::metadata::side_metadata::helpers","","","","","","","mmtk::util::metadata::side_metadata::sanity","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::object_forwarding","","","","","","","","","","","","","","","","","","","mmtk::util::opaque_pointer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::raw_memory_freelist","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::reference_processor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::rust_util","mmtk::util::sanity","","mmtk::util::sanity::memory_scan","mmtk::util::sanity::sanity_checker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::statistics","","mmtk::util::statistics::counter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::statistics::counter::event_counter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::statistics::counter::long_counter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::statistics::counter::size_counter","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::statistics::stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::util::synchronized_counter","","","","","","","","","","","","","","","","","","mmtk::util::treadmill","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm::active_plan","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm::collection","","","","","","","","","","","","","","","","mmtk::vm::object_model","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm::object_model::specs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mmtk::vm::reference_glue","","","","","","mmtk::vm::scanning","","","","","","","","","","",""],"d":["Allocation semantics that MMTk provides. Each allocation â€¦","BarrierSelector describes which barrier to use.","","A GC workerâ€™s context for copying GCs. Each GC plan â€¦","","","","","An MMTk instance. MMTk allows multiple instances to run â€¦","A mutator is a per-thread data structure that manages â€¦","Each GC plan should provide their implementation of a â€¦","","","A plan describes the global core functionality for all â€¦","","This trait and its global counterpart implement the core â€¦","This trait is the fundamental mechanism for performing a â€¦","","","","","","","","","This method controls the triggering of a GC. It is called â€¦","","","","","","","","","","","","","VM-to-MMTk interface: safe Rust APIs.","","The mutator thread that is bound with this Mutator struct.","","GC algorithms from the MMTk suite.","","","Memory policies that can be used for spaces.","","","","","","","","","","","","","","","","","","A general scheduler implementation. MMTk uses it to â€¦","","","Utilities used by other modules, including allocators, â€¦","MMTk-to-VM interface: the VMBinding trait.","","Register a finalizable object. MMTk will retain the â€¦","Add a reference to the list of phantom references.","Add a reference to the list of soft references.","Add a reference to the list of weak references.","Add a work packet to the given work bucket. Note that this â€¦","Bulk add a number of work packets to the given work â€¦","Allocate memory for an object. For performance reasons, a â€¦","Request MMTk to create a mutator for the given thread. For â€¦","Reclaim a mutator that is no longer needed.","Allow MMTk to trigger garbage collection. A VM should only â€¦","Flush the mutatorâ€™s local states.","Return free memory in bytes.","Initialize an MMTk instance. A VM should call this method â€¦","Return an AllocatorSelector for the given allocation â€¦","Get an object that is ready for finalization. After each â€¦","Trigger a garbage collection as requested by the user.","Generic hook to allow benchmarks to be harnessed. We do a â€¦","Generic hook to allow benchmarks to be harnessed. We stop â€¦","Is the object alive?","Is the address in the mapped memory? The runtime can use â€¦","Is the object in the mapped memory? The runtime can use â€¦","Return the ending address of the heap. <em>Note that currently </em>â€¦","Check that if a garbage collection is in progress and if â€¦","Get the number of workers. MMTk spawns worker threads for â€¦","Add a callback to be notified after the transitive closure â€¦","Perform post-allocation actions, usually initializing â€¦","Process MMTk run-time options.","Run the main loop for the GC controller thread. This â€¦","Run the main loop of a GC worker. This method does not â€¦","Return the starting address of the heap. <em>Note that </em>â€¦","Return the total memory in bytes.","Return used memory in bytes.","A global Mmapper for mmaping and protection of virtual â€¦","An MMTk instance. MMTk allows multiple instances to run â€¦","","A global VMMap that manages the mapping of spaces to â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocation semantics that MMTk provides. Each allocation â€¦","BarrierSelector describes which barrier to use.","","A GC workerâ€™s context for copying GCs. Each GC plan â€¦","","","","","","","","A mutator is a per-thread data structure that manages â€¦","Each GC plan should provide their implementation of a â€¦","","","","A transitive closure visitor to collect all the edges of â€¦","","A plan describes the global core functionality for all â€¦","This struct defines plan-specific constraints. Most of the â€¦","","","This trait and its global counterpart implement the core â€¦","This trait is the fundamental mechanism for performing a â€¦","","","","","","","","","Read/Write barrier implementations.","","","This method controls the triggering of a GC. It is called â€¦","","","","","The GC controller thread.","","","","","","","","","","The global part of a plan implementation.","","","Plan: marksweep (currently using malloc as its freelist â€¦","Size (in bytes) beyond which copied objects must be copied â€¦","Size (in bytes) beyond which new regular objects must be â€¦","Some plans may allow benign race for testing mark bit, and â€¦","","","Mutator context for each application thread.","The mutator thread that is bound with this Mutator struct.","","","","Does this plan use the log bit? See â€¦","Plan: nogc (allocation-only)","","Plan: pageprotect","","Plan-specific constraints.","","","","","","","","","","","","","","","","Plan: semispace","","Unsynchronized thread-local trace mechanism (superseded by â€¦","The fundamental mechanism for performing a transitive â€¦","","","","BarrierSelector describes which barrier to use.","","","","","","","For field writes in HotSpot, we cannot always get the â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attepmt to atomically log an object. Returns true if the â€¦","The metadata used for log bit. Though this allows taking â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Barrier overhead measurement:","Full heap collection as nursery GC.","Constraints for generational plans. Each generational plan â€¦","Force object barrier never enters the slow-path. If â€¦","Generational copying (GenCopy) Plan: generational copying","","Post copying operation for generational plans.","","Generational immix (GenImmix) Plan: generational immix","Create global side metadata specs for generational plans. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the number of pages avilable for allocation. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Process edges for a nursery GC. A generatinoal plan should â€¦","","","","","","","","","","","","","","","","","","","Common implementation for generational plans. Each â€¦","","","","","Check if we need a GC based on the nursery space usage. â€¦","The common plan.","","Is this GC full heap?","Initialize Gen. This should be called by the gc_init() API â€¦","Get pages reserved for the collection by a generational â€¦","Get pages used by a generational plan. A generational plan â€¦","","","","","Is the current GC a nursery GC?","","Is next GC full heap?","The nursery space. Its type depends on the actual plan.","Prepare Gen. This should be called by a single thread in â€¦","Release Gen. This should be called by a single thread in â€¦","Check if we should do a full heap GC. It returns true if â€¦","Set next_gc_full_heap to the given value.","Check a plan to see if the next GC should be a full heap â€¦","Trace objects for spaces in generational and common plans â€¦","Trace objects for spaces in generational and common plans â€¦","","","","Verify side metadata specs used in the spaces in Gen.","","","","Copy context for generational immix. We include two copy â€¦","ProcessEdges for a full heap GC for generational immix. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generational immix. This implements the functionality of a â€¦","","","","","","","","","","","","Generational plan, which includes a nursery space and â€¦","","","","Return the number of pages avilable for allocation. â€¦","","An immix space as the mature space.","","","","","","Whether the last GC was a defrag GC for the immix space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocation semantics that MMTk provides. Each allocation â€¦","BasePlan should contain all plan-related state and â€¦","","CommonPlan is for representing state and features used by â€¦","A GC workerâ€™s context for copying GCs. Each GC plan â€¦","","","","","","","","","","A plan describes the global core functionality for all â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This method controls the triggering of a GC. It is called â€¦","","","","","","","","","","","","","","","","","","Returns a boxed object from a boxed trait object if the â€¦","Returns a mutable reference to the object within the trait â€¦","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the â€¦","Returns a reference to the object within the trait object â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the trait object wraps an object of type â€¦","Is current GC only collecting objects allocated since last â€¦","Is current GC only collecting objects allocated since last â€¦","Is current GC only collecting objects allocated since last â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Immix copy allocator","","","","","","","","","","","","","","","","","","","","","","","Trace objects without evacuation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trace  and evacuate objects.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Simple work packet that just sweeps a single chunk","Work packet that generates sweep jobs for gc workers. Each â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A mutator is a per-thread data structure that manages â€¦","","Each GC plan should provide their implementation of a â€¦","","","","Mapping between allocation semantics and allocator selector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The mutator thread that is bound with this Mutator struct.","","","","","","Plan-specific code for mutator prepare. The VMWorkerThread â€¦","","","","","","Plan-specific code for mutator release. The VMWorkerThread â€¦","Mapping between allocator selector and spaces. Each pair â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Edge scanning work packet.","","","","","","","","","","","","","Use a static ref to the specific plan to avoid overhead â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a mutator instance. Every object is allocated to â€¦","","","","","","","","Prepare mutator. Do nothing.","Release mutator. Do nothing.","","","","","This struct defines plan-specific constraints. Most of the â€¦","","","","","","","","","","","","","","","Size (in bytes) beyond which copied objects must be copied â€¦","Size (in bytes) beyond which new regular objects must be â€¦","Some plans may allow benign race for testing mark bit, and â€¦","","","","","Does this plan use the log bit? See â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This trait and its global counterpart implement the core â€¦","","","","","","","","","","","","","","","","","","","","","A transitive closure visitor to collect all the edges of â€¦","This trait is the fundamental mechanism for performing a â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","This class defines and manages spaces.  Each policy is an â€¦","This type implements a simple copying space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mark/sweep memory for block-level only","Opportunistic copying","The start of immix side metadata is after the last â€¦","Immixâ€™s Last local side metadata. Used to calculate â€¦","Mark lines when scanning objects. Otherwise, do it at mark â€¦","The max object size for immix: half of a block","","","","","","","","","Bytes in block","Data structure to reference an immix block.","A non-block single-linked list to store blocks.","The block allocation state.","","Block defrag state table (side)","Lines in block","Log bytes in block","Log lines in block","Log pages in block","Private constant","Block mark table (side)","Private constant","Private constant","the block is allocated and marked.","Pages in block","the block is marked as reusable.","the block is not allocated.","the block is allocated but not marked.","Align the address to a block boundary.","","","","","","","result = block_address + count * block_size","result = block_address - count * block_size","","","","","","","Get the chunk containing the block.","","","","","Get the block containing the given address. The input â€¦","","Deinitalize a block before releasing.","Get block end address","","","","","result = block_address + count * block_size","result = block_address + count * block_size","","","Get the block from a given address. The address must be â€¦","","","Get an array of all reusable blocks stored in this â€¦","Get the number of holes.","Get block mark state.","Initialize a clean block after acquired from page-resource.","","","","","","","","","","","","","Test if the block is marked for defragmentation.","Test if the block is reuasable.","Get number of blocks in this list.","Get the address range of the blockâ€™s line mark table.","Get the range of lines within the block.","","","","Pop a block out of the list.","Add a block to the list.","","Clear the list.","Mark the block for defragmentation.","Record the number of holes in the block.","Set block mark state.","Get block start address","Get the number of blocks between the given two blocks.","Sweep this block. Return true if the block is swept.","","","","","","","","","","","","","","Chunk alloc table","The chunk is allocated.","Blocks in chunk","Bytes in chunk","Data structure to reference a MMTk 4 MB chunk.","A byte-map to record all the allocated chunks","Chunk allocation state","The chunk is not allocated.","Log blocks in chunk","Log bytes in chunk","Chunk sweeping work packet.","Chunk constant with zero address","Align the give address to the chunk boundary.","A range of all chunks in the heap.","","","","","","","","","result = chunk_address + count * block_size","result = chunk_address - count * block_size","Get a range of blocks within this chunk.","","","","","","","","","","","","","","","","","","","","result = chunk_address + count * block_size","result = chunk_address + count * block_size","","","","Get the chunk from a given address. The address must be â€¦","","Generate chunk sweep work packets.","Helper function to create per-chunk processing work â€¦","Get chunk state","","","","","","","","","","","","","","","","","","","","Set chunk state","","Get chunk start address","Get the number of chunks between the given two chunks.","Sweep this chunk.","","","","","","","","","","","","","","","","","","","","","","Report back a completed mark histogram","","","The number of remaining clean pages in defrag space.","","","Determine whether the current GC should do defragmentation.","","Get the number of defrag headroom pages.","Is defrag space exhausted?","A block with number of holes greater than this threshold â€¦","Calculate the defrag threshold.","","","Get the numebr of all the recyclable lines in all the â€¦","Check if the current GC is a defrag GC.","Is current GC a defrag GC?","","","","","A list of completed mark histograms reported by workers","Allocate a new local histogram.","Update available_clean_pages_for_defrag counter when a â€¦","Prepare work. Should be called in ImmixSpace::prepare.","Release work. Should be called in ImmixSpace::release.","Check if the defrag space is exhausted.","","","","","","A work packet to prepare each block for GC. Performs the â€¦","A work packet to scan the fields of each objects and mark â€¦","","","","","","","","","","Atomically mark an object.","","","","","","","","","Allocation status for all chunks in immix space","","","","check if the current GC should do defragmentation.","Defrag utilities","Get the number of defrag headroom pages.","","","","Trace and mark objects without evacuation.","","","","Allocate a clean block.","Hole searching.","","Pop a reusable block from the reusable block list.","","Check if current GC is a defrag GC.","","","","","","","","","","","","","","","","Check if an object is marked.","","Check if an object is pinned.","","Current line mark state","Line mark state in previous GC","Mark all the lines that the given object spans.","Object mark state","","","","","","Release for the immix space. This is called when a GC â€¦","Release a block.","","Clear object mark table","A list of all reusable blocks","Get work packet scheduler","Work packet scheduler","Get side metadata specs","","Trace and mark objects. If the current object is in defrag â€¦","Trace object and do evacuation if required.","Trace and mark objects without evacuation.","","","","","","","","","","","Bytes in block","Log bytes in block","Data structure to reference a line within an immix block.","Line mark table (side)","","","Align the give address to the line boundary.","","","result = line_address + count * block_size","result = line_address - count * block_size","Get the block containing the line.","","","","","","","result = line_address + count * block_size","result = line_address + count * block_size","","Get the line from a given address. The address must be â€¦","Get line index within its containing block.","","","","","Test if the given address is line-aligned","Test line mark state.","Mark the line. This will update the side line mark table.","Mark all lines the object is spanned to.","","","Get line start address","Get the number of lines between the given two lines.","","","","","","This type implements a simple immortal collection policy. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This type implements a policy for large objects. Each â€¦","","","","Allocate an object","","","","","","","Move a given object out of nursery","","","","","","","","","","","","","Check if a given object is in nursery","","","","","","","","","","","","","","","","","","","This type implements a lock free version of the immortal â€¦","","","","","","","","","Heap range start","","Get the name of the space","","","","","","","","","","","Heap range end","","","","","","","","Zero memory after slow-path allocation","","","","We have to override the default implementation because â€¦","! A marksweep space that allocates from malloc.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This sweep function is called when the mark bit sits in â€¦","This function is called when the mark bits sit on the side â€¦","","","","","","","","Metadata spec for the active chunk byte","Metadata spec for the active page byte","Lock to synchronize the mapping of side metadata for a â€¦","","Maximum metadata address for the â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if metadata is mapped for a range [addr, addr + â€¦","Check if metadata is mapped for a given address. We check â€¦","","","Load u128 bits of side metadata","Eagerly map the active chunk metadata surrounding â€¦","We map the active chunk metadata (if not previously â€¦","","","","","","","","","","","","","","","","","","","","Print debug info for SFT. Should be false when committed.","Print debug info for SFT. Should be false when committed.","","","","Space Function Table (SFT).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a boxed object from a boxed trait object if the â€¦","Returns a mutable reference to the object within the trait â€¦","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the â€¦","Returns a reference to the object within the trait object â€¦","Ensure this space is marked as mapped â€“ used when the â€¦","","","","","","","","Get forwarding pointer if the object is forwarded.","","","","This is called after we get result from page resources.  â€¦","","","","","","","Initialize object metadata (in the header, or in the side â€¦","","","","","","","","","","","","","","","","","","Returns true if the trait object wraps an object of type â€¦","","Is the object live, determined by the policy?","","Is the object movable, determined by the policy? E.g. the â€¦","","Is the object reachable, determined by the policy? Note: â€¦","Is the object sane? A policy should return false if there â€¦","","","","","","","","The space name","","","","This field equals to needs_log_bit in the plan constraints.","","","","","","","","","","","","","","","","","","","","","","","","","","Update SFT map for the given address range. It should be â€¦","Ensure that the current spaceâ€™s metadata context does â€¦","","","","","","","","","A special kind of work that will execute on the â€¦","","","","","Scan &amp; update a list of object slots","","","","","","","","","","","","","","","","","","","","","Statistics for work packets","","","","","","Counter for work packets","","","","","","","","","","","","","","The global GC Preparation Work This work packet invokes â€¦","The collector GC Preparation Work","The mutator GC Preparation Work","","Scan &amp; update a list of object slots","","Delegate to the VM binding for reference processing.","The global GC release Work This work packet invokes â€¦","The collector release Work","The mutator release Work","","","Scan &amp; update a list of object slots","","","","","Stop all mutators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Flush the nodes in ProcessEdgesBase, and create a â€¦","Flush the nodes in ProcessEdgesBase, and create a â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new scan work packet. If â€¦","Create a new scan work packet. If â€¦","","","","","","","Pop all nodes from nodes, and clear nodes to an empty â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A message channel to send new coordinator work and other â€¦","A callback to be fired after the <code>Closure</code> bucket is drained.","Work for the coordinator thread","","","","","","","","","","","","","","","","","","","","","Get a scheduable work. Called by workers","","","Execute coordinator work, in the controller thread","","","","","","","","","","","","Open buckets if their conditions are met","Drain the message queue and execute coordinator work. Only â€¦","","","workers","Condition Variable for worker synchronization","","Merge and print the work-packet level statistics from all â€¦","Describing a single work packet","Worker thread local counterpart of <code>SchedulerStat</code>","","","","","","","","","","","","","","","","","","","Stop all work counters for the work packet type of the â€¦","","","","Used during statistics printing at â€¦","","","","","","","","","","","","Measure the execution of a work packet by starting all â€¦","Merge work counters from different worker threads","","","","","","","","","","","","","Collect work counters from work threads. Two dimensional â€¦","","Count the number of work packets executed for different â€¦","","Map work packet type IDs to work packet names","Extract the work-packet name from the full type name. i.e. â€¦","A special kind of work that will execute on the â€¦","","","","","","","","","","","","","","","","","A unique work-packet id for each instance of work-packet","Enable the bucket","","Add a work packet to this bucket, with a default priority â€¦","Add a work packet to this bucket, with a given priority","","","","","","","","","","","","","","","","","","","","","","","","","Disable the bucket","","","","","","","","","","","","","","","","","","","","","","","","","","","Test if the bucket is drained","","","","","","","","","Get a work packet (with the greatest priority) from this â€¦","","A priority queue","","","","","","","","","","","","","","","","","","","","","","An abstraction of work counters","Common struct for different work counters","Make <code>WorkCounter</code> trait objects cloneable","Measure the durations of work packets","","","","","","","","","","","","Clone the object","","","","","","","","Return a reference to <code>WorkCounterBase</code>","","Return a mutatable reference to <code>WorkCounterBase</code>","","","","","","","","","","","Merge two <code>WorkCounterBase</code>, keep the semantics of the â€¦","Merge two <code>WorkCounterBase</code>, modify the current object in â€¦","Update the object based on a single value","","Name of counter","","","","Start the counter","","","Stop the counter","","","","","","","","","","","","Thread-local data for each worker thread.","This struct will be accessed during trace_object(), which â€¦","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An abstract of memory address and object reference.","Allocators","Alloc bit","An analysis framework for collecting data and profiling in â€¦","Constants used in MMTk","Calculation, conversion and rounding for memory related â€¦","","Logging edges to check duplicated edges in GC. This is a â€¦","Finalization implementation.","A very simple, generic malloc-free allocator","Heap implementation, including page resource, mmapper, etc.","Implementation of GenericFreeList by an int vector.","Logger initialization","Various malloc implementations (conditionally compiled by â€¦","Wrapper functions for memory syscalls such as mmap, â€¦","Metadata (OnSide or InHeader) implementation. This is a â€¦","Forwarding word in object copying.","Opaque pointers used in MMTk, e.g. VMThread.","MMTk command line options.","Implementation of GenericFreeList backed by raw memory, â€¦","Reference processing implementation.","Utilities funcitons for Rust","Sanity checker for GC.","Utils for collecting statistics.","","A treadmill implementation.","","","Address represents an arbitrary address. This is designed â€¦","offset in byte","size in bytes","","ObjectReference represents address for an object. Compared â€¦","","","","","","","aligns down the address to the given alignment","aligns up the address to the given alignment","","","","","converts the Address to a pointer-sized integer","atomic operation: load","atomic operation: store","","","","","","","","","returns the chunk index for this address","","","","","","atomic operation: compare and exchange usize","","","","","","","","","","","","","creates Address from a mutable pointer","creates Address from a pointer","","creates an arbitrary Address","","Get forwarding pointer if the object is forwarded.","","","","","","","","","","","","is this address aligned to the given alignment","Is the object live, determined by the policy?","return true if the referenced memory is mapped","","","is this object reference null reference?","Is the object reachable, determined by the policy? Note: â€¦","","is this address zero?","loads a value of type T from the address","creates an Address of (usize::MAX)","","","","","","shifts the address by N T-typed objects (returns addr + N â€¦","","","stores a value of type T to the address","","","","","converts the ObjectReference to an Address","converts the Address to a mutable pointer","converts the Address into an ObjectReference","","","converts the Address to a pointer","","","","","","","","","returns the ObjectReference","creates a null Address (0)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a boxed object from a boxed trait object if the â€¦","Returns a mutable reference to the object within the trait â€¦","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the â€¦","Returns a reference to the object within the trait object â€¦","","","","","","Returns true if the trait object wraps an object of type â€¦","","","","","","","","","","","","","","","","","","","","","","","","","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Immix allocator","Get a recyclable block from ImmixSpace.","Search for recyclable lines.","","Bump allocate small objects into recyclable lines (i.e. â€¦","Acquire a clean block from ImmixSpace for allocation.","","","","","Is this a copy allocator?","Bump pointer","","","","","<em>unused</em>","","","","","","Bump pointer for large objects","Limit for bump pointer for large objects","Limit for bump pointer","Hole-searching cursor","","Large-object (larger than a line) bump alloaction.","","Is the current request for large or small?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","Safety","","","This trait exposes hooks for developers to implement their â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Simple analysis routine that counts the number of â€¦","","","","","","","","","","","","","","","","","","Simple analysis routine that counts the number of objects â€¦","","","","","","","","","","","","","","","","","","This file implements an analysis routine that counts the â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Modes.","Lazy sweeping - controlled from here because â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert size in bytes to the number of pages (aligned up)","","","","","","","","","","","","","","","","","","","","","","","","","","Logs an edge. Panics if the edge was already logged.","Reset the edge logger by clearing the hash-set of edges. â€¦","Whether we should check duplicate edges. This depends on â€¦","","","","","","A special processor for Finalizable objects.","","","","","","","","","","","","","","","","Candidate objects that has finalizers with them","","","","","","","","","","","","","","","","","","","","","","","","","","","Index into candidates to record where we are up to in the â€¦","Objects that can be finalized. They are actually dead, but â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Free a previously allocated contiguous lump of units","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The struct is used for page usage. Both page resource and â€¦","","","","","Inform of clearing some reserved pages. This is used when â€¦","Inform of successfully committing a certain number of â€¦","The committed pages. This should be incremented when we â€¦","","","","","","","","","","Inform of releasing a certain number of pages. The number â€¦","Inform of reserving a certain number of pages. Usually â€¦","Inform of both reserving and committing a certain number â€¦","The reserved pages. This should be incremented when we are â€¦","Set both reserved and committed pages to zero. This is â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of pages to reserve at the start of every â€¦","Protect the memory","Unprotect the memory","","","","Protect memory on release, and unprotect on re-allocate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Maximum number of slabs, which determines the maximum â€¦","","","Parameters for the slab table.  The hash function requires â€¦","","","","","","","","","","","","@param slab Address of the slab @param addr Address within â€¦","","Take a free slab of chunks from the freeSlabs array, and â€¦","","","","","","","","","","","","","","","Return {@code true} if the given address has been mmapped","","","","","","","","@param addr an address @return the base address of the â€¦","@param addr an address @return the base address of the â€¦","","","","","","","","","","log_2 of the maximum number of spaces a Plan can support.","In a 64-bit addressing model, each space is the same size, â€¦","Maximum number of spaces a Plan can support.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","The mmap state of a mmap chunk.","The chunk is mapped by MMTk and is in use.","Generic mmap and protection functionality","The chunk is mapped and is also protected by MMTk.","The chunk is reserved for future use. MMTk reserved the â€¦","The chunk is unmapped and not managed by MMTk.","","","","","","","Given an address array describing the regions of virtual â€¦","Ensure that a range of pages is mmapped (or equivalent).  â€¦","","","","","","","","Is the page pointed to by this address mapped? Returns â€¦","Mark a number of pages as mapped, without making any â€¦","Mark a number of pages as inaccessible.","Quarantine/reserve address range. We mmap from the OS with â€¦","","Check the current MapState of the chunk, and transition â€¦","Check the current MapState of the chunk, and transition â€¦","Check the current MapState of the chunk, and transition â€¦","","","","Size of the address space available to the MMTk heap. ","Highest virtual address available for MMTk to manage.  The â€¦","Lowest virtual address available for MMTk to manage.  The â€¦","Coarsest unit of address space allocation. ","","","log_2 of the addressable virtual space ","log_2 of the coarsest unit of address space allocation.","log_2 of the maximum number of chunks we need to track.  â€¦","Granularity at which we map and unmap virtual address â€¦","log_2 of the number of pages in a 64-bit space ","An upper bound on the extent of any space in the current â€¦","Maximum number of chunks we need to track.  Only used in â€¦","An upper bound on the extent of any space in the current â€¦","","Coarsest unit of address space allocation, in pages ","The number of pages in a 64-bit space ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Base address of the current chunk of addresses ","Get highwater mark of current monotone space.","Pointer to the next block to be allocated. ","","","","","","","","","","","","","","","","","","","Number of pages to reserve at the start of every â€¦","","","","","","","Safety","The limit of the currently allocated address space. ","","","","","","","","","","","","Current frontier of zeroing, in a separate zeroing thread ","Current limit of zeroing.  If zeroingCursor &lt; â€¦","","","","","","","","","","","","","","","","","","","","","Commit pages to the page budget.  This is called after â€¦","","","","","","","","","","Allocate pages from this resource. Simply bump the cursor, â€¦","Extend the virtual memory associated with a particular â€¦","","","","","","","","","","","","","","","","","","","Release one or more contiguous chunks associated with a â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempt to init a env_logger for MMTk.","","","","Demand-zero mmap: This function mmaps the memory and â€¦","Demand-zero mmap (no replace): This function mmaps the â€¦","Get the memory maps for the process. The returned string â€¦","Properly handle errors from a mmap Result, including â€¦","","mmap with no swap space reserve: This function does not â€¦","","","","Checks if the memory has already been mapped. If not, we â€¦","","","","","This struct stores the specification of a metadata bit-set.","","A function to atomically compare-and-exchange the â€¦","A function to atomically perform an add operation on the â€¦","A function to atomically perform a subtract operation on â€¦","","","A function to load the specified metadataâ€™s content.","","","A function to store a value to the specified metadata.","","","","This struct stores the specification of a metadata bit-set.","","","","","","","","A function to atomically compare-and-exchange the â€¦","Given a slice of metadata specifications, returns a vector â€¦","Extract SideMetadataSpec from a MetadataSpec. Panics if â€¦","A function to atomically perform an add operation on the â€¦","A function to atomically perform a subtract operation on â€¦","","","","","","","","A function to load the specified metadataâ€™s content.","A function to store a value to the specified metadata.","","","","","","","","","This module provides a default implementation of the â€¦","","","","","","","","","","This function provides a default implementation for the â€¦","","This function provides a default implementation for the â€¦","This function provides a default implementation for the â€¦","","","","","","","","This function provides a default implementation for the â€¦","","","This function provides a default implementation for the â€¦","","","","","","","The base address for the global side metadata space â€¦","","The base address for the local side metadata space â€¦","","A byte array in side-metadata","This struct stores all the side metadata specs for a â€¦","A union of Address or relative offset (usize) used to â€¦","This struct includes a hashmap to store the metadata specs â€¦","This struct stores the specification of a side metadata â€¦","","Bulk-zero a specific metadata for a chunk.","","","","","","","","","","","","Non-atomic load of metadata.","","","Number of bytes of the region. E.g. 3 = 8 bytes, 12 = 4096 â€¦","Number of bits needed per region. E.g. 0 = 1 bit, 1 = 2 â€¦","","","","","","","","","Non-atomic store of metadata.","","","","","The base address for the global side metadata space â€¦","","","","The base address for the local side metadata space â€¦","","","","A byte array in side-metadata","This struct stores all the side metadata specs for a â€¦","A union of Address or relative offset (usize) used to â€¦","This struct stores the specification of a side metadata â€¦","","","","","","","","","","","","","","","","","","","Bulk-zero a specific metadata for a chunk.","Return the pages reserved for side metadata based on the â€¦","","","","","","","","","","","","","","","","","Get a byte from the metadata byte array at the given index.","","","","","","","","","","","","","","","","","","","","","","","","Is offset for this spec Address? (contiguous side metadata â€¦","","If offset for this spec relative? (chunked side metadata â€¦","Get an offset after a spec. This is used to layout another â€¦","Get the length of the array.","Non-atomic load of metadata.","","","Number of bytes of the region. E.g. 3 = 8 bytes, 12 = 4096 â€¦","Number of bits needed per region. E.g. 0 = 1 bit, 1 = 2 â€¦","The internal function to mmap metadata","","","Get a piece of metadata address range as a byte array.","","","","","","","Non-atomic store of metadata.","","","","","","","","","","","","Tries to map the required metadata address range, without â€¦","Tries to map the required metadata space and returns <code>true</code> â€¦","","","","","","Performs address translation in contiguous metadata spaces â€¦","Performs the translation of data address (<code>data_addr</code>) to â€¦","","","","Tries to mmap the metadata space (<code>spec</code>) for the specified â€¦","","This is a two-level hashmap to store the metadata content â€¦","An internal str used as a name for global side metadata â€¦","An internal enum to enhance code style for add/sub","","This struct includes a hashmap to store the metadata specs â€¦","","","","","","","","","","","","","","","","","","","","","","","A helper function encapsulating the common parts of â€¦","","","","","Returns all global or policy-specific specs based-on the â€¦","","","","","","","","","","","","","","","","","","","Creates a new SideMetadataSanity instance.","","","","","","","","","","","","","","Commits a fetch and add operation and ensures it returns â€¦","Commits a side metadata bulk zero operation. Panics if the â€¦","Checks whether a slice of global specifications fit within â€¦","Checks whether the input global specifications fit within â€¦","Ensures a side metadata load operation returns the correct â€¦","Verifies that all local side metadata specs: 1 - are not â€¦","(For 64-bits targets) Checks whether the input local â€¦","An internal method to ensure that a metadata context does â€¦","(For contiguous metadata) Checks whether two input â€¦","Commits a side metadata store operation. Panics if: 1 - â€¦","Commits a fetch and sub operation and ensures it returns â€¦","","","","","","","Attempt to become the worker thread who will forward the â€¦","Zero the forwarding bits of an object. This function is â€¦","Copy the object, mark it as forwarded and return a â€¦","(This function is only used internal to the <code>util</code> module)","Return the forwarding bits for a given <code>ObjectReference</code>.","","","","Read the forwarding pointer of an object. This function is â€¦","Spin-wait for the objectâ€™s forwarding to become complete â€¦","","","Write the forwarding pointer of an object. This function â€¦","","","","","","","","A VMMutatorThread is a VMThread that associates with a â€¦","A VMThread is an opaque pointer that can uniquely identify â€¦","A VMWorkerThread is a VMThread that is associates with a â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The default max nursery size. This can be set through â€¦","The default min nursery size. This can be set through â€¦","","","","","The default nursery space size.","","","","","","MMTk option for perf events","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","log2 of the number of bytes used by a free list entry (two â€¦","log2 of the number of bytes used by a free list unit ","log2 of the number of bits used by a free list entry (two â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Index into the references table for the start of the â€¦","","The table of reference objects for the current semantics","This method deals only with soft references. It retains â€¦","","","","","Semantics","","","","","","","","","","","","","","","","","In a MarkCompact (or similar) collector, we need to update â€¦","","Const funciton for min value of two usize numbers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Diffable object could be stateless (e.g. a timer that â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This file implements a simple event counter (counting â€¦","","","","","","","","","","Increment the event counter","Increment the event counter by provided value","","","","","","","","","","The phase has changed (from GC to mutator or mutator to â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increment the event counter by provided value","","","","","","Print current (mid-phase) units","Print (mid-phase) volume","Print units","Print volume","Start this counter","Stop this counter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A value to fill in alignment gaps. This value can be used â€¦","This value is used to assert if the cursor is reasonable â€¦","VM-specific methods for the current plan.","VM-specific methods for garbage collection.","Allowed minimal alignment.","Allowed maximum alignment in bytes.","Allowed maximum alignment as shift by min alignment.    ","Allowed minimal alignment in bytes.","VM-specific methods for object model.","VM-specific methods for reference processing.","VM-specific methods for scanning roots/objects.","","The <code>VMBinding</code> trait associates with each trait, and â€¦","","","","","","","","","","","Block the current thread for GC. This is called when an â€¦","","A function to atomically compare-and-exchange the â€¦","Copy an object and return the address of the new object. â€¦","Copy an object. This is required for delayed-copy â€¦","Dump debugging information for an object.","A function to atomically perform an add operation on the â€¦","A function to atomically perform a subtract operation on â€¦","Return the size used by an object.","Return the next mutator if there is any. This method â€¦","Return the reference that an object will be referred to â€¦","Get the referent from a reference.","Get the type descriptor for an object.","Return a reference to the current plan.","Return whether there is a mutator created and associated â€¦","A function to load the specified per-object metadataâ€™s â€¦","Return a <code>Mutator</code> reference for the thread.","MMTk calls this method at the first time during a â€¦","Return the total count of mutators.","","Return the lowest address of the storage associated with â€¦","Allow VM-specific behaviors for a mutator after all the â€¦","Process a reference with the current semantics and return â€¦","Return an address guaranteed to be inside the storage â€¦","","Reset the mutator iterator so that <code>get_next_mutator()</code> â€¦","Resume all the mutator threads, the opposite of the above. â€¦","Delegated scanning of a object, processing each pointer â€¦","Bulk scanning of objects, processing each pointer field â€¦","Scan one mutator for roots.","Scan all the mutators for roots.","Scan VM-specific roots. The creation of all root scan â€¦","","Set the referent in a reference.","Ask the VM to spawn a GC thread for MMTk. A GC thread may â€¦","Stop all the mutator threads. MMTk calls this method when â€¦","A function to store a value to the specified per-object â€¦","Return whether the VM supports return barriers. This is â€¦","VM-specific methods for the current plan.","","","","","","","","Return the next mutator if there is any. This method â€¦","Return a reference to the current plan.","","","","","","Return whether there is a mutator created and associated â€¦","Return a <code>Mutator</code> reference for the thread.","A utility method to provide a thread-safe mutator iterator â€¦","A utility method to provide a thread-safe mutator iterator â€¦","","Return the total count of mutators.","","Reset the mutator iterator so that <code>get_next_mutator()</code> â€¦","","","","","If true, only the coordinator thread can call â€¦","If true, only the coordinator thread can call â€¦","VM-specific methods for garbage collection.","Block the current thread for GC. This is called when an â€¦","Inform the VM for an out-of-memory error. The VM can â€¦","Inform the VM for an out-of-memory error. The VM can â€¦","Allow VM-specific behaviors for a mutator after all the â€¦","Delegate to the VM binding for reference processing.","Delegate to the VM binding for reference processing.","Resume all the mutator threads, the opposite of the above. â€¦","Inform the VM to schedule finalization threads.","Inform the VM to schedule finalization threads.","Ask the VM to spawn a GC thread for MMTk. A GC thread may â€¦","Stop all the mutator threads. MMTk calls this method when â€¦","Inform the VM to do its VM-specific release work at the â€¦","Inform the VM to do its VM-specific release work at the â€¦","The metadata specification of the global log bit. 1 bit. â€¦","The metadata specification of the global log bit. 1 bit. â€¦","The metadata specification for the forwarding status bits, â€¦","The metadata specification for the forwarding status bits, â€¦","The metadata specification for the forwarding pointer, â€¦","The metadata specification for the forwarding pointer, â€¦","The metadata specification for the mark-and-nursery bits, â€¦","The metadata specification for the mark-and-nursery bits, â€¦","The metadata specification for the mark bit, used by most â€¦","The metadata specification for the mark bit, used by most â€¦","VM-specific methods for object model.","A function to atomically compare-and-exchange the â€¦","Copy an object and return the address of the new object. â€¦","Copy an object. This is required for delayed-copy â€¦","Dump debugging information for an object.","A function to atomically perform an add operation on the â€¦","A function to atomically perform a subtract operation on â€¦","Return the size used by an object.","Return the reference that an object will be referred to â€¦","Get the type descriptor for an object.","A function to load the specified per-object metadataâ€™s â€¦","Return the lowest address of the storage associated with â€¦","Return an address guaranteed to be inside the storage â€¦","","A function to store a value to the specified per-object â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mark the log bit as unlogged (1 means unlogged)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","VM-specific methods for reference processing.","Weak and soft references always clear the referent before â€¦","Weak and soft references always clear the referent before â€¦","Get the referent from a reference.","Process a reference with the current semantics and return â€¦","Set the referent in a reference.","Scan stack roots after all mutators are paused.","Scan stack roots after all mutators are paused.","Scan all the mutators within a single work packet.","Scan all the mutators within a single work packet.","VM-specific methods for scanning roots/objects.","MMTk calls this method at the first time during a â€¦","Delegated scanning of a object, processing each pointer â€¦","Bulk scanning of objects, processing each pointer field â€¦","Scan one mutator for roots.","Scan all the mutators for roots.","Scan VM-specific roots. The creation of all root scan â€¦","Return whether the VM supports return barriers. This is â€¦"],"i":[0,0,1,0,1,1,1,1,0,0,0,2,2,0,1,0,0,3,4,5,3,6,5,6,4,4,7,6,3,4,4,8,4,4,4,5,3,8,0,0,6,8,0,8,6,0,5,3,4,5,9,7,9,7,7,8,3,4,5,7,7,8,4,0,8,7,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,12,8,10,11,12,8,10,11,12,8,10,11,12,8,10,11,12,8,10,11,12,8,8,10,11,12,8,8,8,10,11,12,8,8,10,11,12,8,10,11,12,10,11,12,8,10,11,12,8,8,8,8,8,8,8,10,11,12,8,10,11,12,8,10,11,12,0,0,1,0,1,0,0,1,1,1,0,0,0,0,2,2,0,0,0,0,1,0,0,0,3,4,5,3,6,5,6,13,0,4,14,4,7,6,3,4,0,4,13,13,4,13,0,4,4,5,0,0,3,0,13,13,13,14,13,0,6,13,13,13,13,0,13,0,6,0,5,3,4,5,9,7,9,7,7,3,4,5,7,7,4,0,7,0,0,7,14,0,0,0,2,15,2,0,15,0,15,16,17,2,15,16,17,2,15,16,17,2,15,16,17,2,2,2,17,2,18,16,17,2,15,16,17,2,15,16,17,2,15,16,17,2,15,16,17,2,15,16,17,2,17,17,17,17,17,18,16,17,2,15,16,17,2,15,16,17,2,15,16,17,2,19,20,0,0,21,22,21,22,21,22,21,22,22,22,21,22,22,21,22,21,22,21,22,21,22,21,22,22,22,22,21,22,22,22,22,21,22,21,22,21,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,24,23,24,24,23,24,23,24,23,24,24,23,24,24,23,23,23,24,23,24,23,23,24,23,24,23,24,23,23,23,23,24,23,24,23,24,23,24,0,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,26,0,26,26,0,0,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,29,29,30,29,30,30,29,30,29,30,29,29,29,30,30,30,29,30,29,29,29,30,29,30,29,29,30,29,30,29,30,29,29,29,30,29,30,29,30,29,30,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,0,32,32,0,0,32,32,32,32,32,32,32,32,33,0,0,1,0,0,1,34,34,0,1,1,1,0,34,0,1,3,4,3,33,35,35,35,33,35,36,34,1,33,35,36,34,1,4,36,33,35,36,34,1,33,35,36,34,1,1,1,35,35,4,35,4,4,4,3,4,33,35,3,3,3,0,0,0,4,35,35,4,4,4,4,35,4,4,4,34,1,1,35,33,35,36,34,1,1,1,35,35,4,35,36,35,4,4,4,4,4,4,4,4,4,4,36,36,4,4,4,4,4,4,4,35,36,4,4,4,4,4,4,35,36,35,3,33,33,35,35,33,35,36,34,1,33,35,36,34,1,33,35,36,34,1,33,35,36,34,1,4,4,4,4,4,4,4,4,4,4,4,4,4,35,35,35,35,4,4,4,4,4,4,36,35,4,4,4,35,4,4,4,35,33,35,36,4,4,4,35,4,4,4,3,3,3,3,4,33,35,36,3,4,33,35,36,4,4,4,35,35,4,36,35,35,1,1,35,36,35,35,35,1,1,35,36,33,35,36,34,1,33,35,36,34,1,33,35,36,34,1,35,35,36,35,35,0,0,0,37,37,0,0,0,38,38,39,37,38,39,37,39,38,39,37,38,39,37,37,37,38,39,39,37,39,39,39,37,38,39,37,39,38,38,38,38,39,37,38,39,37,38,37,38,39,37,38,39,39,38,38,39,38,37,39,38,39,37,38,39,37,38,39,37,0,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,0,41,41,0,0,41,41,41,41,41,41,41,41,0,0,0,0,0,0,42,43,44,42,43,44,42,42,43,44,42,43,44,43,42,42,43,44,42,43,44,42,43,44,42,43,44,43,44,42,43,44,43,42,44,42,44,42,42,43,44,42,43,44,42,43,44,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,46,46,46,46,46,0,46,46,46,46,46,46,46,0,0,46,46,46,0,0,0,0,5,6,47,6,47,6,47,6,5,6,6,47,6,47,6,6,5,5,5,5,5,5,47,6,5,6,47,6,47,6,47,6,47,6,6,6,5,6,5,6,47,5,5,5,5,6,47,47,47,6,47,6,47,6,0,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,0,49,49,49,49,49,49,49,0,49,49,49,0,0,0,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,52,52,52,52,52,0,52,52,52,52,52,52,52,0,0,52,52,52,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,53,53,54,53,54,54,53,54,53,54,53,54,54,53,54,53,53,53,54,53,54,53,53,54,53,54,53,54,53,53,53,54,53,54,53,54,53,54,53,54,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,56,56,56,56,56,0,56,56,56,56,56,56,56,0,0,56,56,56,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,9,14,9,14,14,14,14,14,0,0,0,0,0,0,0,0,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,0,0,0,0,0,0,0,0,0,0,0,0,58,58,0,0,0,58,58,58,58,58,58,59,58,59,59,59,58,59,59,59,58,59,58,60,59,58,60,58,58,59,58,60,59,58,60,58,59,58,59,58,58,60,58,58,59,58,59,58,58,58,59,59,58,58,60,60,58,58,58,59,58,60,59,58,60,59,58,60,59,58,60,58,59,60,58,58,59,58,58,60,60,60,60,58,58,58,58,58,58,59,58,59,58,60,59,58,60,59,58,60,61,62,63,64,62,62,0,0,0,64,62,62,0,62,62,63,63,65,62,64,63,65,62,64,62,62,62,63,65,62,64,63,65,62,64,65,63,62,64,62,64,65,62,64,62,64,62,62,63,65,62,62,64,63,63,63,63,65,62,64,63,65,62,64,63,65,62,64,63,65,62,64,62,63,62,63,65,62,62,62,62,64,63,65,62,64,63,65,62,64,63,65,62,64,66,66,66,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,67,0,0,67,67,68,69,67,68,69,67,67,67,67,68,69,67,68,69,69,68,67,67,67,69,67,67,67,68,68,69,67,67,68,69,67,67,67,67,69,67,67,67,67,68,69,67,68,69,67,68,69,67,68,69,67,67,67,67,67,67,67,67,67,67,67,69,67,67,67,67,67,68,67,67,67,67,68,67,67,67,67,68,69,67,68,69,67,68,69,70,70,70,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,0,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,0,0,72,72,72,72,72,72,72,72,72,72,72,72,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,0,0,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,0,0,0,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,76,77,75,76,77,75,76,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,78,79,80,81,82,79,80,81,82,78,78,79,80,81,82,79,80,81,82,82,78,79,82,79,78,78,78,78,78,79,81,79,80,81,82,82,83,0,78,78,78,79,79,80,78,78,79,83,81,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,78,82,83,81,83,81,83,83,81,82,79,79,79,80,82,83,81,79,80,79,80,79,82,79,78,78,0,78,82,82,80,79,82,79,80,81,82,79,80,81,82,79,80,81,82,82,78,79,79,79,80,79,80,84,85,0,85,0,0,85,0,85,85,85,0,85,86,0,87,0,88,88,88,88,88,86,88,88,0,88,88,0,88,88,86,0,0,0,0,84,89,90,91,92,93,94,86,86,0,86,86,0,0,0,0,0,0,0,0,0,0,86,86,0,0,0,0,0,0,86,95,96,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,101,101,89,90,91,103,92,93,94,97,95,98,96,99,84,101,102,89,90,91,103,92,93,94,100,86,86,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,97,95,98,96,99,101,102,89,90,91,103,92,93,94,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,102,100,100,102,98,99,86,95,98,96,99,100,101,102,89,90,91,92,93,94,86,86,100,101,102,100,95,96,100,86,86,86,86,86,86,100,86,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,97,95,98,96,99,84,100,101,102,89,90,91,103,92,93,94,100,100,104,104,0,0,104,105,105,105,104,105,104,105,104,105,104,105,105,105,105,105,105,105,105,104,105,105,105,104,105,104,105,105,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,104,105,104,105,104,105,105,105,105,105,105,105,106,0,0,0,107,108,107,109,108,107,109,108,107,109,108,107,109,107,107,109,107,107,108,108,107,109,109,108,107,109,108,107,109,108,108,107,109,107,107,109,108,107,109,108,107,109,108,107,109,108,108,107,109,107,109,107,109,109,0,0,87,87,87,110,85,111,85,85,0,85,85,85,85,0,0,0,111,111,111,111,112,111,110,85,112,111,110,85,112,111,110,85,112,111,110,85,111,111,111,110,85,110,85,112,111,112,110,85,85,112,111,110,85,85,85,112,111,110,85,112,111,110,85,110,85,112,111,110,85,111,111,111,111,110,112,111,110,111,111,112,111,112,111,111,85,85,110,85,85,112,111,110,85,112,111,110,85,112,111,110,85,111,112,112,0,0,0,0,113,114,113,114,114,113,114,113,114,113,114,115,113,114,113,113,114,113,114,116,114,116,114,113,114,113,114,113,114,113,114,113,113,113,113,113,116,114,114,114,116,114,114,116,114,113,114,113,113,114,113,114,113,114,0,0,0,0,117,0,88,118,88,118,117,88,118,117,117,88,118,117,88,118,117,117,117,117,88,88,88,118,117,119,88,88,118,117,88,118,117,88,118,117,88,118,117,88,88,88,88,88,88,88,88,88,118,117,88,88,118,88,88,88,88,88,118,88,88,117,88,118,117,88,118,117,117,88,118,117,118,118,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,122,0,0,0,121,0,121,121,121,121,121,121,121,121,121,122,121,122,121,121,121,121,121,121,121,121,122,121,122,121,121,122,121,122,121,121,121,122,121,121,121,121,122,122,122,122,121,122,121,121,121,121,121,122,121,121,122,121,122,121,122,121,122,121,122,121,122,121,122,122,122,122,122,121,121,121,121,122,121,122,121,121,121,121,121,121,121,121,121,122,121,121,121,122,121,121,122,121,122,121,122,121,122,122,121,0,0,0,123,123,123,0,123,0,124,124,0,0,0,125,0,0,0,124,124,124,0,0,125,0,0,125,126,127,125,126,127,125,126,127,128,129,130,131,0,0,0,124,124,124,124,124,124,124,124,124,124,0,0,124,124,124,124,0,0,123,123,123,0,0,0,0,123,132,123,132,123,132,123,132,123,132,123,123,123,132,123,132,132,132,132,123,132,123,132,123,132,123,132,132,132,123,132,123,132,123,132,123,128,129,130,131,0,0,0,0,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,0,133,133,133,133,133,133,133,133,133,133,133,133,133,0,0,0,0,0,0,0,0,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,0,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,0,135,0,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,137,136,138,136,138,136,138,136,138,136,138,136,138,138,136,0,137,136,136,138,136,138,136,138,136,138,136,136,0,0,136,137,138,136,138,136,138,136,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,0,141,141,141,141,141,141,141,141,141,141,141,141,0,141,141,141,141,141,141,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,142,142,142,142,142,142,142,142,142,142,142,0,0,0,142,142,142,143,144,0,0,0,145,145,143,144,145,143,144,145,143,144,145,143,144,145,145,143,144,143,144,145,145,143,144,145,145,145,143,144,145,143,144,145,143,144,145,143,144,145,143,144,145,145,145,145,145,143,144,145,143,144,145,143,144,0,0,0,0,0,0,0,0,0,0,0,0,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,0,0,0,0,0,0,0,0,0,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,0,0,0,0,148,148,148,148,149,148,150,149,148,150,149,148,150,149,148,150,148,148,148,148,148,148,148,149,149,148,150,149,150,149,148,150,149,148,150,149,148,150,149,148,150,148,148,148,148,148,150,148,148,148,148,149,149,148,149,148,150,149,148,150,149,148,150,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,0,0,0,0,0,153,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,0,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,0,155,0,155,155,155,155,155,155,155,155,155,156,156,155,155,155,155,155,155,155,156,156,156,156,155,155,155,155,155,155,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,0,0,0,158,158,158,158,159,157,158,159,157,158,159,157,158,159,157,158,158,158,159,159,158,159,158,159,157,158,158,158,159,157,158,159,157,158,159,157,158,159,157,158,158,158,158,158,158,158,158,158,159,158,158,159,157,158,159,157,158,159,157,160,160,160,0,0,0,0,161,162,162,163,164,161,163,164,161,163,164,161,163,164,161,162,162,162,162,162,162,161,163,164,161,161,162,161,161,161,163,164,161,163,164,161,163,164,161,163,164,161,161,163,163,161,161,162,162,162,163,162,163,164,161,163,164,161,163,164,161,162,162,161,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,166,166,166,166,0,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,167,168,169,167,167,168,169,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,171,0,0,0,0,0,0,0,0,0,172,173,171,0,171,171,171,171,171,171,171,0,0,171,0,0,171,171,171,171,171,171,171,0,0,171,171,171,171,172,173,0,0,0,0,0,174,174,174,174,174,174,174,0,174,0,0,174,174,174,174,174,174,174,0,174,174,0,174,174,174,174,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,176,0,0,0,0,177,176,0,178,0,0,177,178,178,0,178,178,175,0,0,176,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,175,177,176,178,175,177,176,178,175,177,176,178,175,177,176,178,175,0,177,178,175,178,175,0,176,0,178,175,0,0,178,177,176,178,175,176,178,177,178,177,178,175,176,177,176,178,175,177,176,178,175,177,176,178,175,177,176,178,175,178,178,178,175,176,0,0,177,178,178,177,178,178,176,177,178,175,175,177,176,0,0,178,175,177,176,178,175,177,176,178,175,177,177,177,176,178,175,0,0,0,0,0,0,0,180,0,0,0,0,0,180,181,182,180,179,181,182,180,179,181,182,180,179,181,182,180,179,181,182,179,181,182,0,180,179,181,182,179,181,182,180,179,181,182,180,179,181,182,180,179,181,182,180,179,181,182,179,179,180,179,181,182,180,179,181,182,180,179,181,182,0,0,0,0,0,179,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,184,185,186,0,183,184,0,0,0,183,184,185,186,183,184,185,186,183,184,185,186,183,184,185,186,183,184,185,186,183,184,185,186,183,183,184,185,186,183,184,185,186,183,184,185,186,183,183,184,185,186,183,184,185,186,183,184,185,186,183,184,185,186,183,183,184,185,186,183,184,185,186,183,184,185,186,183,184,185,186,183,184,185,186,187,188,188,0,0,189,189,189,189,0,189,188,0,0,189,0,0,189,188,0,0,190,187,188,189,191,190,187,188,189,191,190,187,188,189,191,190,187,188,189,191,190,188,189,191,188,189,191,190,187,190,191,191,188,189,191,187,188,189,191,190,188,189,191,190,190,187,188,189,191,190,187,188,189,191,190,187,188,189,191,190,187,188,189,191,190,190,190,191,187,190,190,190,0,191,190,190,187,190,190,190,190,188,189,191,187,188,189,191,190,187,188,189,191,190,187,188,189,191,190,190,190,190,190,190,0,0,0,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,0,193,0,0,0,193,0,0,0,0,0,193,194,195,195,195,195,194,196,193,195,194,196,193,195,194,196,193,195,194,196,193,195,194,195,193,193,194,195,195,194,196,193,195,195,194,196,193,195,194,196,193,195,194,196,193,195,194,196,193,195,194,196,195,196,194,194,195,195,195,194,195,194,194,194,195,194,196,193,195,194,196,193,195,194,196,193,196,195,0,0,0,0,0,0,0,0,0,197,198,199,197,200,197,198,199,201,200,197,198,199,201,201,200,197,198,199,201,200,197,198,199,201,200,201,201,197,198,199,200,197,198,199,201,200,197,198,199,201,200,197,198,199,201,200,197,198,199,200,197,198,199,201,200,197,198,199,201,198,199,200,201,200,197,198,199,201,200,197,198,199,201,200,197,198,199,201,0,0,0,0,0,202,203,203,203,203,202,203,202,203,0,203,204,203,203,203,203,0,204,204,204,204,202,203,204,204,204,204,0,204,204,203,203,203,0,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,0,0,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,0,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,0,0,0,0,208,209,208,209,208,209,208,209,209,209,209,208,209,208,209,208,209,208,209,208,208,209,208,209,208,209,208,209,209,209,209,209,208,209,209,208,209,209,209,209,209,209,208,209,208,209,208,209,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,211,212,213,214,215,216,216,0,0,216,216,216,216,0,0,0,216,0,216,0,0,0,0,0,216,216,216,0,217,0,218,218,218,218,218,218,218,219,218,220,218,219,219,218,219,221,219,0,218,217,220,218,0,219,217,221,221,221,221,221,0,220,217,217,218,221,0,0,222,222,222,222,222,222,219,219,222,222,222,222,222,219,219,219,219,222,219,222,219,222,222,222,222,217,217,0,217,217,217,217,217,217,217,217,217,217,217,217,217,218,218,218,218,218,218,218,218,218,218,0,218,218,218,218,218,218,218,218,218,218,218,218,0,218,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,0,0,0,0,0,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,0,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,211,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,211,212,213,214,215,0,220,220,220,220,220,221,221,221,221,0,221,221,221,221,221,221,221],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["allocationtype",4],["isize",15]],["address",3]],[[["usize",15],["objectreference",3],["allocationsemantics",4],["isize",15]],["address",3]],null,[[],["barrier",8]],null,[[],["baseplan",3]],[[["space",8],["bool",15]],["bool",15]],[[]],null,[[],["planconstraints",3]],[[],["planconstraints",3]],[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",3]],null,[[["usize",15],["map64",3],["arc",3]]],[[],["enummap",3]],[[],["usize",15]],[[],["vmmutatorthread",3]],[[["vmworkerthread",3]]],null,null,null,null,null,null,null,null,null,[[["usize",15],["objectreference",3],["allocationtype",4]]],[[]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["address",3]]],[[["objectreference",3],["address",3],["bool",15]]],[[["objectreference",3]]],[[["address",3],["bool",15]]],[[]],null,[[]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[]],[[["address",3]]],null,[[["gcworkscheduler",3]]],null,null,[[["objectreference",3]],["objectreference",3]],null,null,[[["objectreference",3]],["bool",15]],[[["objectreference",3],["mmtk",3]]],[[["objectreference",3],["mmtk",3]]],[[["objectreference",3],["mmtk",3]]],[[["objectreference",3],["mmtk",3]]],[[["gcwork",8],["mmtk",3],["workbucketstage",4],["vmbinding",8]]],[[["vec",3,["box"]],["mmtk",3],["box",3,["gcwork"]],["workbucketstage",4]]],[[["mutator",3],["usize",15],["allocationsemantics",4],["isize",15]],["address",3]],[[["vmmutatorthread",3],["mmtk",3]],[["mutator",3],["box",3,["mutator"]]]],[[["mutator",3],["box",3,["mutator"]]]],[[["vmthread",3],["mmtk",3]]],[[["mutator",3]]],[[["mmtk",3]],["usize",15]],[[["usize",15],["mmtk",3]]],[[["mmtk",3],["allocationsemantics",4]],["allocatorselector",4]],[[["mmtk",3]],[["objectreference",3],["option",4,["objectreference"]]]],[[["vmmutatorthread",3],["mmtk",3]]],[[["vmmutatorthread",3],["mmtk",3]]],[[["mmtk",3]]],[[["objectreference",3]],["bool",15]],[[["address",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["address",3]],[[["objectreference",3],["mmtk",3]]],[[["mmtk",3]],["usize",15]],[[["send",8],["box",3,["send"]],["mmtk",3]]],[[["mutator",3],["objectreference",3],["usize",15],["allocationsemantics",4]]],[[["str",15],["mmtk",3]],["bool",15]],[[["vmworkerthread",3],["mmtk",3]]],[[["gcworker",3],["vmworkerthread",3],["mmtk",3]]],[[],["address",3]],[[["mmtk",3]],["usize",15]],[[["mmtk",3]],["usize",15]],null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["map64",3]],[[],["fragmentedmapper",3]],[[],["sftmap",3]],null,[[]],[[]],[[]],[[]],[[],["plan",8]],[[["vmmutatorthread",3]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["allocationtype",4],["isize",15]],["address",3]],[[["usize",15],["objectreference",3],["allocationsemantics",4],["isize",15]],["address",3]],null,[[],["barrier",8]],null,null,null,[[],["baseplan",3]],null,[[["space",8],["bool",15]],["bool",15]],[[]],null,[[],["planconstraints",3]],[[],["planconstraints",3]],null,[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",3]],null,null,[[["usize",15],["map64",3],["arc",3]]],null,null,[[],["enummap",3]],[[],["usize",15]],[[],["vmmutatorthread",3]],null,null,[[["vmworkerthread",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["objectreference",3],["allocationtype",4]]],[[]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["address",3]]],[[["objectreference",3],["address",3],["bool",15]]],[[["objectreference",3]]],[[["address",3],["bool",15]]],[[]],[[]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[]],[[["address",3]]],[[["gcworkscheduler",3]]],null,[[["objectreference",3]],["objectreference",3]],null,null,[[["objectreference",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["barrierselector",4]],[[]],[[["objectreference",3]]],[[["barrierselector",4]],["bool",15]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["objectreference",3]],["bool",15]],null,null,null,[[["mmtk",3],["metadataspec",4]]],[[["writetarget",4]]],[[["writetarget",4]]],[[["writetarget",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arc",3]]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[]],null,[[]],null,null,null,null,[[["vmworkerthread",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[["usize",15],["objectreference",3],["address",3],["allocationsemantics",4]]],null,null,[[],[["vec",3,["sidemetadataspec"]],["sidemetadataspec",3]]],null,null,null,null,null,[[["usize",15],["objectreference",3],["allocationsemantics",4],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[],["planconstraints",3]],[[]],[[]],[[]],[[]],[[],["gencopy",3]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["mmtk",3]]],[[["vec",3,["address"]],["bool",15],["mmtk",3],["address",3]]],null,null,[[["usize",15],["objectreference",3],["allocationsemantics",4],["address",3]]],[[]],[[]],null,[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["space",8],["bool",15]],["bool",15]],[[],["commonplan",3]],[[],["planconstraints",3]],null,null,[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",3]],[[]],[[],["copyspace",3]],[[["usize",15],["map64",3],["arc",3]]],null,[[],["gen",3]],[[],["enummap",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[["map64",3],["arc",3,["unsafeoptionswrapper"]],["unsafeoptionswrapper",3],["fragmentedmapper",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[],["bool",15]],[[["gcworkscheduler",3]]],[[],["copyspace",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["vmmutatorthread",3],["mmtk",3]],[["mutator",3],["vmbinding",8]]],[[],["enummap",3]],[[]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[]],null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["vec",3,["address"]],["bool",15],["mmtk",3],["address",3]]],[[["address",3]]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["space",8],["bool",15]],["bool",15]],null,[[]],null,[[["usize",15],["map64",3],["arc",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[["map64",3],["vec",3,["sidemetadataspec"]],["unsafeoptionswrapper",3],["fragmentedmapper",3],["heapmeta",3],["sidemetadataspec",3],["planconstraints",3],["arc",3,["unsafeoptionswrapper"]]]],null,null,[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["usize",15]],["bool",15]],[[["bool",15]]],[[["plan",8]],["bool",15]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["sidemetadatasanity",3]]],null,null,null,null,null,[[["usize",15],["objectreference",3],["allocationsemantics",4],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[],["planconstraints",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["mmtk",3]]],[[["vec",3,["address"]],["bool",15],["mmtk",3],["address",3]]],null,null,[[["usize",15],["objectreference",3],["allocationsemantics",4],["address",3]]],[[]],[[]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["space",8],["bool",15]],["bool",15]],[[],["commonplan",3]],[[],["planconstraints",3]],[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",3]],[[]],[[["usize",15],["map64",3],["arc",3]]],null,[[],["gen",3]],[[],["enummap",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],null,[[["map64",3],["arc",3,["unsafeoptionswrapper"]],["gcworkscheduler",3],["arc",3,["gcworkscheduler"]],["unsafeoptionswrapper",3],["fragmentedmapper",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[],["bool",15]],[[["gcworkscheduler",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["vmmutatorthread",3],["mmtk",3]],[["mutator",3],["vmbinding",8]]],[[],["enummap",3]],[[]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["objectreference",3],["allocationsemantics",4],["isize",15]],["address",3]],[[["usize",15],["objectreference",3],["allocationsemantics",4],["isize",15]],["address",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["allocationsemantics",4]],[[]],null,null,[[["space",8],["bool",15]],["bool",15]],[[["space",8],["bool",15]],["bool",15]],[[],["commonplan",3]],[[],["commonplan",3]],[[],["commonplan",3]],[[],["planconstraints",3]],[[],["planconstraints",3]],[[],["planconstraints",3]],null,[[["usize",15],["objectreference",3],["allocationsemantics",4]],["allocationsemantics",4]],[[["usize",15],["objectreference",3],["allocationsemantics",4]],["allocationsemantics",4]],[[["usize",15],["objectreference",3],["allocationsemantics",4]],["allocationsemantics",4]],[[["vmmutatorthread",3],["mmtk",3]],[["mutator",3],["box",3,["mutator"]]]],[[["map64",3],["arc",3,["unsafeoptionswrapper"]],["planselector",4],["gcworkscheduler",3],["arc",3,["gcworkscheduler"]],["unsafeoptionswrapper",3],["fragmentedmapper",3]],[["box",3,["plan"]],["plan",8]]],[[["map64",3],["fragmentedmapper",3],["usize",15],["planconstraints",3],["sidemetadataspec",3],["vec",3,["sidemetadataspec"]],["heapmeta",3]],[["immortalspace",3],["vmbinding",8]]],[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",3]],null,[[],["usize",15]],[[["box",3]],[["box",3],["result",4,["box","box"]],["box",3]]],[[],["option",4]],[[["rc",3]],[["result",4,["rc","rc"]],["rc",3],["rc",3]]],[[],["option",4]],null,[[]],[[]],[[]],[[["gcstatus",4]],["bool",15]],[[["allocationsemantics",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnmut",8]]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[["usize",15],["map64",3],["arc",3]]],[[["usize",15],["map64",3],["arc",3]]],[[["usize",15],["map64",3],["arc",3]]],null,[[],["gen",3]],[[],["gen",3]],[[],["gen",3]],[[],["enummap",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["immortalspace",3]],[[],["largeobjectspace",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["vmmutatorthread",3],["bool",15]]],[[["vmmutatorthread",3],["bool",15]]],[[["vmmutatorthread",3],["bool",15]]],null,null,[[["usize",15]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],[[]],[[["space",8],["str",15]]],[[["space",8],["str",15]]],[[["space",8],["str",15]]],null,null,[[],["fragmentedmapper",3]],[[],["fragmentedmapper",3]],[[],["fragmentedmapper",3]],null,[[["objectreference",3]]],[[["objectreference",3]]],[[["objectreference",3]]],null,[[["mmtk",3]]],[[["map64",3],["unsafeoptionswrapper",3],["vec",3,["sidemetadataspec"]],["heapmeta",3],["fragmentedmapper",3],["arc",3,["unsafeoptionswrapper"]],["planconstraints",3],["sidemetadataspec",3]],["baseplan",3]],[[["map64",3],["unsafeoptionswrapper",3],["vec",3,["sidemetadataspec"]],["heapmeta",3],["fragmentedmapper",3],["arc",3,["unsafeoptionswrapper"]],["planconstraints",3],["sidemetadataspec",3]],["commonplan",3]],[[],["options",3]],[[],["options",3]],[[],["options",3]],null,[[["space",8],["bool",15]],["bool",15]],[[["space",8],["bool",15]],["bool",15]],[[["space",8],["bool",15]],["bool",15]],[[["usize",15],["objectreference",3],["address",3],["allocationsemantics",4]]],[[["usize",15],["objectreference",3],["address",3],["allocationsemantics",4]]],[[["usize",15],["objectreference",3],["address",3],["allocationsemantics",4]]],[[]],[[["vmworkerthread",3]]],[[]],[[["vmworkerthread",3],["bool",15]]],[[["vmworkerthread",3],["bool",15]]],[[]],[[["vmworkerthread",3]]],[[]],[[["vmworkerthread",3],["bool",15]]],[[["vmworkerthread",3],["bool",15]]],[[]],[[]],[[]],null,null,[[["gcworkscheduler",3]]],[[["planconstraints",3],["gcworkscheduler",3]]],[[]],[[["gcstatus",4]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["bool",15]],[[]],[[],["usize",15]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["sidemetadatasanity",3]]],[[["sidemetadatasanity",3]]],null,null,null,null,null,null,null,null,null,null,[[["usize",15],["objectreference",3],["allocationsemantics",4],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["tracekind",4]],[[]],[[],["planconstraints",3]],[[]],[[]],[[["tracekind",4]],["bool",15]],[[["address",3]]],[[["objectreference",3]],["objectreference",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["immix",3]],null,[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["mmtk",3]]],[[["vec",3,["address"]],["bool",15],["mmtk",3],["address",3]]],null,[[["usize",15],["objectreference",3],["allocationsemantics",4],["address",3]]],[[]],[[]],[[]],[[]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["space",8],["bool",15]],["bool",15]],[[],["commonplan",3]],null,[[],["planconstraints",3]],[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",3]],[[]],[[["usize",15],["map64",3],["arc",3]]],[[],["enummap",3]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["map64",3],["arc",3,["unsafeoptionswrapper"]],["gcworkscheduler",3],["arc",3,["gcworkscheduler"]],["unsafeoptionswrapper",3],["fragmentedmapper",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["plan",8],["vmmutatorthread",3]],[["mutator",3],["vmbinding",8]]],[[],["enummap",3]],[[]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[["vec",3,["address"]],["bool",15],["mmtk",3],["address",3]]],[[["marksweep",3]]],null,null,[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["space",8],["bool",15]],["bool",15]],[[],["commonplan",3]],null,[[],["planconstraints",3]],[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",3]],[[]],[[["usize",15],["map64",3],["arc",3]]],[[],["enummap",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[],["mallocspace",3]],[[["map64",3],["arc",3,["unsafeoptionswrapper"]],["unsafeoptionswrapper",3],["fragmentedmapper",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["plan",8],["vmmutatorthread",3]],[["mutator",3],["vmbinding",8]]],[[],["enummap",3]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["usize",15],["allocationtype",4],["isize",15]],["address",3]],[[["usize",15],["allocationtype",4],["isize",15]],["address",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["barrier",8]],[[],["barrier",8]],null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vmmutatorthread",3]],[[],["vmmutatorthread",3]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,null,[[["usize",15],["objectreference",3],["allocationtype",4]]],[[["usize",15],["objectreference",3],["allocationtype",4]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],null,[[["objectreference",3]]],[[["objectreference",3]]],[[["objectreference",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],null,[[]],[[]],[[["space",8],["bool",15]],["bool",15]],[[],["planconstraints",3]],[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",3]],[[]],[[["usize",15],["map64",3],["arc",3]]],[[],["enummap",3]],[[],["usize",15]],[[["vmmutatorthread",3],["bool",15]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["map64",3],["arc",3,["unsafeoptionswrapper"]],["unsafeoptionswrapper",3],["fragmentedmapper",3]]],null,[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["plan",8],["vmmutatorthread",3]],[["mutator",3],["vmbinding",8]]],[[],["enummap",3]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["mutator",3],["vmworkerthread",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["vec",3,["address"]],["bool",15],["mmtk",3],["address",3]]],null,[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["space",8],["bool",15]],["bool",15]],[[],["commonplan",3]],null,[[],["planconstraints",3]],[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",3]],[[]],[[["usize",15],["map64",3],["arc",3]]],[[],["enummap",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["map64",3],["arc",3,["unsafeoptionswrapper"]],["unsafeoptionswrapper",3],["fragmentedmapper",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["plan",8],["vmmutatorthread",3]],[["mutator",3],["vmbinding",8]]],[[],["enummap",3]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],null,null,null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["usize",15],["objectreference",3],["allocationsemantics",4],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[],["planconstraints",3]],[[]],[[]],[[]],[[]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["mmtk",3]]],[[["vec",3,["address"]],["bool",15],["mmtk",3],["address",3]]],null,null,[[["usize",15],["objectreference",3],["allocationsemantics",4],["address",3]]],[[]],[[]],[[],["semispace",3]],null,[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[],["baseplan",3]],[[]],[[]],[[["space",8],["bool",15]],["bool",15]],[[],["commonplan",3]],null,[[],["planconstraints",3]],null,null,[[["vmworkerthread",3],["mmtk",3]],["gcworkerlocalptr",3]],[[]],[[],["copyspace",3]],[[["usize",15],["map64",3],["arc",3]]],[[],["enummap",3]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["map64",3],["arc",3,["unsafeoptionswrapper"]],["unsafeoptionswrapper",3],["fragmentedmapper",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["gcworkscheduler",3]]],[[],["copyspace",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["plan",8],["vmmutatorthread",3]],[["mutator",3],["vmbinding",8]]],[[],["enummap",3]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["mutator",3],["vmworkerthread",3]]],[[["mutator",3],["vmworkerthread",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["objectreference",3],["address",3],["bool",15]]],[[["address",3],["bool",15]]],[[]],[[]],[[["address",3]]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]],["bool",15]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[["mmtk",3],["vec",3,["address"]],["address",3],["gcworker",3]]],[[["address",3]]],[[["address",3]]],[[["objectreference",3]]],[[["objectreference",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[],["commonspace",3]],null,[[]],[[],["bool",15]],null,[[["objectreference",3]],[["objectreference",3],["option",4,["objectreference"]]]],[[],["pageresource",8]],[[["map64",3]]],[[["objectreference",3],["bool",15]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["str",15]],[[["map64",3],["vmrequest",4],["heapmeta",3],["vec",3,["sidemetadataspec"]],["fragmentedmapper",3],["sidemetadataspec",3],["bool",15],["str",15]]],null,[[["bool",15]]],[[]],[[]],[[["address",3]]],[[]],[[["objectreference",3],["allocationsemantics",4]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["address",3]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["usize",15]]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chunk",3]],[[],["blockstate",4]],[[],["block",3]],[[]],[[]],[[["objectreference",3]]],[[],["blocklist",3]],[[]],[[],["address",3]],[[["blockstate",4]],["bool",15]],[[["block",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]],["option",4]],[[["u8",15]]],[[]],[[["address",3]]],[[]],[[]],[[],[["vec",3,["block"]],["mutexguard",3,["vec"]]]],[[],["usize",15]],[[],["blockstate",4]],[[["bool",15]]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["metadatabytearrayref",3]],[[],[["line",3],["range",3,["line"]]]],[[["blockstate",4]],["bool",15]],[[["block",3]],["bool",15]],[[["block",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["block"]],["block",3]]],[[["block",3]]],null,[[]],[[["bool",15]]],[[["usize",15]]],[[["blockstate",4]]],[[],["address",3]],[[],[["usize",15],["option",4,["usize"]]]],[[["option",4,["u8"]],["u8",15],["immixspace",3]],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["address",3]],["address",3]],[[],[["range",3,["chunk"]],["chunk",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["usize",15]]],[[["usize",15]],["option",4]],[[],[["block",3],["range",3,["block"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["chunk",3]],[[],["chunkstate",4]],[[]],[[]],[[["gcworker",3],["mmtk",3]]],[[["chunk",3]],["bool",15]],[[["chunkstate",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[["address",3]]],[[]],[[["immixspace",3]],[["vec",3,["box"]],["box",3,["gcwork"]]]],[[],[["vec",3,["box"]],["box",3,["gcwork"]]]],[[["chunk",3]],["chunkstate",4]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["chunk",3]],["bool",15]],[[]],[[["chunk",3]],[["option",4,["ordering"]],["ordering",4]]],[[["chunkstate",4],["chunk",3]]],null,[[],["address",3]],[[],[["usize",15],["option",4,["usize"]]]],[[["immixspace",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[["usize",15],["bool",15]]],[[],["defrag",3]],[[["immixspace",3]],["usize",15]],null,null,[[["immixspace",3]]],[[["formatter",3]],["result",6]],[[]],[[["immixspace",3]],["usize",15]],[[],["bool",15]],null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[]],[[["bool",15]]],[[["immixspace",3]]],[[["immixspace",3]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[["objectreference",3],["u8",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["commonspace",3]],null,null,[[["usize",15],["bool",15]],["bool",15]],null,[[],["usize",15]],null,[[["gcworker",3],["mmtk",3]]],[[["mmtk",3],["gcworker",3]]],[[["objectreference",3]],["objectreference",3]],[[]],[[]],[[]],[[["vmthread",3],["bool",15]],[["option",4,["block"]],["block",3]]],[[["line",3]],[["range",3,["line"]],["option",4,["range"]]]],[[],["pageresource",8]],[[["bool",15]],[["option",4,["block"]],["block",3]]],null,[[],["bool",15]],[[["map64",3]]],[[["objectreference",3],["bool",15]]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["objectreference",3]],["bool",15]],[[["objectreference",3],["u8",15]],["bool",15]],[[],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],null,null,[[["objectreference",3]]],null,[[],["str",15]],[[["map64",3],["heapmeta",3],["gcworkscheduler",3],["vec",3,["sidemetadataspec"]],["fragmentedmapper",3],["sidemetadataspec",3],["arc",3,["gcworkscheduler"]],["str",15]]],[[["objectreference",3],["vec",3,["objectreference"]],["bool",15],["immixspace",3]]],null,[[["bool",15]]],[[["bool",15]],["bool",15]],[[["block",3]]],[[["address",3]]],[[["chunk",3]]],null,[[],["gcworkscheduler",3]],null,[[],[["vec",3,["sidemetadataspec"]],["sidemetadataspec",3]]],null,[[["objectreference",3],["allocationsemantics",4]],["objectreference",3]],[[["objectreference",3],["allocationsemantics",4]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["address",3]],["address",3]],[[],["any",8]],[[],["any",8]],[[["usize",15]]],[[["usize",15]],["option",4]],[[],["block",3]],[[]],[[]],[[],["line",3]],[[]],[[["line",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]],["option",4]],[[]],[[["address",3]]],[[],["usize",15]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["address",3]],["bool",15]],[[["u8",15]],["bool",15]],[[["u8",15]]],[[["objectreference",3],["u8",15]],["usize",15]],[[["line",3]],["bool",15]],[[["line",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["address",3]],[[],[["usize",15],["option",4,["usize"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[],["commonspace",3]],null,[[]],[[],["pageresource",8]],[[["map64",3]]],[[["objectreference",3],["bool",15]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],null,[[],["str",15]],[[["map64",3],["vmrequest",4],["heapmeta",3],["vec",3,["sidemetadataspec"]],["fragmentedmapper",3],["sidemetadataspec",3],["planconstraints",3],["bool",15],["str",15]]],null,[[]],[[]],[[["address",3]]],[[["usize",15],["objectreference",3]],["bool",15]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["vmthread",3],["usize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[["objectreference",3]]],[[],["commonspace",3]],null,[[]],[[],["pageresource",8]],[[["address",3]],["address",3]],null,[[["map64",3]]],[[["objectreference",3],["bool",15]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["str",15]],[[["map64",3],["vmrequest",4],["heapmeta",3],["vec",3,["sidemetadataspec"]],["fragmentedmapper",3],["sidemetadataspec",3],["planconstraints",3],["bool",15],["str",15]]],null,[[["bool",15]]],[[["bool",15]]],[[["address",3]]],[[["bool",15]]],[[["usize",15],["objectreference",3]],["bool",15]],[[["usize",15],["objectreference",3]],["bool",15]],[[["objectreference",3]],["objectreference",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["vmthread",3],["usize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[],["commonspace",3]],null,[[]],[[],["str",15]],[[],["pageresource",8]],[[["map64",3]]],[[["objectreference",3],["bool",15]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["str",15]],null,[[["sidemetadataspec",3],["bool",15],["vec",3,["sidemetadataspec"]],["str",15]]],null,[[["address",3]]],[[],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["sidemetadatasanity",3]]],null,null,null,null,null,null,[[["address",3]],["bool",15]],[[["vmthread",3],["usize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],null,null,[[],["commonspace",3]],null,[[["usize",15],["address",3]]],[[]],[[],["str",15]],[[],["pageresource",8]],[[["objectreference",3]],["bool",15]],[[["map64",3]]],[[["objectreference",3],["bool",15]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15],["address",3]]],null,[[],["str",15]],[[["vec",3,["sidemetadataspec"]],["sidemetadataspec",3]]],null,[[["address",3]]],[[],["usize",15]],[[["address",3]]],[[["address",3]]],[[["address",3],["sidemetadataspec",3]]],null,[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["sidemetadatasanity",3]]],null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sidemetadatacontext",3]],[[],["mutex",3]],[[],["address",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["objectreference",3],["option",4,["ordering"]],["ordering",4]],["bool",15]],[[["usize",15],["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["sidemetadataspec",3],["address",3]],["u128",15]],[[["address",3]]],[[["usize",15],["address",3],["sidemetadatacontext",3]]],[[["objectreference",3]]],[[["address",3]]],[[["objectreference",3],["option",4,["ordering"]],["ordering",4]]],[[["address",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["objectreference",3]]],[[["objectreference",3]]],[[["address",3]]],[[["objectreference",3],["option",4,["ordering"]],["ordering",4]]],[[["address",3]]],null,null,null,null,null,null,null,null,null,null,[[["vmthread",3],["usize",15]],["address",3]],[[["address",3]],["bool",15]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["sft",8]],[[],["space",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["commonspace",3]],null,[[],["sftmap",3]],null,[[["box",3]],[["box",3],["result",4,["box","box"]],["box",3]]],[[],["option",4]],[[["rc",3]],[["result",4,["rc","rc"]],["rc",3],["rc",3]]],[[],["option",4]],[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["address",3]],["sft",8]],[[["objectreference",3]],[["objectreference",3],["option",4,["objectreference"]]]],[[["f32",15]],["usize",15]],[[],["str",15]],[[],["pageresource",8]],[[["usize",15],["address",3],["bool",15]]],null,null,null,[[["objectreference",3]],["bool",15]],[[["map64",3]]],[[["space",8]]],[[["objectreference",3],["bool",15]]],[[["objectreference",3],["bool",15]]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["objectreference",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15],["address",3],["sft",8]]],null,null,null,null,[[]],[[],["str",15]],[[],["str",15]],null,null,null,null,[[["map64",3],["heapmeta",3],["spaceoptions",3],["fragmentedmapper",3]]],[[]],null,[[]],[[["address",3]]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[["usize",15],["sft",8]]],null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["address",3],["sft",8]]],[[["sidemetadatasanity",3]]],[[],["map64",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["gcworker",3],["mmtk",3]]],null,null,null,null,null,null,[[["vec",3,["address"]],["bool",15],["mmtk",3],["address",3]]],null,null,null,null,null,null,null,null,[[["objectreference",3]],["objectreference",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["preparecollector",3]],[[],["releasecollector",3]],[[],["stopmutators",3]],[[],["endofgc",3]],[[],["processweakrefs",3]],[[],["scanstackroots",3]],[[],["scanvmspecificroots",3]],[[["gcworker",3],["mmtk",3]]],[[["mmtk",3],["gcworker",3]]],[[["gcworker",3],["mmtk",3]]],[[["mmtk",3],["gcworker",3]]],[[["gcworker",3],["mmtk",3]]],[[["mmtk",3],["gcworker",3]]],[[["mmtk",3],["gcworker",3]]],[[["mmtk",3],["gcworker",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["mmtk",3],["gcworker",3]]],[[["gcworker",3],["mmtk",3]]],[[["mmtk",3],["gcworker",3]]],[[["mmtk",3],["gcworker",3]]],[[["mmtk",3],["gcworker",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[],["mmtk",3]],null,null,null,null,[[["vec",3,["address"]],["bool",15],["mmtk",3],["address",3]]],[[]],[[["mutator",3]]],[[]],[[["mutator",3]]],[[["address",3],["vec",3,["address"]],["mmtk",3]]],[[["objectreference",3],["vec",3,["objectreference"]],["bool",15]]],[[["objectreference",3],["vec",3,["objectreference"]],["metadataspec",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["plan",8]],null,null,[[],[["objectreference",3],["vec",3,["objectreference"]]]],[[["address",3]]],[[["address",3]]],[[]],[[]],[[["objectreference",3]]],[[["objectreference",3]]],[[["gcworker",3]]],[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["gcworker",3]],null,null,null,null,null,null,[[["gcworker",3]]],[[],["bool",15]],[[],["bool",15]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],null,[[]],[[]],[[["usize",15],["vmthread",3],["mmtk",3],["arc",3]]],[[["vmworkerthread",3],["arc",3]]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[],["arc",3]],[[["mmtk",3]]],[[],["usize",15]],[[["send",8],["box",3,["send"]]]],[[["gcworker",3]],[["box",3,["gcwork"]],["gcwork",8]]],[[["gcworker",3]],[["box",3,["gcwork"]],["gcwork",8]]],[[["gcworker",3]],["option",4]],[[["coordinatorwork",8],["box",3,["coordinatorwork"]]]],[[]],[[["coordinatorwork",8],["option",4]]],[[["coordinatorwork",8],["option",4]]],null,[[],[["hashmap",3,["string","string"]],["string",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[],[["arc",3,["workergroup"]],["workergroup",3]]],null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mmtk",3]],[["vec",3,["box"]],["box",3,["workcounter"]]]],[[]],[[],["schedulerstat",3]],[[]],null,[[["workerlocalstat",3]]],[[]],[[]],[[]],[[],[["hashmap",3,["string","string"]],["string",3]]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[["mmtk",3],["typeid",3],["str",15]],["workstat",3]],[[["workerlocalstat",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[["str",15]],["string",3]],null,null,[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],[[["gcworker",3],["mmtk",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[["gcwork",8]]],[[["usize",15],["box",3,["gcwork"]],["gcwork",8]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,["box"]],["box",3,["gcwork"]]]],[[["usize",15],["vec",3,["box"]],["box",3,["gcwork"]]]],null,[[],["workuid",3]],[[],["workbucketstage",4]],[[]],[[]],[[],["ordering",4]],[[]],[[],["bool",15]],[[["workuid",3]],["bool",15]],[[["workbucketstage",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["fnmut",8]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["workuid",3]],["bool",15]],[[["usize",15],["box",3,["gcwork"]],["gcwork",8]]],[[["arc",3],["bool",15]]],[[]],[[]],[[]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],[["box",3,["gcwork"]],["option",4,["box"]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[],["workcounterbase",3]],[[],["workduration",3]],[[],[["workcounter",8],["box",3,["workcounter"]]]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["workcounterbase",3]],[[],["workcounterbase",3]],[[],["workcounterbase",3]],[[],["workcounterbase",3]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[]],[[]],[[["f64",15]]],null,[[],["string",3]],[[],["string",3]],[[]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[["workbucketstage",4]]],[[],["bool",15]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["gcworkerlocalptr",3]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],null,[[],["bool",15]],[[]],null,null,null,null,[[["usize",15],["sender",3,["coordinatormessage"]],["bool",15],["weak",3,["gcworkscheduler"]],["coordinatormessage",4],["gcworkscheduler",3]]],[[["usize",15],["sender",3,["coordinatormessage"]],["weak",3,["gcworkscheduler"]],["coordinatormessage",4],["gcworkscheduler",3]],["arc",3]],[[["gcworkerlocal",8]]],null,null,[[],["usize",15]],[[["mmtk",3]]],[[],["gcworkscheduler",3]],null,null,[[["gcworkerlocalptr",3]]],[[["vmthread",3],["mmtk",3]]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["address",3]],[[["bytesize",6]],["address",3]],[[["byteoffset",6]],["address",3]],[[["bytesize",6]]],[[["byteoffset",6]]],[[["bytesize",6]],["address",3]],[[["bytesize",6]],["address",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["usize",15]],[[["ordering",4]]],[[["ordering",4]]],[[["u8",15]],["u8",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["u8",15]],["usize",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["address",3]],[[],["objectreference",3]],[[]],[[]],[[["address",3]],["ordering",4]],[[["ordering",4]],["result",4]],[[["address",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["address",3]],[[],["address",3]],[[],["address",3]],[[["usize",15]],["address",3]],[[["address",3]],["bytesize",6]],[[],["option",4]],[[["address",3]],["byteoffset",6]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["copy",8]],[[],["address",3]],[[["address",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["address",3]],[["option",4,["ordering"]],["ordering",4]]],[[["objectreference",3]],[["option",4,["ordering"]],["ordering",4]]],[[["usize",15]],["address",3]],[[["isize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[["usize",15]],["address",3]],[[["address",3]],["bytesize",6]],[[["bytesize",6]],["address",3]],[[["bytesize",6]]],[[],["address",3]],[[]],[[],["objectreference",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["address",3]],null,null,null,null,null,null,null,null,null,[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],null,null,null,null,null,null,[[["address",3]]],[[],["plan",8]],[[],["space",8]],[[],["vmthread",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["bool",15],["address",3],["isize",15]],["address",3]],[[["usize",15],["address",3],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[["box",3]],[["box",3],["result",4,["box","box"]],["box",3]]],[[],["option",4]],[[["rc",3]],[["result",4,["rc","rc"]],["rc",3],["rc",3]]],[[],["option",4]],[[["address",3]]],[[["usize",15]],["usize",15]],[[],["plan",8]],[[],["space",8]],[[],["vmthread",3]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],null,[[],["allocatorselector",4]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["allocatorselector",4]],["allocator",8]],[[["allocatorselector",4]],["allocator",8]],null,[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,null,[[["plan",8],["vmmutatorthread",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[["usize",15],["bool",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[]],[[],["plan",8]],[[],["space",8]],[[],["vmthread",3]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[["vmthread",3],["plan",8],["space",8]]],null,[[["space",8]]],[[]],[[["address",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["objectreference",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["address",3]],["address",3]],[[["usize",15],["address",3]],["usize",15]],null,[[],["bool",15]],[[["usize",15],["isize",15]],["bool",15]],[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],null,null,[[]],[[],["plan",8]],[[],["space",8]],[[],["vmthread",3]],null,[[],["immixspace",3]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,null,null,null,[[["vmthread",3],["plan",8],["option",4,["space"]],["space",8],["bool",15]]],[[["usize",15],["isize",15]],["address",3]],null,null,[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[],["plan",8]],[[],["space",8]],[[],["vmthread",3]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["vmthread",3],["largeobjectspace",3],["plan",8]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["objectreference",3]]],null,[[["usize",15],["isize",15]],["address",3]],[[["usize",15],["isize",15]],["address",3]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[],["plan",8]],[[],["space",8]],[[],["vmthread",3]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["vmthread",3],["mallocspace",3],["plan",8]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["usize",15],["address",3]]],[[["objectreference",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3],["sidemetadatacontext",3]]],[[["objectreference",3]]],[[["address",3]]],[[["objectreference",3]]],[[["objectreference",3]]],null,null,null,[[["arc",3,["mutex"]],["mutex",3,["rtanalysis"]]]],[[["usize",15],["isize",15]]],[[["usize",15],["isize",15]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["gchookwork",3]],[[],["analysismanager",3]],[[["gcworker",3],["mmtk",3]]],[[]],[[]],null,[[["mmtk",3]]],[[["mmtk",3]]],[[["stats",3]]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["stats",3]]],null,null,null,[[["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[]],[[["mmtk",3]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["arc",3,["mutex"]],["mutex",3,["eventcounter"]],["bool",15]]],null,[[["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["usize",15],["isize",15]]],[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["arc",3,["mutex"]],["mutex",3,["eventcounter"]],["bool",15]]],null,[[["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["usize",15],["isize",15]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["persizeclassobjectcounter",3]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["bool",15]]],null,null,[[["bool",15]]],[[["usize",15]],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["address",3]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["address",3]],["address",3]],[[["address",3]],["address",3]],[[["usize",15]],["address",3]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["address",3]],[[["address",3]],["address",3]],[[["address",3]],["address",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["bool",15]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["rwlock",3]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["address",3]]],[[]],[[["plan",8]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["objectreference",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["finalizableprocessor",3]],[[],["finalization",3]],[[],["forwardfinalization",3]],[[["mmtk",3],["gcworker",3]]],[[["mmtk",3],["gcworker",3]]],[[["bool",15]]],[[]],[[]],[[]],[[["objectreference",3]],["objectreference",3]],[[],[["objectreference",3],["option",4,["objectreference"]]]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[]],[[]],null,null,[[["objectreference",3]],["objectreference",3]],[[["vmworkerthread",3],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]]],[[["i32",15],["bool",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["bool",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["bool",15]],[[["i32",15]],["bool",15]],[[["i32",15]],["bool",15]],[[["i32",15]]],[[["i32",15],["bool",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["usize",15]],["usize",15]],[[["spacedescriptor",3],["usize",15],["vmthread",3]],[["prallocresult",3],["result",4,["prallocresult","prallocfail"]],["prallocfail",3]]],[[["spacedescriptor",3],["usize",15],["mutexguard",3]],["i32",15]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["commonpageresource",3]],null,null,[[],["commonpageresource",3]],[[],["commonfreelistpageresource",3]],[[],["commonfreelistpageresource",3]],[[["address",3]]],null,[[]],[[]],[[]],[[],["address",3]],null,[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[["usize",15],["address",3]]],[[["usize",15],["address",3]]],[[["usize",15],["address",3],["map64",3]]],[[["usize",15],["map64",3]]],null,null,[[["usize",15],["address",3]]],[[["address",3]]],[[["usize",15]]],[[["address",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[],["address",3]],[[],["address",3]],[[],["usize",15]],null,null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["address",3]]],[[["usize",15],["bool",15]],["address",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["address",3]],["usize",15]],[[["usize",15],["address",3]],["address",3]],[[["usize",15]]],[[]],[[]],[[["usize",15],["address",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,[[]],[[["address",3]]],[[["address",3],["bool",15]],["option",4]],[[["address",3]],["usize",15]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["address",3]],["bool",15]],null,[[["usize",15],["address",3]]],[[]],[[]],[[],["box",3]],[[["usize",15],["address",3]]],[[["usize",15],["address",3]],["result",6]],[[["address",3]],["address",3]],[[["address",3]],["address",3]],null,[[["address",3]],["option",4]],null,[[["usize",15],["address",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]],["address",3]],[[["spacedescriptor",3],["usize",15],["address",3]],["address",3]],[[]],[[["commonfreelistpageresource",3]],["box",3]],[[["usize",15],["i32",15],["commonfreelistpageresource",3]],["box",3]],[[["address",3]]],[[["address",3]]],[[["address",3]],["usize",15]],[[["address",3]],["usize",15]],[[["address",3]],["usize",15]],[[["address",3]],["usize",15]],[[["address",3]],["spacedescriptor",3]],[[["commonfreelistpageresource",3]],["usize",15]],[[["address",3]],["address",3]],[[["usize",15],["address",3],["spacedescriptor",3]]],[[],["bool",15]],[[]],null,null,[[["usize",15]]],[[["spacedescriptor",3],["usize",15],["address",3]],["address",3]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[["commonfreelistpageresource",3]],["box",3]],[[["usize",15],["i32",15],["commonfreelistpageresource",3]],["box",3]],null,[[]],null,[[["address",3]]],null,null,null,[[["address",3]]],[[["address",3]],["usize",15]],[[]],[[["address",3]],["usize",15]],[[["address",3]],["usize",15]],[[["address",3]],["spacedescriptor",3]],[[["commonfreelistpageresource",3]],["usize",15]],[[["address",3]],["address",3]],null,[[["usize",15],["address",3],["spacedescriptor",3]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[["address",3]],["bool",15]],[[]],[[]],[[["address",3]],[["usize",15],["option",4,["usize"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["mapstate",4]],[[]],[[]],[[["usize",15],["address",3]],["result",6]],[[["mapstate",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["address",3]],["bool",15]],[[["usize",15],["address",3]]],[[["usize",15],["address",3]]],[[["usize",15],["address",3]],["result",6]],[[]],[[["address",3],["atomic",3]],["result",6]],[[["address",3],["atomic",3]],["result",6]],[[["address",3],["atomic",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["usize",15]],[[["spacedescriptor",3],["usize",15],["vmthread",3]],[["prallocresult",3],["result",4,["prallocresult","prallocfail"]],["prallocfail",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["commonpageresource",3]],null,[[],["commonpageresource",3]],null,null,[[],["address",3]],null,[[]],[[]],[[]],[[],["address",3]],[[["address",3]],["address",3]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["spacedescriptor",3],["str",15]]],null,[[["mutexguard",3]],["bool",15]],[[["usize",15],["address",3],["map64",3]]],[[["usize",15],["map64",3]]],[[["mutexguard",3]]],[[["usize",15],["address",3]]],[[["usize",15]],["usize",15]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[["usize",15]],["usize",15]],[[["spacedescriptor",3],["usize",15],["vmthread",3]],[["prallocresult",3],["result",4,["prallocresult","prallocfail"]],["prallocfail",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15],["vmthread",3]]],[[],["usize",15]],[[],["commonpageresource",3]],[[],["commonpageresource",3]],[[]],null,[[]],[[]],[[]],[[],["address",3]],[[["spacedescriptor",3],["usize",15],["vmthread",3]],[["prallocresult",3],["result",4,["prallocresult","prallocfail"]],["prallocfail",3]]],[[["spacedescriptor",3],["usize",15]],["address",3]],null,null,[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["map64",3],["bool",15]],["commonpageresource",3]],null,null,[[]],[[["address",3]]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]]],[[],["map64",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["spacedescriptor",3]],[[]],[[],["spacedescriptor",3]],[[["address",3]],["spacedescriptor",3]],[[["spacedescriptor",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["address",3]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["spacedescriptor",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["vmrequest",4]],[[]],[[["bool",15]]],[[]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["f32",15]]],[[]],[[["usize",15]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[["i32",15],["intarrayfreelist",3]]],[[["i32",15]],["i32",15]],[[],["i32",15]],null,[[],["i32",15]],null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["usize",15],["i32",15]]],null,[[["usize",15],["i32",15]]],[[["i32",15]]],[[],["vec",3]],null,[[],["vec",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["result",4,["setloggererror"]],["setloggererror",3]]],[[["usize",15]]],[[]],[[],["usize",15]],[[["usize",15],["address",3]],["result",6]],[[["usize",15],["address",3]],["result",6]],[[],["string",3]],[[["error",3],["vmthread",3]]],[[["usize",15],["c_int",6],["address",3]],["result",6]],[[["usize",15],["address",3]],["result",6]],[[["usize",15],["address",3]],["result",6]],[[["usize",15],["address",3]],["result",6]],[[["usize",15],["address",3]],["result",6]],[[["usize",15],["address",3]]],[[["result",6]],["bool",15]],[[["partialeq",8],["fn",8]],["result",6]],[[["usize",15],["address",3]]],null,null,null,[[["usize",15],["metadataspec",4],["objectreference",3],["ordering",4],["option",4,["usize"]]],["bool",15]],[[["usize",15],["metadataspec",4],["objectreference",3],["ordering",4]],["usize",15]],[[["usize",15],["metadataspec",4],["objectreference",3],["ordering",4]],["usize",15]],null,null,[[["usize",15],["metadataspec",4],["objectreference",3],["option",4,["ordering"]],["ordering",4],["option",4,["usize"]]],["usize",15]],null,null,[[["usize",15],["metadataspec",4],["objectreference",3],["option",4,["ordering"]],["ordering",4],["option",4,["usize"]]]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["metadataspec",4]],[[]],[[["usize",15],["metadataspec",4],["objectreference",3],["ordering",4],["option",4,["usize"]]],["bool",15]],[[],[["vec",3,["sidemetadataspec"]],["sidemetadataspec",3]]],[[],["sidemetadataspec",3]],[[["usize",15],["metadataspec",4],["objectreference",3],["ordering",4]],["usize",15]],[[["usize",15],["metadataspec",4],["objectreference",3],["ordering",4]],["usize",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[["usize",15],["metadataspec",4],["objectreference",3],["option",4,["ordering"]],["ordering",4],["option",4,["usize"]]],["usize",15]],[[["usize",15],["metadataspec",4],["objectreference",3],["option",4,["ordering"]],["ordering",4],["option",4,["usize"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[],["headermetadataspec",3]],[[]],[[["usize",15],["objectreference",3],["ordering",4],["option",4,["usize"]],["headermetadataspec",3]],["bool",15]],[[["headermetadataspec",3]],["bool",15]],[[["usize",15],["objectreference",3],["ordering",4],["headermetadataspec",3]],["usize",15]],[[["usize",15],["objectreference",3],["ordering",4],["headermetadataspec",3]],["usize",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["usize",15],["objectreference",3],["option",4,["ordering"]],["ordering",4],["option",4,["usize"]],["headermetadataspec",3]],["usize",15]],[[["headermetadataspec",3]],["bool",15]],null,[[["usize",15],["objectreference",3],["option",4,["ordering"]],["ordering",4],["option",4,["usize"]],["headermetadataspec",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["sidemetadataspec",3],["address",3]]],[[["usize",15],["sidemetadataspec",3],["ordering",4],["address",3]],["bool",15]],null,null,[[["sidemetadataspec",3],["address",3]]],[[["usize",15],["sidemetadataspec",3],["ordering",4],["address",3]],["usize",15]],[[["usize",15],["sidemetadataspec",3],["ordering",4],["address",3]],["usize",15]],null,null,null,null,null,[[["sidemetadataspec",3],["address",3]],["usize",15]],[[["sidemetadataspec",3],["address",3],["ordering",4]],["usize",15]],null,null,null,[[["sidemetadataspec",3]],["usize",15]],null,null,null,null,null,null,null,[[["usize",15],["sidemetadataspec",3],["address",3]]],[[["usize",15],["sidemetadataspec",3],["ordering",4],["address",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["address",3]]],null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["sidemetadataspec",3],["address",3]]],[[["usize",15]],["usize",15]],[[],["sidemetadataspec",3]],[[],["sidemetadataoffset",19]],[[]],[[]],[[["usize",15],["sidemetadataspec",3],["ordering",4],["address",3]],["bool",15]],null,[[["sidemetadataspec",3],["address",3]]],[[["sidemetadataspec",3]],["bool",15]],[[],["bool",15]],[[["usize",15],["sidemetadataspec",3],["ordering",4],["address",3]],["usize",15]],[[["usize",15],["sidemetadataspec",3],["ordering",4],["address",3]],["usize",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["usize",15]],["u8",15]],[[],["address",3]],[[]],[[],["usize",15]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],null,[[],["bool",15]],[[["sidemetadataspec",3]],["sidemetadataoffset",19]],[[],["usize",15]],[[["sidemetadataspec",3],["address",3]],["usize",15]],[[["sidemetadataspec",3],["address",3],["ordering",4]],["usize",15]],null,null,null,[[["usize",15],["address",3],["bool",15]],["result",6]],null,[[["sidemetadataspec",3]],["bool",15]],[[["usize",15],["sidemetadataspec",3],["address",3]]],[[],[["vec",3,["sidemetadataspec"]],["sidemetadataspec",3]]],null,[[["usize",15]]],null,[[]],null,[[["usize",15],["sidemetadataspec",3],["address",3]]],[[["usize",15],["sidemetadataspec",3],["ordering",4],["address",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["address",3]],["result",6]],[[["usize",15],["address",3]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["sidemetadataspec",3]],["i32",15]],[[["sidemetadataspec",3],["address",3]],["address",3]],[[["sidemetadataspec",3],["address",3]],["address",3]],[[["sidemetadataspec",3],["address",3]],["u8",15]],[[["sidemetadataspec",3]],["u8",15]],[[["sidemetadataspec",3]],["usize",15]],[[["usize",15],["sidemetadataspec",3],["bool",15],["address",3]],[["usize",15],["result",6,["usize"]]]],null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlock",3]],[[],["mutex",3]],[[["usize",15],["sidemetadataspec",3],["mathop",4],["address",3]],[["usize",15],["result",6,["usize"]]]],[[]],[[]],[[]],[[]],[[["bool",15]],[["vec",3,["sidemetadataspec"]],["sidemetadataspec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["sidemetadatasanity",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["sidemetadataspec",3],["address",3]]],[[["usize",15],["sidemetadataspec",3],["address",3]]],[[],["result",6]],[[],["result",6]],[[["usize",15],["sidemetadataspec",3],["address",3]]],[[],["result",6]],[[],["result",6]],[[["sidemetadatacontext",3],["str",15]]],[[["sidemetadataspec",3]],["result",6]],[[["usize",15],["sidemetadataspec",3],["address",3]]],[[["usize",15],["sidemetadataspec",3],["address",3]]],null,null,null,null,null,null,[[["objectreference",3]],["usize",15]],[[["objectreference",3]]],[[["objectreference",3],["allocationsemantics",4]],["objectreference",3]],[[],[["option",4,["isize"]],["isize",15]]],[[["objectreference",3]],["usize",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["bool",15]],[[["objectreference",3]],["objectreference",3]],[[["usize",15],["objectreference",3]],["objectreference",3]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["objectreference",3]]],null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["opaquepointer",3]],[[],["vmthread",3]],[[],["vmmutatorthread",3]],[[],["vmworkerthread",3]],[[]],[[]],[[]],[[]],[[]],[[["opaquepointer",3]],["bool",15]],[[["vmthread",3]],["bool",15]],[[["vmmutatorthread",3]],["bool",15]],[[["vmworkerthread",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["address",3]]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[["opaquepointer",3]],["bool",15]],[[["vmthread",3]],["bool",15]],[[["vmmutatorthread",3]],["bool",15]],[[["vmworkerthread",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nurseryzeroingoptions",4]],[[],["planselector",4]],[[],["perfeventoptions",3]],[[]],[[]],[[]],[[]],[[],["options",3]],null,[[["perfeventoptions",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],null,null,[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,null,[[["perfeventoptions",3]],["bool",15]],[[["options",3]],["unsafeoptionswrapper",3]],null,null,null,null,[[["str",15]],[["vec",3],["string",3],["result",4,["vec","string"]]]],null,null,[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["i32",15]],["i32",15]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[],["i32",15]],null,[[["i32",15]],["i32",15]],[[["formatter",3]],["result",6]],[[]],[[["i32",15]],["i32",15]],[[],["address",3]],null,[[["i32",15]],["bool",15]],[[["i32",15]]],[[],["i32",15]],null,[[],["i32",15]],null,null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,null,[[["usize",15],["address",3]]],[[["address",3],["i32",15]]],null,[[["i32",15]]],[[["i32",15]]],[[["i32",15]],["i32",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["i32",15]],[[],["i32",15]],null,null,null,null,null,null,null,null,null,null,null,null,[[["objectreference",3]]],[[["objectreference",3]]],[[["objectreference",3]]],[[["objectreference",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["semantics",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[["semantics",4]],["referenceprocessor",3]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[["semantics",4]]],null,null,null,[[["objectreference",3]]],[[["vmworkerthread",3],["bool",15]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],null,null,[[],["mutex",3]],null,[[],["referenceprocessorsync",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["usize",15]],["usize",15]],null,null,[[]],null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mmtk",3],["gcworker",3]]],[[["mmtk",3],["gcworker",3]]],[[["mmtk",3],["gcworker",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[]],[[]],[[]],[[["vec",3,["address"]],["bool",15],["mmtk",3],["address",3]]],null,null,null,[[["objectreference",3]],["objectreference",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[],["instant",3]],[[],["u64",15]],[[["instant",3]],["u64",15]],null,[[]],[[],["bool",15]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[],["bool",15]],[[],["string",3]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[["u64",15]]],[[]],[[["bool",15]]],[[["bool",15]]],[[["option",4,["bool"]],["bool",15]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,null,[[]],[[],["bool",15]],null,[[]],[[["u64",15]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],null,[[],["string",3]],null,[[["sharedstats",3],["arc",3,["sharedstats"]],["string",3],["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[["option",4,["bool"]],["bool",15]]],[[["u64",15]]],null,[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,null,[[["formatter",3]],["result",6]],[[]],[[],["bool",15]],null,[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],null,[[],["string",3]],null,[[["sharedstats",3],["arc",3,["sharedstats"]],["string",3],["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["bool",15]]],[[["bool",15]]],[[["option",4,["bool"]],["bool",15]]],[[["u64",15]]],null,[[]],null,null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[["u64",15]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["arc",3,["mutex"]],["mutex",3,["eventcounter"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["options",3]]],[[["str",15],["bool",15]],[["arc",3,["mutex"]],["mutex",3,["eventcounter"]]]],[[["str",15],["bool",15]],[["mutex",3,["sizecounter"]],["sizecounter",3]]],[[["str",15],["bool",15]],[["mutex",3,["longcounter"]],["arc",3,["mutex"]]]],null,[[["hashmap",3]]],[[["mmtk",3]]],[[["bool",15]]],null,[[]],[[]],[[["mmtk",3]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],null,[[]],[[],["usize",15]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["address",3],["bool",15]]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],[["address",3],["vec",3,["address"]]]],[[],[["address",3],["vec",3,["address"]]]],null,[[["address",3],["bool",15]]],[[]],[[["bool",15]]],[[["formatter",3]],["result",6]],[[]],null,[[],["bool",15]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[],["bool",15]],null,[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vmmutatorthread",3]]],null,[[["usize",15],["objectreference",3],["ordering",4],["option",4,["usize"]],["headermetadataspec",3]],["bool",15]],[[["objectreference",3],["allocationsemantics",4]],["objectreference",3]],[[["objectreference",3],["address",3]],["address",3]],[[["objectreference",3]]],[[["usize",15],["objectreference",3],["ordering",4],["headermetadataspec",3]],["usize",15]],[[["usize",15],["objectreference",3],["ordering",4],["headermetadataspec",3]],["usize",15]],[[["objectreference",3]],["usize",15]],[[],[["mutator",3],["option",4,["mutator"]]]],[[["objectreference",3],["address",3]],["objectreference",3]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3]]],[[],["plan",8]],[[["vmthread",3]],["bool",15]],[[["usize",15],["objectreference",3],["option",4,["ordering"]],["ordering",4],["option",4,["usize"]],["headermetadataspec",3]],["usize",15]],[[["vmmutatorthread",3]],["mutator",3]],[[["vmworkerthread",3],["bool",15]]],[[],["usize",15]],null,[[["objectreference",3]],["address",3]],[[["vmworkerthread",3],["vmmutatorthread",3]]],[[["objectreference",3],["vmworkerthread",3]],["objectreference",3]],[[["objectreference",3]],["address",3]],null,[[]],[[["vmworkerthread",3]]],[[["objectreference",3],["vmworkerthread",3]]],[[["gcworker",3]]],[[["mutator",3],["vmworkerthread",3]]],[[]],[[]],null,[[["objectreference",3]]],[[["vmthread",3],["option",4,["gcworker"]],["gcworker",3]]],[[["vmworkerthread",3]]],[[["usize",15],["objectreference",3],["option",4,["ordering"]],["ordering",4],["option",4,["usize"]],["headermetadataspec",3]]],[[],["bool",15]],null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[],[["mutator",3],["option",4,["mutator"]]]],[[],["plan",8]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[["vmthread",3]],["bool",15]],[[["vmmutatorthread",3]],["mutator",3]],[[],["synchronizedmutatoriterator",3]],[[],["synchronizedmutatoriterator",3]],[[],["option",4]],[[],["usize",15]],null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["vmmutatorthread",3]]],[[["vmthread",3]]],[[["vmthread",3]]],[[["vmworkerthread",3],["vmmutatorthread",3]]],[[["gcworker",3]]],[[["gcworker",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["vmworkerthread",3]]],[[["vmthread",3],["option",4,["gcworker"]],["gcworker",3]]],[[["vmworkerthread",3]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["objectreference",3],["ordering",4],["option",4,["usize"]],["headermetadataspec",3]],["bool",15]],[[["objectreference",3],["allocationsemantics",4]],["objectreference",3]],[[["objectreference",3],["address",3]],["address",3]],[[["objectreference",3]]],[[["usize",15],["objectreference",3],["ordering",4],["headermetadataspec",3]],["usize",15]],[[["usize",15],["objectreference",3],["ordering",4],["headermetadataspec",3]],["usize",15]],[[["objectreference",3]],["usize",15]],[[["objectreference",3],["address",3]],["objectreference",3]],[[["objectreference",3]]],[[["usize",15],["objectreference",3],["option",4,["ordering"]],["ordering",4],["option",4,["usize"]],["headermetadataspec",3]],["usize",15]],[[["objectreference",3]],["address",3]],[[["objectreference",3]],["address",3]],null,[[["usize",15],["objectreference",3],["option",4,["ordering"]],["ordering",4],["option",4,["usize"]],["headermetadataspec",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["metadataspec",4]],[[],["metadataspec",4]],[[],["metadataspec",4]],[[],["metadataspec",4]],[[],["metadataspec",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["isize",15]]],[[["isize",15]]],[[["isize",15]]],[[["isize",15]]],[[["isize",15]]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["arc",3]],[["arc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["objectreference",3],["ordering",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["metadataspec",4]]],[[["metadataspec",4]]],[[["metadataspec",4]]],[[["metadataspec",4]]],[[["metadataspec",4]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["objectreference",3]]],[[["objectreference",3]]],[[["objectreference",3]],["objectreference",3]],[[["objectreference",3],["vmworkerthread",3]],["objectreference",3]],[[["objectreference",3]]],null,null,null,null,null,[[["vmworkerthread",3],["bool",15]]],[[["objectreference",3],["vmworkerthread",3]]],[[["gcworker",3]]],[[["mutator",3],["vmworkerthread",3]]],[[]],[[]],[[],["bool",15]]],"p":[[4,"AllocationSemantics"],[4,"BarrierSelector"],[8,"CopyContext"],[8,"Plan"],[8,"MutatorContext"],[3,"Mutator"],[8,"TraceLocal"],[3,"MMTK"],[8,"TransitiveClosure"],[3,"VM_MAP"],[3,"MMAPPER"],[3,"SFT_MAP"],[3,"PlanConstraints"],[3,"ObjectsClosure"],[4,"WriteTarget"],[3,"NoBarrier"],[3,"ObjectRememberingBarrier"],[8,"Barrier"],[13,"Object"],[13,"Slot"],[3,"RequestSync"],[3,"ControllerCollectorContext"],[3,"GenCopyCopyContext"],[3,"GenCopyMatureProcessEdges"],[3,"GenCopy"],[3,"ALLOCATOR_MAPPING"],[3,"GenNurseryProcessEdges"],[3,"Gen"],[3,"GenImmixCopyContext"],[3,"GenImmixMatureProcessEdges"],[3,"GenImmix"],[3,"ALLOCATOR_MAPPING"],[3,"NoCopy"],[4,"GcStatus"],[3,"BasePlan"],[3,"CommonPlan"],[4,"TraceKind"],[3,"ImmixCopyContext"],[3,"ImmixProcessEdges"],[3,"Immix"],[3,"ALLOCATOR_MAPPING"],[3,"MSProcessEdges"],[3,"MSSweepChunk"],[3,"MSSweepChunks"],[3,"MarkSweep"],[3,"ALLOCATOR_MAPPING"],[3,"MutatorConfig"],[3,"NoGC"],[3,"ALLOCATOR_MAPPING"],[3,"PPProcessEdges"],[3,"PageProtect"],[3,"ALLOCATOR_MAPPING"],[3,"SSCopyContext"],[3,"SSProcessEdges"],[3,"SemiSpace"],[3,"ALLOCATOR_MAPPING"],[3,"CopySpace"],[3,"Block"],[4,"BlockState"],[3,"BlockList"],[13,"Reusable"],[3,"Chunk"],[3,"ChunkMap"],[4,"ChunkState"],[3,"SweepChunk"],[3,"Defrag"],[3,"ImmixSpace"],[3,"PrepareBlockState"],[3,"ScanObjectsAndMarkLines"],[3,"Line"],[3,"ImmortalSpace"],[3,"LargeObjectSpace"],[3,"LockFreeImmortalSpace"],[3,"MallocSpace"],[3,"CHUNK_METADATA"],[3,"CHUNK_MAP_LOCK"],[3,"MAX_METADATA_ADDRESS"],[8,"Space"],[3,"CommonSpace"],[3,"SpaceOptions"],[3,"EmptySpaceSFT"],[3,"SFTMap"],[8,"SFT"],[3,"ScanStackRoot"],[4,"WorkBucketStage"],[8,"ProcessEdgesWork"],[8,"GCWork"],[3,"GCWorker"],[3,"PrepareCollector"],[3,"ReleaseCollector"],[3,"StopMutators"],[3,"ProcessWeakRefs"],[3,"ScanStackRoots"],[3,"ScanVMSpecificRoots"],[3,"Prepare"],[3,"Release"],[3,"ScheduleCollection"],[3,"PrepareMutator"],[3,"ReleaseMutator"],[3,"ProcessEdgesBase"],[3,"ScanObjects"],[3,"ProcessModBuf"],[3,"EndOfGC"],[4,"CoordinatorMessage"],[3,"GCWorkScheduler"],[13,"Work"],[3,"WorkerLocalStat"],[3,"WorkStat"],[3,"SchedulerStat"],[3,"WorkUID"],[3,"WorkBucket"],[3,"PrioritizedWork"],[3,"WorkCounterBase"],[3,"WorkDuration"],[8,"WorkCounterClone"],[8,"WorkCounter"],[3,"GCWorkerLocalPtr"],[3,"WorkerGroup"],[8,"GCWorkerLocal"],[3,"SynchronizedCounter"],[3,"Address"],[3,"ObjectReference"],[4,"AllocatorSelector"],[8,"Allocator"],[3,"BumpAllocator"],[3,"LargeObjectAllocator"],[3,"MallocAllocator"],[13,"BumpPointer"],[13,"LargeObject"],[13,"Malloc"],[13,"Immix"],[3,"Allocators"],[3,"DumpLinearScan"],[3,"ImmixAllocator"],[8,"LinearScan"],[3,"AnalysisManager"],[8,"RtAnalysis"],[3,"GcHookWork"],[3,"GcCounter"],[3,"ObjectCounter"],[3,"PerSizeClassObjectCounter"],[3,"EDGE_LOG"],[3,"Finalization"],[3,"ForwardFinalization"],[3,"FinalizableProcessor"],[8,"GenericFreeList"],[3,"PageAccounting"],[3,"FreeListPageResource"],[3,"CommonFreeListPageResource"],[3,"FreeListPageResourceSync"],[3,"HeapMeta"],[3,"FragmentedMapper"],[8,"Map"],[3,"Map64"],[4,"MapState"],[8,"Mmapper"],[4,"MonotonePageResourceConditional"],[3,"MonotonePageResource"],[3,"MonotonePageResourceSync"],[13,"Contiguous"],[3,"CommonPageResource"],[8,"PageResource"],[3,"PRAllocResult"],[3,"PRAllocFail"],[3,"SpaceDescriptor"],[4,"VMRequest"],[13,"Fixed"],[13,"Extent"],[13,"Fraction"],[3,"IntArrayFreeList"],[4,"MetadataSpec"],[13,"InHeader"],[13,"OnSide"],[3,"HeaderMetadataSpec"],[19,"SideMetadataOffset"],[3,"MetadataByteArrayRef"],[3,"SideMetadataContext"],[3,"SideMetadataSpec"],[3,"SideMetadataSanity"],[4,"MathOp"],[3,"CONTENT_SANITY_MAP"],[3,"SANITY_LOCK"],[3,"OpaquePointer"],[3,"VMThread"],[3,"VMMutatorThread"],[3,"VMWorkerThread"],[3,"UnsafeOptionsWrapper"],[4,"NurseryZeroingOptions"],[4,"PlanSelector"],[3,"Options"],[3,"PerfEventOptions"],[3,"RawMemoryFreeList"],[4,"Semantics"],[3,"ReferenceProcessor"],[3,"ReferenceProcessors"],[3,"ReferenceProcessorSync"],[3,"ScheduleSanityGC"],[3,"SanityPrepare"],[3,"SanityRelease"],[3,"SanityChecker"],[3,"SanityGCProcessEdges"],[8,"Diffable"],[3,"MonotoneNanoTime"],[8,"Counter"],[3,"EventCounter"],[3,"LongCounter"],[3,"SizeCounter"],[3,"SharedStats"],[3,"Stats"],[3,"TreadMill"],[3,"VMGlobalLogBitSpec"],[3,"VMLocalForwardingPointerSpec"],[3,"VMLocalForwardingBitsSpec"],[3,"VMLocalMarkBitSpec"],[3,"VMLocalLOSMarkNurserySpec"],[8,"VMBinding"],[8,"Collection"],[8,"ObjectModel"],[8,"ActivePlan"],[8,"ReferenceGlue"],[8,"Scanning"],[3,"SynchronizedMutatorIterator"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};