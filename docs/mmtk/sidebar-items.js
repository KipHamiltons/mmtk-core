initSidebarItems({"enum":[["Allocator","Allocation semantics that MMTk provides. Each allocation request requires a desired semantic for the object to allocate."]],"mod":[["memory_manager","VM-to-MMTk interface: safe Rust APIs."],["policy","Memory policies that can be used for spaces."],["scheduler","A general scheduler implementation. MMTk uses it to schedule GC-related works."],["util","Utilities used by other modules, including allocators, heap implementation, etc."],["vm","MMTk-to-VM interface: the VMBinding trait."]],"struct":[["MMTK","An MMTk instance. MMTk allows mutiple instances to run independently, and each instance gives users a separate heap. Note that multi-instances is not fully supported yet"],["Mutator","A mutator is a per-thread data structure that manages allocations and barriers. It is usually highly coupled with the language VM. It is recommended for MMTk users 1) to have a mutator struct of the same layout in the thread local storage that can be accessed efficiently, and 2) to implement fastpath allocation and barriers for the mutator in the VM side."]],"trait":[["CopyContext","A GC worker's context for copying GCs. Each GC plan should provide their implementation of a CopyContext. For non-copying GC, NoCopy can be used."],["MutatorContext","Each GC plan should provide their implementation of a MutatorContext. Note that this trait is no longer needed as we removed per-plan mutator implementation and we will remove this trait as well in the future."],["Plan","A plan describes the global core functionality for all memory management schemes. All global MMTk plans should implement this trait."],["TraceLocal","This trait and its global counterpart implement the core functionality for a transitive closure over the heap graph. This trait specifically implements the unsynchronized thread-local component (ie the 'fast-path') of the trace mechanism."],["TransitiveClosure","This trait is the fundamental mechanism for performing a transitive closure over an object graph."]]});