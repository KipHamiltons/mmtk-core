(function() {var implementors = {};
implementors["mmtk"] = [{"text":"impl UnwindSafe for Address","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectReference","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for Allocators&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllocatorSelector","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for BumpAllocator&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DumpLinearScan","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for LargeObjectAllocator&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GCByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FragmentedMapper","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Map64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommonFreeListPageResource","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for FreeListPageResource&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeapMeta","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for MonotonePageResource&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MonotonePageResourceConditional","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for CommonPageResource&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpaceDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntArrayFreeList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaquePointer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NurseryZeroingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsafeOptionsWrapper","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMemoryFreeList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferenceProcessors","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferenceProcessor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semantics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MonotoneNanoTime","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LongCounter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diffable&gt;::Val: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SharedStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SynchronizedCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TreadMill","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for MMTK&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllocationSemantics","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !UnwindSafe for Mutator&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SFTMap","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for CommonSpace&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpaceOptions","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for ImmortalSpace&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for CopySpace&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for LargeObjectSpace&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; !UnwindSafe for CoordinatorMessage&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; !UnwindSafe for Scheduler&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedulerStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WorkStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WorkerLocalStat","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; !UnwindSafe for Worker&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; !UnwindSafe for WorkerGroup&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScheduleCollection","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Prepare&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for PrepareMutator&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrepareCollector","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Release&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;VM&gt; !UnwindSafe for ReleaseMutator&lt;VM&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReleaseCollector","synthetic":true,"types":[]},{"text":"impl&lt;ScanEdges&gt; UnwindSafe for StopMutators&lt;ScanEdges&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ScanEdges: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EndOfGC","synthetic":true,"types":[]},{"text":"impl&lt;Edges&gt; UnwindSafe for ScanStackRoots&lt;Edges&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Edges: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Edges&gt; !UnwindSafe for ScanStackRoot&lt;Edges&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Edges&gt; UnwindSafe for ScanVMSpecificRoots&lt;Edges&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Edges: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for ProcessEdgesBase&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Edges&gt; UnwindSafe for ScanObjects&lt;Edges&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Edges: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ProcessModBuf&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()